"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.getEncryptionAtRestPrivateEndpointOutput = exports.getEncryptionAtRestPrivateEndpoint = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * ## # Data Source: mongodbatlas.EncryptionAtRestPrivateEndpoint
 *
 * `mongodbatlas.EncryptionAtRestPrivateEndpoint` describes a private endpoint used for encryption at rest using customer-managed keys.
 *
 * ## Example Usage
 *
 * ### S
 *
 * > **NOTE:** Only Azure Key Vault with Azure Private Link and AWS KMS over AWS PrivateLink is supported at this time.
 *
 * ### Encryption At Rest Azure Key Vault Private Endpoint
 * To learn more, see [Manage Customer Keys with Azure Key Vault Over Private Endpoints](https://www.mongodb.com/docs/atlas/security/azure-kms-over-private-endpoint/#manage-customer-keys-with-azure-key-vault-over-private-endpoints).
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const single = mongodbatlas.getEncryptionAtRestPrivateEndpoint({
 *     projectId: atlasProjectId,
 *     cloudProvider: "AZURE",
 *     id: endpoint.id,
 * });
 * export const endpointConnectionName = single.then(single => single.privateEndpointConnectionName);
 * ```
 *
 * ### Encryption At Rest AWS KMS Private Endpoint
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const single = mongodbatlas.getEncryptionAtRestPrivateEndpoint({
 *     projectId: atlasProjectId,
 *     cloudProvider: "AWS",
 *     id: endpoint.id,
 * });
 * export const status = single.then(single => single.status);
 * ```
 */
function getEncryptionAtRestPrivateEndpoint(args, opts) {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("mongodbatlas:index/getEncryptionAtRestPrivateEndpoint:getEncryptionAtRestPrivateEndpoint", {
        "cloudProvider": args.cloudProvider,
        "id": args.id,
        "projectId": args.projectId,
    }, opts);
}
exports.getEncryptionAtRestPrivateEndpoint = getEncryptionAtRestPrivateEndpoint;
/**
 * ## # Data Source: mongodbatlas.EncryptionAtRestPrivateEndpoint
 *
 * `mongodbatlas.EncryptionAtRestPrivateEndpoint` describes a private endpoint used for encryption at rest using customer-managed keys.
 *
 * ## Example Usage
 *
 * ### S
 *
 * > **NOTE:** Only Azure Key Vault with Azure Private Link and AWS KMS over AWS PrivateLink is supported at this time.
 *
 * ### Encryption At Rest Azure Key Vault Private Endpoint
 * To learn more, see [Manage Customer Keys with Azure Key Vault Over Private Endpoints](https://www.mongodb.com/docs/atlas/security/azure-kms-over-private-endpoint/#manage-customer-keys-with-azure-key-vault-over-private-endpoints).
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const single = mongodbatlas.getEncryptionAtRestPrivateEndpoint({
 *     projectId: atlasProjectId,
 *     cloudProvider: "AZURE",
 *     id: endpoint.id,
 * });
 * export const endpointConnectionName = single.then(single => single.privateEndpointConnectionName);
 * ```
 *
 * ### Encryption At Rest AWS KMS Private Endpoint
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const single = mongodbatlas.getEncryptionAtRestPrivateEndpoint({
 *     projectId: atlasProjectId,
 *     cloudProvider: "AWS",
 *     id: endpoint.id,
 * });
 * export const status = single.then(single => single.status);
 * ```
 */
function getEncryptionAtRestPrivateEndpointOutput(args, opts) {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("mongodbatlas:index/getEncryptionAtRestPrivateEndpoint:getEncryptionAtRestPrivateEndpoint", {
        "cloudProvider": args.cloudProvider,
        "id": args.id,
        "projectId": args.projectId,
    }, opts);
}
exports.getEncryptionAtRestPrivateEndpointOutput = getEncryptionAtRestPrivateEndpointOutput;
//# sourceMappingURL=getEncryptionAtRestPrivateEndpoint.js.map