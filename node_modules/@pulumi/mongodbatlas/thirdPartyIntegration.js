"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ThirdPartyIntegration = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * ## # Resource: mongodbatlas.ThirdPartyIntegration
 *
 * `mongodbatlas.ThirdPartyIntegration` Provides a Third-Party Integration Settings for the given type.
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
 *
 * > **NOTE:** Slack integrations now use the OAuth2 verification method and must be initially configured, or updated from a legacy integration, through the Atlas third-party service integrations page. Legacy tokens will soon no longer be supported.[Read more about slack setup](https://docs.atlas.mongodb.com/tutorial/third-party-service-integrations/)
 *
 * > **IMPORTANT** Each project can only have one configuration per {INTEGRATION-TYPE}.
 *
 * > **IMPORTANT:** All arguments including the secrets will be stored in the raw state as plain-text. Read more about sensitive data in state.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const testDatadog = new mongodbatlas.ThirdPartyIntegration("test_datadog", {
 *     projectId: "<PROJECT-ID>",
 *     type: "DATADOG",
 *     apiKey: "<API-KEY>",
 *     region: "<REGION>",
 * });
 * ```
 *
 * ## Import
 *
 * Third-Party Integration Settings can be imported using project ID and the integration type, in the format `project_id`-`type`, e.g.
 *
 * ```sh
 * $ pulumi import mongodbatlas:index/thirdPartyIntegration:ThirdPartyIntegration test_datadog 1112222b3bf99403840e8934-DATADOG
 * ```
 * See [MongoDB Atlas API](https://www.mongodb.com/docs/atlas/reference/api-resources-spec/#tag/Third-Party-Integrations/operation/createThirdPartyIntegration) Documentation for more information.
 */
class ThirdPartyIntegration extends pulumi.CustomResource {
    /**
     * Get an existing ThirdPartyIntegration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ThirdPartyIntegration(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ThirdPartyIntegration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ThirdPartyIntegration.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["apiKey"] = state ? state.apiKey : undefined;
            resourceInputs["channelName"] = state ? state.channelName : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["microsoftTeamsWebhookUrl"] = state ? state.microsoftTeamsWebhookUrl : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["routingKey"] = state ? state.routingKey : undefined;
            resourceInputs["secret"] = state ? state.secret : undefined;
            resourceInputs["sendCollectionLatencyMetrics"] = state ? state.sendCollectionLatencyMetrics : undefined;
            resourceInputs["sendDatabaseMetrics"] = state ? state.sendDatabaseMetrics : undefined;
            resourceInputs["sendUserProvidedResourceTags"] = state ? state.sendUserProvidedResourceTags : undefined;
            resourceInputs["serviceDiscovery"] = state ? state.serviceDiscovery : undefined;
            resourceInputs["serviceKey"] = state ? state.serviceKey : undefined;
            resourceInputs["teamName"] = state ? state.teamName : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
            resourceInputs["userName"] = state ? state.userName : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["apiKey"] = (args === null || args === void 0 ? void 0 : args.apiKey) ? pulumi.secret(args.apiKey) : undefined;
            resourceInputs["channelName"] = args ? args.channelName : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["microsoftTeamsWebhookUrl"] = (args === null || args === void 0 ? void 0 : args.microsoftTeamsWebhookUrl) ? pulumi.secret(args.microsoftTeamsWebhookUrl) : undefined;
            resourceInputs["password"] = (args === null || args === void 0 ? void 0 : args.password) ? pulumi.secret(args.password) : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["routingKey"] = (args === null || args === void 0 ? void 0 : args.routingKey) ? pulumi.secret(args.routingKey) : undefined;
            resourceInputs["secret"] = (args === null || args === void 0 ? void 0 : args.secret) ? pulumi.secret(args.secret) : undefined;
            resourceInputs["sendCollectionLatencyMetrics"] = args ? args.sendCollectionLatencyMetrics : undefined;
            resourceInputs["sendDatabaseMetrics"] = args ? args.sendDatabaseMetrics : undefined;
            resourceInputs["sendUserProvidedResourceTags"] = args ? args.sendUserProvidedResourceTags : undefined;
            resourceInputs["serviceDiscovery"] = (args === null || args === void 0 ? void 0 : args.serviceDiscovery) ? pulumi.secret(args.serviceDiscovery) : undefined;
            resourceInputs["serviceKey"] = (args === null || args === void 0 ? void 0 : args.serviceKey) ? pulumi.secret(args.serviceKey) : undefined;
            resourceInputs["teamName"] = args ? args.teamName : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["url"] = args ? args.url : undefined;
            resourceInputs["userName"] = (args === null || args === void 0 ? void 0 : args.userName) ? pulumi.secret(args.userName) : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["apiKey", "microsoftTeamsWebhookUrl", "password", "routingKey", "secret", "serviceDiscovery", "serviceKey", "userName"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ThirdPartyIntegration.__pulumiType, name, resourceInputs, opts);
    }
}
exports.ThirdPartyIntegration = ThirdPartyIntegration;
/** @internal */
ThirdPartyIntegration.__pulumiType = 'mongodbatlas:index/thirdPartyIntegration:ThirdPartyIntegration';
//# sourceMappingURL=thirdPartyIntegration.js.map