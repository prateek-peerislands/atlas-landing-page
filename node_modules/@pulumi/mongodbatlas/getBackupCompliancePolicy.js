"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.getBackupCompliancePolicyOutput = exports.getBackupCompliancePolicy = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const myCluster = new mongodbatlas.AdvancedCluster("my_cluster", {
 *     projectId: "<PROJECT-ID>",
 *     name: "clusterTest",
 *     clusterType: "REPLICASET",
 *     backupEnabled: true,
 *     replicationSpecs: [{
 *         regionConfigs: [{
 *             priority: 7,
 *             providerName: "AWS",
 *             regionName: "EU_CENTRAL_1",
 *             electableSpecs: {
 *                 instanceSize: "M10",
 *                 nodeCount: 3,
 *             },
 *         }],
 *     }],
 * });
 * const testCloudBackupSchedule = new mongodbatlas.CloudBackupSchedule("test", {
 *     projectId: myCluster.projectId,
 *     clusterName: myCluster.name,
 *     referenceHourOfDay: 3,
 *     referenceMinuteOfHour: 45,
 *     restoreWindowDays: 4,
 *     policyItemHourly: {
 *         frequencyInterval: 1,
 *         retentionUnit: "days",
 *         retentionValue: 1,
 *     },
 *     policyItemDaily: {
 *         frequencyInterval: 1,
 *         retentionUnit: "days",
 *         retentionValue: 2,
 *     },
 *     policyItemWeeklies: [{
 *         frequencyInterval: 4,
 *         retentionUnit: "weeks",
 *         retentionValue: 3,
 *     }],
 *     policyItemMonthlies: [{
 *         frequencyInterval: 5,
 *         retentionUnit: "months",
 *         retentionValue: 4,
 *     }],
 *     policyItemYearlies: [{
 *         frequencyInterval: 1,
 *         retentionUnit: "years",
 *         retentionValue: 1,
 *     }],
 * });
 * const test = mongodbatlas.getCloudBackupScheduleOutput({
 *     projectId: testCloudBackupSchedule.projectId,
 *     clusterName: testCloudBackupSchedule.clusterName,
 * });
 * const backupPolicy = mongodbatlas.getBackupCompliancePolicyOutput({
 *     projectId: testCloudBackupSchedule.id,
 * });
 * const backupPolicyBackupCompliancePolicy = new mongodbatlas.BackupCompliancePolicy("backup_policy", {
 *     projectId: "<PROJECT-ID>",
 *     authorizedEmail: "user@email.com",
 *     authorizedUserFirstName: "First",
 *     authorizedUserLastName: "Last",
 *     copyProtectionEnabled: false,
 *     pitEnabled: false,
 *     encryptionAtRestEnabled: false,
 *     restoreWindowDays: 7,
 *     onDemandPolicyItem: {
 *         frequencyInterval: 0,
 *         retentionUnit: "days",
 *         retentionValue: 3,
 *     },
 *     policyItemHourly: {
 *         frequencyInterval: 6,
 *         retentionUnit: "days",
 *         retentionValue: 7,
 *     },
 *     policyItemDaily: {
 *         frequencyInterval: 0,
 *         retentionUnit: "days",
 *         retentionValue: 7,
 *     },
 *     policyItemWeeklies: [{
 *         frequencyInterval: 0,
 *         retentionUnit: "weeks",
 *         retentionValue: 4,
 *     }],
 *     policyItemMonthlies: [{
 *         frequencyInterval: 0,
 *         retentionUnit: "months",
 *         retentionValue: 12,
 *     }],
 *     policyItemYearlies: [{
 *         frequencyInterval: 1,
 *         retentionUnit: "years",
 *         retentionValue: 1,
 *     }],
 * });
 * ```
 */
function getBackupCompliancePolicy(args, opts) {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("mongodbatlas:index/getBackupCompliancePolicy:getBackupCompliancePolicy", {
        "projectId": args.projectId,
    }, opts);
}
exports.getBackupCompliancePolicy = getBackupCompliancePolicy;
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const myCluster = new mongodbatlas.AdvancedCluster("my_cluster", {
 *     projectId: "<PROJECT-ID>",
 *     name: "clusterTest",
 *     clusterType: "REPLICASET",
 *     backupEnabled: true,
 *     replicationSpecs: [{
 *         regionConfigs: [{
 *             priority: 7,
 *             providerName: "AWS",
 *             regionName: "EU_CENTRAL_1",
 *             electableSpecs: {
 *                 instanceSize: "M10",
 *                 nodeCount: 3,
 *             },
 *         }],
 *     }],
 * });
 * const testCloudBackupSchedule = new mongodbatlas.CloudBackupSchedule("test", {
 *     projectId: myCluster.projectId,
 *     clusterName: myCluster.name,
 *     referenceHourOfDay: 3,
 *     referenceMinuteOfHour: 45,
 *     restoreWindowDays: 4,
 *     policyItemHourly: {
 *         frequencyInterval: 1,
 *         retentionUnit: "days",
 *         retentionValue: 1,
 *     },
 *     policyItemDaily: {
 *         frequencyInterval: 1,
 *         retentionUnit: "days",
 *         retentionValue: 2,
 *     },
 *     policyItemWeeklies: [{
 *         frequencyInterval: 4,
 *         retentionUnit: "weeks",
 *         retentionValue: 3,
 *     }],
 *     policyItemMonthlies: [{
 *         frequencyInterval: 5,
 *         retentionUnit: "months",
 *         retentionValue: 4,
 *     }],
 *     policyItemYearlies: [{
 *         frequencyInterval: 1,
 *         retentionUnit: "years",
 *         retentionValue: 1,
 *     }],
 * });
 * const test = mongodbatlas.getCloudBackupScheduleOutput({
 *     projectId: testCloudBackupSchedule.projectId,
 *     clusterName: testCloudBackupSchedule.clusterName,
 * });
 * const backupPolicy = mongodbatlas.getBackupCompliancePolicyOutput({
 *     projectId: testCloudBackupSchedule.id,
 * });
 * const backupPolicyBackupCompliancePolicy = new mongodbatlas.BackupCompliancePolicy("backup_policy", {
 *     projectId: "<PROJECT-ID>",
 *     authorizedEmail: "user@email.com",
 *     authorizedUserFirstName: "First",
 *     authorizedUserLastName: "Last",
 *     copyProtectionEnabled: false,
 *     pitEnabled: false,
 *     encryptionAtRestEnabled: false,
 *     restoreWindowDays: 7,
 *     onDemandPolicyItem: {
 *         frequencyInterval: 0,
 *         retentionUnit: "days",
 *         retentionValue: 3,
 *     },
 *     policyItemHourly: {
 *         frequencyInterval: 6,
 *         retentionUnit: "days",
 *         retentionValue: 7,
 *     },
 *     policyItemDaily: {
 *         frequencyInterval: 0,
 *         retentionUnit: "days",
 *         retentionValue: 7,
 *     },
 *     policyItemWeeklies: [{
 *         frequencyInterval: 0,
 *         retentionUnit: "weeks",
 *         retentionValue: 4,
 *     }],
 *     policyItemMonthlies: [{
 *         frequencyInterval: 0,
 *         retentionUnit: "months",
 *         retentionValue: 12,
 *     }],
 *     policyItemYearlies: [{
 *         frequencyInterval: 1,
 *         retentionUnit: "years",
 *         retentionValue: 1,
 *     }],
 * });
 * ```
 */
function getBackupCompliancePolicyOutput(args, opts) {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("mongodbatlas:index/getBackupCompliancePolicy:getBackupCompliancePolicy", {
        "projectId": args.projectId,
    }, opts);
}
exports.getBackupCompliancePolicyOutput = getBackupCompliancePolicyOutput;
//# sourceMappingURL=getBackupCompliancePolicy.js.map