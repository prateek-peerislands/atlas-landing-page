"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDatabaseUserOutput = exports.getDatabaseUser = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * ## # Data Source: mongodbatlas.DatabaseUser
 *
 * `mongodbatlas.DatabaseUser` describes a Database User. This represents a database user which will be applied to all clusters within the project.
 *
 * Each user has a set of roles that provide access to the project’s databases. User's roles apply to all the clusters in the project: if two clusters have a `products` database and a user has a role granting `read` access on the products database, the user has that access on both clusters.
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find groupId in the official documentation.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const testDatabaseUser = new mongodbatlas.DatabaseUser("test", {
 *     username: "test-acc-username",
 *     password: "test-acc-password",
 *     projectId: "<PROJECT-ID>",
 *     authDatabaseName: "admin",
 *     roles: [
 *         {
 *             roleName: "readWrite",
 *             databaseName: "admin",
 *         },
 *         {
 *             roleName: "atlasAdmin",
 *             databaseName: "admin",
 *         },
 *     ],
 *     labels: [
 *         {
 *             key: "key 1",
 *             value: "value 1",
 *         },
 *         {
 *             key: "key 2",
 *             value: "value 2",
 *         },
 *     ],
 * });
 * const test = mongodbatlas.getDatabaseUserOutput({
 *     projectId: testDatabaseUser.projectId,
 *     username: testDatabaseUser.username,
 * });
 * ```
 *
 * **Example of usage with a OIDC federated authentication user**
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const testDatabaseUser = new mongodbatlas.DatabaseUser("test", {
 *     username: "64d613677e1ad50839cce4db/testUserOrGroup",
 *     projectId: "6414908c207f4d22f4d8f232",
 *     authDatabaseName: "admin",
 *     oidcAuthType: "IDP_GROUP",
 *     roles: [{
 *         roleName: "readWriteAnyDatabase",
 *         databaseName: "admin",
 *     }],
 * });
 * const test = mongodbatlas.getDatabaseUserOutput({
 *     username: testDatabaseUser.username,
 *     projectId: "6414908c207f4d22f4d8f232",
 *     authDatabaseName: "admin",
 * });
 * ```
 * Note: OIDC support is only avalible starting in [MongoDB 7.0](https://www.mongodb.com/evolved#mdbsevenzero) or later. To learn more, see the [MongoDB Atlas documentation](https://www.mongodb.com/docs/atlas/security-oidc/).
 */
function getDatabaseUser(args, opts) {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("mongodbatlas:index/getDatabaseUser:getDatabaseUser", {
        "authDatabaseName": args.authDatabaseName,
        "projectId": args.projectId,
        "username": args.username,
    }, opts);
}
exports.getDatabaseUser = getDatabaseUser;
/**
 * ## # Data Source: mongodbatlas.DatabaseUser
 *
 * `mongodbatlas.DatabaseUser` describes a Database User. This represents a database user which will be applied to all clusters within the project.
 *
 * Each user has a set of roles that provide access to the project’s databases. User's roles apply to all the clusters in the project: if two clusters have a `products` database and a user has a role granting `read` access on the products database, the user has that access on both clusters.
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find groupId in the official documentation.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const testDatabaseUser = new mongodbatlas.DatabaseUser("test", {
 *     username: "test-acc-username",
 *     password: "test-acc-password",
 *     projectId: "<PROJECT-ID>",
 *     authDatabaseName: "admin",
 *     roles: [
 *         {
 *             roleName: "readWrite",
 *             databaseName: "admin",
 *         },
 *         {
 *             roleName: "atlasAdmin",
 *             databaseName: "admin",
 *         },
 *     ],
 *     labels: [
 *         {
 *             key: "key 1",
 *             value: "value 1",
 *         },
 *         {
 *             key: "key 2",
 *             value: "value 2",
 *         },
 *     ],
 * });
 * const test = mongodbatlas.getDatabaseUserOutput({
 *     projectId: testDatabaseUser.projectId,
 *     username: testDatabaseUser.username,
 * });
 * ```
 *
 * **Example of usage with a OIDC federated authentication user**
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const testDatabaseUser = new mongodbatlas.DatabaseUser("test", {
 *     username: "64d613677e1ad50839cce4db/testUserOrGroup",
 *     projectId: "6414908c207f4d22f4d8f232",
 *     authDatabaseName: "admin",
 *     oidcAuthType: "IDP_GROUP",
 *     roles: [{
 *         roleName: "readWriteAnyDatabase",
 *         databaseName: "admin",
 *     }],
 * });
 * const test = mongodbatlas.getDatabaseUserOutput({
 *     username: testDatabaseUser.username,
 *     projectId: "6414908c207f4d22f4d8f232",
 *     authDatabaseName: "admin",
 * });
 * ```
 * Note: OIDC support is only avalible starting in [MongoDB 7.0](https://www.mongodb.com/evolved#mdbsevenzero) or later. To learn more, see the [MongoDB Atlas documentation](https://www.mongodb.com/docs/atlas/security-oidc/).
 */
function getDatabaseUserOutput(args, opts) {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("mongodbatlas:index/getDatabaseUser:getDatabaseUser", {
        "authDatabaseName": args.authDatabaseName,
        "projectId": args.projectId,
        "username": args.username,
    }, opts);
}
exports.getDatabaseUserOutput = getDatabaseUserOutput;
//# sourceMappingURL=getDatabaseUser.js.map