import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
/**
 * The provider type for the mongodbatlas package. By default, resources use package-wide configuration
 * settings, however an explicit `Provider` instance may be created and passed during resource
 * construction to achieve fine-grained programmatic control over provider settings. See the
 * [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
 */
export declare class Provider extends pulumi.ProviderResource {
    /**
     * Returns true if the given object is an instance of Provider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Provider;
    /**
     * AWS API Access Key.
     */
    readonly awsAccessKeyId: pulumi.Output<string | undefined>;
    /**
     * AWS API Access Secret Key.
     */
    readonly awsSecretAccessKey: pulumi.Output<string | undefined>;
    /**
     * AWS Security Token Service provided session token.
     */
    readonly awsSessionToken: pulumi.Output<string | undefined>;
    /**
     * MongoDB Atlas Base URL
     */
    readonly baseUrl: pulumi.Output<string | undefined>;
    /**
     * MongoDB Atlas Programmatic Private Key
     */
    readonly privateKey: pulumi.Output<string | undefined>;
    /**
     * MongoDB Atlas Programmatic Public Key
     */
    readonly publicKey: pulumi.Output<string | undefined>;
    /**
     * MongoDB Realm Base URL
     */
    readonly realmBaseUrl: pulumi.Output<string | undefined>;
    /**
     * Region where secret is stored as part of AWS Secret Manager.
     */
    readonly region: pulumi.Output<string | undefined>;
    /**
     * Name of secret stored in AWS Secret Manager.
     */
    readonly secretName: pulumi.Output<string | undefined>;
    /**
     * AWS Security Token Service endpoint. Required for cross-AWS region or cross-AWS account secrets.
     */
    readonly stsEndpoint: pulumi.Output<string | undefined>;
    /**
     * Create a Provider resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ProviderArgs, opts?: pulumi.ResourceOptions);
    /**
     * This function returns a Terraform config object with terraform-namecased keys,to be used with the Terraform Module Provider.
     */
    terraformConfig(): pulumi.Output<Provider.TerraformConfigResult>;
}
/**
 * The set of arguments for constructing a Provider resource.
 */
export interface ProviderArgs {
    assumeRole?: pulumi.Input<inputs.ProviderAssumeRole>;
    /**
     * AWS API Access Key.
     */
    awsAccessKeyId?: pulumi.Input<string>;
    /**
     * AWS API Access Secret Key.
     */
    awsSecretAccessKey?: pulumi.Input<string>;
    /**
     * AWS Security Token Service provided session token.
     */
    awsSessionToken?: pulumi.Input<string>;
    /**
     * MongoDB Atlas Base URL
     */
    baseUrl?: pulumi.Input<string>;
    /**
     * MongoDB Atlas Base URL default to gov
     */
    isMongodbgovCloud?: pulumi.Input<boolean>;
    /**
     * MongoDB Atlas Programmatic Private Key
     */
    privateKey?: pulumi.Input<string>;
    /**
     * MongoDB Atlas Programmatic Public Key
     */
    publicKey?: pulumi.Input<string>;
    /**
     * MongoDB Realm Base URL
     */
    realmBaseUrl?: pulumi.Input<string>;
    /**
     * Region where secret is stored as part of AWS Secret Manager.
     */
    region?: pulumi.Input<string>;
    /**
     * Name of secret stored in AWS Secret Manager.
     */
    secretName?: pulumi.Input<string>;
    /**
     * AWS Security Token Service endpoint. Required for cross-AWS region or cross-AWS account secrets.
     */
    stsEndpoint?: pulumi.Input<string>;
}
export declare namespace Provider {
    /**
     * The results of the Provider.terraformConfig method.
     */
    interface TerraformConfigResult {
        readonly result: {
            [key: string]: any;
        };
    }
}
