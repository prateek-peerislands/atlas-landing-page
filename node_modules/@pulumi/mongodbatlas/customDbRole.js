"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomDbRole = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * ## # Resource: mongodbatlas.CustomDbRole
 *
 * `mongodbatlas.CustomDbRole` provides a Custom DB Role resource. The customDBRoles resource lets you retrieve, create and modify the custom MongoDB roles in your cluster. Use custom MongoDB roles to specify custom sets of actions which cannot be described by the built-in Atlas database user privileges.
 *
 * > **IMPORTANT**  You define custom roles at the project level for all clusters in the project. The `mongodbatlas.CustomDbRole` resource supports a subset of MongoDB privilege actions. For a complete list of [privilege actions](https://docs.mongodb.com/manual/reference/privilege-actions/) available for this resource, see [Custom Role actions](https://docs.atlas.mongodb.com/reference/api/custom-role-actions/). Custom roles must include actions that all project's clusters support, and that are compatible with each MongoDB version used by your project's clusters. For example, if your project has MongoDB 4.2 clusters, you can't create custom roles that use actions introduced in MongoDB 4.4.
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find groupId in the official documentation.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const testRole = new mongodbatlas.CustomDbRole("test_role", {
 *     projectId: "<PROJECT-ID>",
 *     roleName: "myCustomRole",
 *     actions: [
 *         {
 *             action: "UPDATE",
 *             resources: [{
 *                 collectionName: "",
 *                 databaseName: "anyDatabase",
 *             }],
 *         },
 *         {
 *             action: "INSERT",
 *             resources: [{
 *                 collectionName: "",
 *                 databaseName: "anyDatabase",
 *             }],
 *         },
 *         {
 *             action: "REMOVE",
 *             resources: [{
 *                 collectionName: "",
 *                 databaseName: "anyDatabase",
 *             }],
 *         },
 *     ],
 * });
 * ```
 *
 * ### With Inherited Roles
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const inheritedRoleOne = new mongodbatlas.CustomDbRole("inherited_role_one", {
 *     projectId: "<PROJECT-ID>",
 *     roleName: "insertRole",
 *     actions: [{
 *         action: "INSERT",
 *         resources: [{
 *             collectionName: "",
 *             databaseName: "anyDatabase",
 *         }],
 *     }],
 * });
 * const inheritedRoleTwo = new mongodbatlas.CustomDbRole("inherited_role_two", {
 *     projectId: inheritedRoleOne.projectId,
 *     roleName: "statusServerRole",
 *     actions: [{
 *         action: "SERVER_STATUS",
 *         resources: [{
 *             cluster: true,
 *         }],
 *     }],
 * });
 * const testRole = new mongodbatlas.CustomDbRole("test_role", {
 *     projectId: inheritedRoleOne.projectId,
 *     roleName: "myCustomRole",
 *     actions: [
 *         {
 *             action: "UPDATE",
 *             resources: [{
 *                 collectionName: "",
 *                 databaseName: "anyDatabase",
 *             }],
 *         },
 *         {
 *             action: "REMOVE",
 *             resources: [{
 *                 collectionName: "",
 *                 databaseName: "anyDatabase",
 *             }],
 *         },
 *     ],
 *     inheritedRoles: [
 *         {
 *             roleName: inheritedRoleOne.roleName,
 *             databaseName: "admin",
 *         },
 *         {
 *             roleName: inheritedRoleTwo.roleName,
 *             databaseName: "admin",
 *         },
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * Database users can be imported using project ID and username, in the format `PROJECTID-ROLENAME`, e.g.
 *
 * ```sh
 * $ pulumi import mongodbatlas:index/customDbRole:CustomDbRole my_role 1112222b3bf99403840e8934-MyCustomRole
 * ```
 * For more information see: [MongoDB Atlas API Reference.](https://docs.atlas.mongodb.com/reference/api/custom-roles/)
 */
class CustomDbRole extends pulumi.CustomResource {
    /**
     * Get an existing CustomDbRole resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new CustomDbRole(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of CustomDbRole.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CustomDbRole.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["actions"] = state ? state.actions : undefined;
            resourceInputs["inheritedRoles"] = state ? state.inheritedRoles : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["roleName"] = state ? state.roleName : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.roleName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleName'");
            }
            resourceInputs["actions"] = args ? args.actions : undefined;
            resourceInputs["inheritedRoles"] = args ? args.inheritedRoles : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["roleName"] = args ? args.roleName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CustomDbRole.__pulumiType, name, resourceInputs, opts);
    }
}
exports.CustomDbRole = CustomDbRole;
/** @internal */
CustomDbRole.__pulumiType = 'mongodbatlas:index/customDbRole:CustomDbRole';
//# sourceMappingURL=customDbRole.js.map