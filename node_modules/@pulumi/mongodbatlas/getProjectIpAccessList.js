"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.getProjectIpAccessListOutput = exports.getProjectIpAccessList = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * ## # Data Source: mongodbatlas.ProjectIpAccessList
 *
 * `mongodbatlas.ProjectIpAccessList` describes an IP Access List entry resource. The access list grants access from IPs, CIDRs or AWS Security Groups (if VPC Peering is enabled) to clusters within the Project.
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
 *
 * > **IMPORTANT:**
 * When you remove an entry from the access list, existing connections from the removed address(es) may remain open for a variable amount of time. How much time passes before Atlas closes the connection depends on several factors, including how the connection was established, the particular behavior of the application or driver using the address, and the connection protocol (e.g., TCP or UDP). This is particularly important to consider when changing an existing IP address or CIDR block as they cannot be updated via the Provider (comments can however), hence a change will force the destruction and recreation of entries.
 *
 * ## Example Usage
 *
 * ### Using CIDR Block
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const testProjectIpAccessList = new mongodbatlas.ProjectIpAccessList("test", {
 *     projectId: "<PROJECT-ID>",
 *     cidrBlock: "1.2.3.4/32",
 *     comment: "cidr block for tf acc testing",
 * });
 * const test = mongodbatlas.getProjectIpAccessListOutput({
 *     projectId: testProjectIpAccessList.projectId,
 *     cidrBlock: testProjectIpAccessList.cidrBlock,
 * });
 * ```
 *
 * ### Using IP Address
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const testProjectIpAccessList = new mongodbatlas.ProjectIpAccessList("test", {
 *     projectId: "<PROJECT-ID>",
 *     ipAddress: "2.3.4.5",
 *     comment: "ip address for tf acc testing",
 * });
 * const test = mongodbatlas.getProjectIpAccessListOutput({
 *     projectId: testProjectIpAccessList.projectId,
 *     ipAddress: testProjectIpAccessList.ipAddress,
 * });
 * ```
 *
 * ### Using an AWS Security Group
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const testNetworkContainer = new mongodbatlas.NetworkContainer("test", {
 *     projectId: "<PROJECT-ID>",
 *     atlasCidrBlock: "192.168.208.0/21",
 *     providerName: "AWS",
 *     regionName: "US_EAST_1",
 * });
 * const testNetworkPeering = new mongodbatlas.NetworkPeering("test", {
 *     projectId: "<PROJECT-ID>",
 *     containerId: testNetworkContainer.containerId,
 *     accepterRegionName: "us-east-1",
 *     providerName: "AWS",
 *     routeTableCidrBlock: "172.31.0.0/16",
 *     vpcId: "vpc-0d93d6f69f1578bd8",
 *     awsAccountId: "232589400519",
 * });
 * const testProjectIpAccessList = new mongodbatlas.ProjectIpAccessList("test", {
 *     projectId: "<PROJECT-ID>",
 *     awsSecurityGroup: "sg-0026348ec11780bd1",
 *     comment: "TestAcc for awsSecurityGroup",
 * }, {
 *     dependsOn: [testNetworkPeering],
 * });
 * const test = mongodbatlas.getProjectIpAccessListOutput({
 *     projectId: testProjectIpAccessList.projectId,
 *     awsSecurityGroup: testProjectIpAccessList.awsSecurityGroup,
 * });
 * ```
 *
 * > **IMPORTANT:** In order to use AWS Security Group(s) VPC Peering must be enabled like in the above example.
 */
function getProjectIpAccessList(args, opts) {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("mongodbatlas:index/getProjectIpAccessList:getProjectIpAccessList", {
        "awsSecurityGroup": args.awsSecurityGroup,
        "cidrBlock": args.cidrBlock,
        "ipAddress": args.ipAddress,
        "projectId": args.projectId,
    }, opts);
}
exports.getProjectIpAccessList = getProjectIpAccessList;
/**
 * ## # Data Source: mongodbatlas.ProjectIpAccessList
 *
 * `mongodbatlas.ProjectIpAccessList` describes an IP Access List entry resource. The access list grants access from IPs, CIDRs or AWS Security Groups (if VPC Peering is enabled) to clusters within the Project.
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
 *
 * > **IMPORTANT:**
 * When you remove an entry from the access list, existing connections from the removed address(es) may remain open for a variable amount of time. How much time passes before Atlas closes the connection depends on several factors, including how the connection was established, the particular behavior of the application or driver using the address, and the connection protocol (e.g., TCP or UDP). This is particularly important to consider when changing an existing IP address or CIDR block as they cannot be updated via the Provider (comments can however), hence a change will force the destruction and recreation of entries.
 *
 * ## Example Usage
 *
 * ### Using CIDR Block
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const testProjectIpAccessList = new mongodbatlas.ProjectIpAccessList("test", {
 *     projectId: "<PROJECT-ID>",
 *     cidrBlock: "1.2.3.4/32",
 *     comment: "cidr block for tf acc testing",
 * });
 * const test = mongodbatlas.getProjectIpAccessListOutput({
 *     projectId: testProjectIpAccessList.projectId,
 *     cidrBlock: testProjectIpAccessList.cidrBlock,
 * });
 * ```
 *
 * ### Using IP Address
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const testProjectIpAccessList = new mongodbatlas.ProjectIpAccessList("test", {
 *     projectId: "<PROJECT-ID>",
 *     ipAddress: "2.3.4.5",
 *     comment: "ip address for tf acc testing",
 * });
 * const test = mongodbatlas.getProjectIpAccessListOutput({
 *     projectId: testProjectIpAccessList.projectId,
 *     ipAddress: testProjectIpAccessList.ipAddress,
 * });
 * ```
 *
 * ### Using an AWS Security Group
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const testNetworkContainer = new mongodbatlas.NetworkContainer("test", {
 *     projectId: "<PROJECT-ID>",
 *     atlasCidrBlock: "192.168.208.0/21",
 *     providerName: "AWS",
 *     regionName: "US_EAST_1",
 * });
 * const testNetworkPeering = new mongodbatlas.NetworkPeering("test", {
 *     projectId: "<PROJECT-ID>",
 *     containerId: testNetworkContainer.containerId,
 *     accepterRegionName: "us-east-1",
 *     providerName: "AWS",
 *     routeTableCidrBlock: "172.31.0.0/16",
 *     vpcId: "vpc-0d93d6f69f1578bd8",
 *     awsAccountId: "232589400519",
 * });
 * const testProjectIpAccessList = new mongodbatlas.ProjectIpAccessList("test", {
 *     projectId: "<PROJECT-ID>",
 *     awsSecurityGroup: "sg-0026348ec11780bd1",
 *     comment: "TestAcc for awsSecurityGroup",
 * }, {
 *     dependsOn: [testNetworkPeering],
 * });
 * const test = mongodbatlas.getProjectIpAccessListOutput({
 *     projectId: testProjectIpAccessList.projectId,
 *     awsSecurityGroup: testProjectIpAccessList.awsSecurityGroup,
 * });
 * ```
 *
 * > **IMPORTANT:** In order to use AWS Security Group(s) VPC Peering must be enabled like in the above example.
 */
function getProjectIpAccessListOutput(args, opts) {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("mongodbatlas:index/getProjectIpAccessList:getProjectIpAccessList", {
        "awsSecurityGroup": args.awsSecurityGroup,
        "cidrBlock": args.cidrBlock,
        "ipAddress": args.ipAddress,
        "projectId": args.projectId,
    }, opts);
}
exports.getProjectIpAccessListOutput = getProjectIpAccessListOutput;
//# sourceMappingURL=getProjectIpAccessList.js.map