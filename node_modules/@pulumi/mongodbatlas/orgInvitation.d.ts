import * as pulumi from "@pulumi/pulumi";
/**
 * ## Example Usage
 *
 * ### S
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test0 = new mongodbatlas.OrgInvitation("test0", {
 *     username: "test0-acc-username",
 *     orgId: "<ORG_ID>",
 *     roles: ["ORG_OWNER"],
 * });
 * ```
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test0 = new mongodbatlas.OrgInvitation("test0", {
 *     username: "test0-acc-username",
 *     orgId: "<ORG_ID>",
 *     roles: [
 *         "ORG_MEMBER",
 *         "ORG_BILLING_ADMIN",
 *     ],
 * });
 * ```
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test1 = new mongodbatlas.OrgInvitation("test1", {
 *     username: "test1-acc-username",
 *     orgId: "<ORG_ID>",
 *     teamsIds: [
 *         "<TEAM-0-ID>",
 *         "<TEAM-1-ID>",
 *     ],
 *     roles: ["ORG_MEMBER"],
 * });
 * ```
 *
 * ## Import
 *
 * ~> __IMPORTANT:__
 * An organization invitation can __not__ be imported once it has been accepted.
 *
 * Import a user's invitation to an organization by separating the `org_id` and the `username` with a hyphen:
 *
 * ```sh
 * $ pulumi import mongodbatlas:index/orgInvitation:OrgInvitation my_user 1112222b3bf99403840e8934-my_user@mongodb.com
 * ```
 */
export declare class OrgInvitation extends pulumi.CustomResource {
    /**
     * Get an existing OrgInvitation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OrgInvitationState, opts?: pulumi.CustomResourceOptions): OrgInvitation;
    /**
     * Returns true if the given object is an instance of OrgInvitation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is OrgInvitation;
    /**
     * Timestamp in ISO 8601 date and time format in UTC when Atlas sent the invitation.
     */
    readonly createdAt: pulumi.Output<string>;
    /**
     * Timestamp in ISO 8601 date and time format in UTC when the invitation expires. Users have 30 days to accept an invitation.
     */
    readonly expiresAt: pulumi.Output<string>;
    /**
     * Unique 24-hexadecimal digit string that identifies the invitation in Atlas.
     */
    readonly invitationId: pulumi.Output<string>;
    /**
     * Atlas user who invited `username` to the organization.
     */
    readonly inviterUsername: pulumi.Output<string>;
    /**
     * Unique 24-hexadecimal digit string that identifies the organization to which you want to invite a user.
     */
    readonly orgId: pulumi.Output<string>;
    /**
     * Atlas roles to assign to the invited user. If the user accepts the invitation, Atlas assigns these roles to them. The [MongoDB Documentation](https://www.mongodb.com/docs/atlas/reference/user-roles/#organization-roles) describes the roles a user can have.
     */
    readonly roles: pulumi.Output<string[]>;
    /**
     * An array of unique 24-hexadecimal digit strings that identify the teams that the user was invited to join.
     */
    readonly teamsIds: pulumi.Output<string[]>;
    /**
     * Email address of the invited user. This is the address to which Atlas sends the invite. If the user accepts the invitation, they log in to Atlas with this username.
     */
    readonly username: pulumi.Output<string>;
    /**
     * Create a OrgInvitation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OrgInvitationArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering OrgInvitation resources.
 */
export interface OrgInvitationState {
    /**
     * Timestamp in ISO 8601 date and time format in UTC when Atlas sent the invitation.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Timestamp in ISO 8601 date and time format in UTC when the invitation expires. Users have 30 days to accept an invitation.
     */
    expiresAt?: pulumi.Input<string>;
    /**
     * Unique 24-hexadecimal digit string that identifies the invitation in Atlas.
     */
    invitationId?: pulumi.Input<string>;
    /**
     * Atlas user who invited `username` to the organization.
     */
    inviterUsername?: pulumi.Input<string>;
    /**
     * Unique 24-hexadecimal digit string that identifies the organization to which you want to invite a user.
     */
    orgId?: pulumi.Input<string>;
    /**
     * Atlas roles to assign to the invited user. If the user accepts the invitation, Atlas assigns these roles to them. The [MongoDB Documentation](https://www.mongodb.com/docs/atlas/reference/user-roles/#organization-roles) describes the roles a user can have.
     */
    roles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * An array of unique 24-hexadecimal digit strings that identify the teams that the user was invited to join.
     */
    teamsIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Email address of the invited user. This is the address to which Atlas sends the invite. If the user accepts the invitation, they log in to Atlas with this username.
     */
    username?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a OrgInvitation resource.
 */
export interface OrgInvitationArgs {
    /**
     * Unique 24-hexadecimal digit string that identifies the organization to which you want to invite a user.
     */
    orgId: pulumi.Input<string>;
    /**
     * Atlas roles to assign to the invited user. If the user accepts the invitation, Atlas assigns these roles to them. The [MongoDB Documentation](https://www.mongodb.com/docs/atlas/reference/user-roles/#organization-roles) describes the roles a user can have.
     */
    roles: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * An array of unique 24-hexadecimal digit strings that identify the teams that the user was invited to join.
     */
    teamsIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Email address of the invited user. This is the address to which Atlas sends the invite. If the user accepts the invitation, they log in to Atlas with this username.
     */
    username: pulumi.Input<string>;
}
