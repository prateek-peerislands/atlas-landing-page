"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.StreamProcessor = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * ## # Resource: mongodbatlas.StreamProcessor
 *
 * `mongodbatlas.StreamProcessor` provides a Stream Processor resource. The resource lets you create, delete, import, start and stop a stream processor in a stream instance.
 *
 * **NOTE**: When updating an Atlas Stream Processor, the following behavior applies:
 * 1. If the processor is in a `STARTED` state, it will automatically be stopped before the update is applied
 * 2. The update will be performed while the processor is in `STOPPED` state
 * 3. If the processor was originally in `STARTED` state, it will be restarted after the update
 *
 * ## Example Usage
 *
 * ## Import
 *
 * Stream Processor resource can be imported using the Project ID, Stream Instance name and Stream Processor name, in the format `INSTANCE_NAME-PROJECT_ID-PROCESSOR_NAME`, e.g.
 *
 * For more information see: [MongoDB Atlas API - Stream Processor](https://www.mongodb.com/docs/api/doc/atlas-admin-api-v2/operation/operation-createstreamprocessor) Documentation.
 */
class StreamProcessor extends pulumi.CustomResource {
    /**
     * Get an existing StreamProcessor resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new StreamProcessor(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of StreamProcessor.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StreamProcessor.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["instanceName"] = state ? state.instanceName : undefined;
            resourceInputs["options"] = state ? state.options : undefined;
            resourceInputs["pipeline"] = state ? state.pipeline : undefined;
            resourceInputs["processorName"] = state ? state.processorName : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["stats"] = state ? state.stats : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.instanceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceName'");
            }
            if ((!args || args.pipeline === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pipeline'");
            }
            if ((!args || args.processorName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'processorName'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["instanceName"] = args ? args.instanceName : undefined;
            resourceInputs["options"] = args ? args.options : undefined;
            resourceInputs["pipeline"] = args ? args.pipeline : undefined;
            resourceInputs["processorName"] = args ? args.processorName : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
            resourceInputs["stats"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StreamProcessor.__pulumiType, name, resourceInputs, opts);
    }
}
exports.StreamProcessor = StreamProcessor;
/** @internal */
StreamProcessor.__pulumiType = 'mongodbatlas:index/streamProcessor:StreamProcessor';
//# sourceMappingURL=streamProcessor.js.map