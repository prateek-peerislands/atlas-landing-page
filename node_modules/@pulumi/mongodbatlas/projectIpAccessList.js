"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProjectIpAccessList = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * ## # Resource: mongodbatlas.ProjectIpAccessList
 *
 * `mongodbatlas.ProjectIpAccessList` provides an IP Access List entry resource. The access list grants access from IPs, CIDRs or AWS Security Groups (if VPC Peering is enabled) to clusters within the Project.
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
 *
 * > **IMPORTANT:**
 * When you remove an entry from the access list, existing connections from the removed address(es) may remain open for a variable amount of time. How much time passes before Atlas closes the connection depends on several factors, including how the connection was established, the particular behavior of the application or driver using the address, and the connection protocol (e.g., TCP or UDP). This is particularly important to consider when changing an existing IP address or CIDR block as they cannot be updated via the Provider (comments can however), hence a change will force the destruction and recreation of entries.
 *
 * ## Example Usage
 *
 * ### Using CIDR Block
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = new mongodbatlas.ProjectIpAccessList("test", {
 *     projectId: "<PROJECT-ID>",
 *     cidrBlock: "1.2.3.4/32",
 *     comment: "cidr block for tf acc testing",
 * });
 * ```
 *
 * ### Using IP Address
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = new mongodbatlas.ProjectIpAccessList("test", {
 *     projectId: "<PROJECT-ID>",
 *     ipAddress: "2.3.4.5",
 *     comment: "ip address for tf acc testing",
 * });
 * ```
 *
 * ### Using an AWS Security Group
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = new mongodbatlas.NetworkContainer("test", {
 *     projectId: "<PROJECT-ID>",
 *     atlasCidrBlock: "192.168.208.0/21",
 *     providerName: "AWS",
 *     regionName: "US_EAST_1",
 * });
 * const testNetworkPeering = new mongodbatlas.NetworkPeering("test", {
 *     projectId: "<PROJECT-ID>",
 *     containerId: test.containerId,
 *     accepterRegionName: "us-east-1",
 *     providerName: "AWS",
 *     routeTableCidrBlock: "172.31.0.0/16",
 *     vpcId: "vpc-0d93d6f69f1578bd8",
 *     awsAccountId: "232589400519",
 * });
 * const testProjectIpAccessList = new mongodbatlas.ProjectIpAccessList("test", {
 *     projectId: "<PROJECT-ID>",
 *     awsSecurityGroup: "sg-0026348ec11780bd1",
 *     comment: "TestAcc for awsSecurityGroup",
 * }, {
 *     dependsOn: [testNetworkPeering],
 * });
 * ```
 *
 * > **IMPORTANT:** In order to use AWS Security Group(s) VPC Peering must be enabled like above example.
 *
 * ## Import
 *
 * IP Access List entries can be imported using the `project_id` and `cidr_block` or `ip_address`, e.g.
 *
 * ```sh
 * $ pulumi import mongodbatlas:index/projectIpAccessList:ProjectIpAccessList test 5d0f1f74cf09a29120e123cd-10.242.88.0/21
 * ```
 * For more information see: [MongoDB Atlas API Reference.](https://docs.atlas.mongodb.com/reference/api/access-lists/)
 */
class ProjectIpAccessList extends pulumi.CustomResource {
    /**
     * Get an existing ProjectIpAccessList resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ProjectIpAccessList(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ProjectIpAccessList.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProjectIpAccessList.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["awsSecurityGroup"] = state ? state.awsSecurityGroup : undefined;
            resourceInputs["cidrBlock"] = state ? state.cidrBlock : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["ipAddress"] = state ? state.ipAddress : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["awsSecurityGroup"] = args ? args.awsSecurityGroup : undefined;
            resourceInputs["cidrBlock"] = args ? args.cidrBlock : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["ipAddress"] = args ? args.ipAddress : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ProjectIpAccessList.__pulumiType, name, resourceInputs, opts);
    }
}
exports.ProjectIpAccessList = ProjectIpAccessList;
/** @internal */
ProjectIpAccessList.__pulumiType = 'mongodbatlas:index/projectIpAccessList:ProjectIpAccessList';
//# sourceMappingURL=projectIpAccessList.js.map