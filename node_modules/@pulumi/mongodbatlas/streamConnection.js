"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.StreamConnection = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * ## # Resource: mongodbatlas.StreamConnection
 *
 * `mongodbatlas.StreamConnection` provides a Stream Connection resource. The resource lets you create, edit, and delete stream instance connections.
 *
 * > **IMPORTANT:** All arguments including the Kafka authentication password will be stored in the raw state as plaintext. Read more about sensitive data in state.
 *
 * ## Example Usage
 *
 * ### Example Cluster Connection
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = new mongodbatlas.StreamConnection("test", {
 *     projectId: projectId,
 *     instanceName: "InstanceName",
 *     connectionName: "ConnectionName",
 *     type: "Cluster",
 *     clusterName: "Cluster0",
 * });
 * ```
 *
 * ### Example Cross Project Cluster Connection
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = new mongodbatlas.StreamConnection("test", {
 *     projectId: projectId,
 *     instanceName: "InstanceName",
 *     connectionName: "ConnectionName",
 *     type: "Cluster",
 *     clusterName: "OtherCluster",
 *     clusterProjectId: otherProjectId,
 * });
 * ```
 *
 * ### Example Kafka SASL Plaintext Connection
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = new mongodbatlas.StreamConnection("test", {
 *     projectId: projectId,
 *     instanceName: "NewInstance",
 *     connectionName: "KafkaConnection",
 *     type: "Kafka",
 *     authentication: {
 *         mechanism: "SCRAM-256",
 *         username: "user",
 *         password: "somepassword",
 *     },
 *     security: {
 *         protocol: "SASL_PLAINTEXT",
 *     },
 *     config: {
 *         "auto.offset.reset": "latest",
 *     },
 *     bootstrapServers: "localhost:9091,localhost:9092",
 * });
 * ```
 *
 * ### Example Https Connection
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const example_https = new mongodbatlas.StreamConnection("example-https", {
 *     projectId: projectId,
 *     instanceName: example.instanceName,
 *     connectionName: "https_connection_tf_new",
 *     type: "Https",
 *     url: "https://example.com",
 *     headers: {
 *         key1: "value1",
 *         key2: "value2",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * You can import a stream connection resource using the instance name, project ID, and connection name. The format must be `INSTANCE_NAME-PROJECT_ID-CONNECTION_NAME`. For example:
 *
 * ```sh
 * $ pulumi import mongodbatlas:index/streamConnection:StreamConnection test "DefaultInstance-12251446ae5f3f6ec7968b13-NewConnection"
 * ```
 * To learn more, see: [MongoDB Atlas API - Stream Connection](https://www.mongodb.com/docs/atlas/reference/api-resources-spec/#tag/Streams/operation/createStreamConnection) Documentation.
 * The Terraform Provider Examples Section also contains details on the overall support for Atlas Streams Processing in Terraform.
 */
class StreamConnection extends pulumi.CustomResource {
    /**
     * Get an existing StreamConnection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new StreamConnection(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of StreamConnection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StreamConnection.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["authentication"] = state ? state.authentication : undefined;
            resourceInputs["aws"] = state ? state.aws : undefined;
            resourceInputs["bootstrapServers"] = state ? state.bootstrapServers : undefined;
            resourceInputs["clusterName"] = state ? state.clusterName : undefined;
            resourceInputs["clusterProjectId"] = state ? state.clusterProjectId : undefined;
            resourceInputs["config"] = state ? state.config : undefined;
            resourceInputs["connectionName"] = state ? state.connectionName : undefined;
            resourceInputs["dbRoleToExecute"] = state ? state.dbRoleToExecute : undefined;
            resourceInputs["headers"] = state ? state.headers : undefined;
            resourceInputs["instanceName"] = state ? state.instanceName : undefined;
            resourceInputs["networking"] = state ? state.networking : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["security"] = state ? state.security : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.connectionName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connectionName'");
            }
            if ((!args || args.instanceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceName'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["authentication"] = args ? args.authentication : undefined;
            resourceInputs["aws"] = args ? args.aws : undefined;
            resourceInputs["bootstrapServers"] = args ? args.bootstrapServers : undefined;
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["clusterProjectId"] = args ? args.clusterProjectId : undefined;
            resourceInputs["config"] = args ? args.config : undefined;
            resourceInputs["connectionName"] = args ? args.connectionName : undefined;
            resourceInputs["dbRoleToExecute"] = args ? args.dbRoleToExecute : undefined;
            resourceInputs["headers"] = args ? args.headers : undefined;
            resourceInputs["instanceName"] = args ? args.instanceName : undefined;
            resourceInputs["networking"] = args ? args.networking : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["security"] = args ? args.security : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["url"] = args ? args.url : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StreamConnection.__pulumiType, name, resourceInputs, opts);
    }
}
exports.StreamConnection = StreamConnection;
/** @internal */
StreamConnection.__pulumiType = 'mongodbatlas:index/streamConnection:StreamConnection';
//# sourceMappingURL=streamConnection.js.map