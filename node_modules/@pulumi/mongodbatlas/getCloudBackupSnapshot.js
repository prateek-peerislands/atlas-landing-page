"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCloudBackupSnapshotOutput = exports.getCloudBackupSnapshot = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * ## # Data Source: mongodbatlas.CloudBackupSnapshot
 *
 * `mongodbatlas.CloudBackupSnapshot` provides an Cloud Backup Snapshot datasource. Atlas Cloud Backup Snapshots provide localized backup storage using the native snapshot functionality of the cluster’s cloud service.
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const testCloudBackupSnapshot = new mongodbatlas.CloudBackupSnapshot("test", {
 *     projectId: "5d0f1f73cf09a29120e173cf",
 *     clusterName: "MyClusterTest",
 *     description: "SomeDescription",
 *     retentionInDays: 1,
 * });
 * const test = mongodbatlas.getCloudBackupSnapshotOutput({
 *     snapshotId: "5d1285acd5ec13b6c2d1726a",
 *     projectId: testCloudBackupSnapshot.projectId,
 *     clusterName: testCloudBackupSnapshot.clusterName,
 * });
 * ```
 */
function getCloudBackupSnapshot(args, opts) {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("mongodbatlas:index/getCloudBackupSnapshot:getCloudBackupSnapshot", {
        "clusterName": args.clusterName,
        "projectId": args.projectId,
        "snapshotId": args.snapshotId,
    }, opts);
}
exports.getCloudBackupSnapshot = getCloudBackupSnapshot;
/**
 * ## # Data Source: mongodbatlas.CloudBackupSnapshot
 *
 * `mongodbatlas.CloudBackupSnapshot` provides an Cloud Backup Snapshot datasource. Atlas Cloud Backup Snapshots provide localized backup storage using the native snapshot functionality of the cluster’s cloud service.
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const testCloudBackupSnapshot = new mongodbatlas.CloudBackupSnapshot("test", {
 *     projectId: "5d0f1f73cf09a29120e173cf",
 *     clusterName: "MyClusterTest",
 *     description: "SomeDescription",
 *     retentionInDays: 1,
 * });
 * const test = mongodbatlas.getCloudBackupSnapshotOutput({
 *     snapshotId: "5d1285acd5ec13b6c2d1726a",
 *     projectId: testCloudBackupSnapshot.projectId,
 *     clusterName: testCloudBackupSnapshot.clusterName,
 * });
 * ```
 */
function getCloudBackupSnapshotOutput(args, opts) {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("mongodbatlas:index/getCloudBackupSnapshot:getCloudBackupSnapshot", {
        "clusterName": args.clusterName,
        "projectId": args.projectId,
        "snapshotId": args.snapshotId,
    }, opts);
}
exports.getCloudBackupSnapshotOutput = getCloudBackupSnapshotOutput;
//# sourceMappingURL=getCloudBackupSnapshot.js.map