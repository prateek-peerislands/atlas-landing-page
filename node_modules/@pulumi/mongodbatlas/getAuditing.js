"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAuditingOutput = exports.getAuditing = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * ## # Data Source: mongodbatlas.Auditing
 *
 * `mongodbatlas.Auditing` describes a Auditing.
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const testAuditing = new mongodbatlas.Auditing("test", {
 *     projectId: "<project-id>",
 *     auditFilter: "{ 'atype': 'authenticate', 'param': {   'user': 'auditAdmin',   'db': 'admin',   'mechanism': 'SCRAM-SHA-1' }}",
 *     auditAuthorizationSuccess: false,
 *     enabled: true,
 * });
 * const test = mongodbatlas.getAuditingOutput({
 *     projectId: testAuditing.id,
 * });
 * ```
 */
function getAuditing(args, opts) {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("mongodbatlas:index/getAuditing:getAuditing", {
        "projectId": args.projectId,
    }, opts);
}
exports.getAuditing = getAuditing;
/**
 * ## # Data Source: mongodbatlas.Auditing
 *
 * `mongodbatlas.Auditing` describes a Auditing.
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const testAuditing = new mongodbatlas.Auditing("test", {
 *     projectId: "<project-id>",
 *     auditFilter: "{ 'atype': 'authenticate', 'param': {   'user': 'auditAdmin',   'db': 'admin',   'mechanism': 'SCRAM-SHA-1' }}",
 *     auditAuthorizationSuccess: false,
 *     enabled: true,
 * });
 * const test = mongodbatlas.getAuditingOutput({
 *     projectId: testAuditing.id,
 * });
 * ```
 */
function getAuditingOutput(args, opts) {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("mongodbatlas:index/getAuditing:getAuditing", {
        "projectId": args.projectId,
    }, opts);
}
exports.getAuditingOutput = getAuditingOutput;
//# sourceMappingURL=getAuditing.js.map