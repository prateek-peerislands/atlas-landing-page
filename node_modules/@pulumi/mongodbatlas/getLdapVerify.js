"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.getLdapVerifyOutput = exports.getLdapVerify = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * ## # Data Source: mongodbatlas.LdapVerify
 *
 * `mongodbatlas.LdapVerify` describes a LDAP Verify.
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const testProject = new mongodbatlas.Project("test", {
 *     name: "NAME OF THE PROJECT",
 *     orgId: "ORG ID",
 * });
 * const testAdvancedCluster = new mongodbatlas.AdvancedCluster("test", {
 *     projectId: testProject.id,
 *     name: "ClusterName",
 *     clusterType: "REPLICASET",
 *     backupEnabled: true,
 *     replicationSpecs: [{
 *         regionConfigs: [{
 *             priority: 7,
 *             providerName: "AWS",
 *             regionName: "US_EAST_1",
 *             electableSpecs: {
 *                 instanceSize: "M10",
 *                 nodeCount: 3,
 *             },
 *         }],
 *     }],
 * });
 * const testLdapVerify = new mongodbatlas.LdapVerify("test", {
 *     projectId: testProject.id,
 *     hostname: "HOSTNAME",
 *     port: 636,
 *     bindUsername: "USERNAME",
 *     bindPassword: "PASSWORD",
 * }, {
 *     dependsOn: [testAdvancedCluster],
 * });
 * const test = mongodbatlas.getLdapVerifyOutput({
 *     projectId: testLdapVerify.projectId,
 *     requestId: testLdapVerify.requestId,
 * });
 * ```
 */
function getLdapVerify(args, opts) {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("mongodbatlas:index/getLdapVerify:getLdapVerify", {
        "projectId": args.projectId,
        "requestId": args.requestId,
    }, opts);
}
exports.getLdapVerify = getLdapVerify;
/**
 * ## # Data Source: mongodbatlas.LdapVerify
 *
 * `mongodbatlas.LdapVerify` describes a LDAP Verify.
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const testProject = new mongodbatlas.Project("test", {
 *     name: "NAME OF THE PROJECT",
 *     orgId: "ORG ID",
 * });
 * const testAdvancedCluster = new mongodbatlas.AdvancedCluster("test", {
 *     projectId: testProject.id,
 *     name: "ClusterName",
 *     clusterType: "REPLICASET",
 *     backupEnabled: true,
 *     replicationSpecs: [{
 *         regionConfigs: [{
 *             priority: 7,
 *             providerName: "AWS",
 *             regionName: "US_EAST_1",
 *             electableSpecs: {
 *                 instanceSize: "M10",
 *                 nodeCount: 3,
 *             },
 *         }],
 *     }],
 * });
 * const testLdapVerify = new mongodbatlas.LdapVerify("test", {
 *     projectId: testProject.id,
 *     hostname: "HOSTNAME",
 *     port: 636,
 *     bindUsername: "USERNAME",
 *     bindPassword: "PASSWORD",
 * }, {
 *     dependsOn: [testAdvancedCluster],
 * });
 * const test = mongodbatlas.getLdapVerifyOutput({
 *     projectId: testLdapVerify.projectId,
 *     requestId: testLdapVerify.requestId,
 * });
 * ```
 */
function getLdapVerifyOutput(args, opts) {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("mongodbatlas:index/getLdapVerify:getLdapVerify", {
        "projectId": args.projectId,
        "requestId": args.requestId,
    }, opts);
}
exports.getLdapVerifyOutput = getLdapVerifyOutput;
//# sourceMappingURL=getLdapVerify.js.map