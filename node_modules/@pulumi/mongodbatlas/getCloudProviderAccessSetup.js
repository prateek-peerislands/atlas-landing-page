"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCloudProviderAccessSetupOutput = exports.getCloudProviderAccessSetup = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * ## # Data Source: mongodbatlas.CloudProviderAccessSetup
 *
 * `mongodbatlas.CloudProviderAccessSetup` allows you to get a single role for a provider access role setup, currently only AWS and Azure are supported.
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
 *
 * ## Example Usage
 *
 * ### With AWS
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const testRole = new mongodbatlas.CloudProviderAccessSetup("test_role", {
 *     projectId: "64259ee860c43338194b0f8e",
 *     providerName: "AWS",
 * });
 * const singleSetup = mongodbatlas.getCloudProviderAccessSetupOutput({
 *     projectId: testRole.projectId,
 *     providerName: testRole.providerName,
 *     roleId: testRole.roleId,
 * });
 * ```
 *
 * ### With AZURE
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const testRole = new mongodbatlas.CloudProviderAccessSetup("test_role", {
 *     projectId: "64259ee860c43338194b0f8e",
 *     providerName: "AZURE",
 *     azureConfigs: [{
 *         atlasAzureAppId: "9f2deb0d-be22-4524-a403-df531868bac0",
 *         servicePrincipalId: "22f1d2a6-d0e9-482a-83a4-b8dd7dddc2c1",
 *         tenantId: "91402384-d71e-22f5-22dd-759e272cdc1c",
 *     }],
 * });
 * const singleSetup = mongodbatlas.getCloudProviderAccessSetupOutput({
 *     projectId: testRole.projectId,
 *     providerName: testRole.providerName,
 *     roleId: testRole.roleId,
 * });
 * ```
 */
function getCloudProviderAccessSetup(args, opts) {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("mongodbatlas:index/getCloudProviderAccessSetup:getCloudProviderAccessSetup", {
        "azureConfigs": args.azureConfigs,
        "projectId": args.projectId,
        "providerName": args.providerName,
        "roleId": args.roleId,
    }, opts);
}
exports.getCloudProviderAccessSetup = getCloudProviderAccessSetup;
/**
 * ## # Data Source: mongodbatlas.CloudProviderAccessSetup
 *
 * `mongodbatlas.CloudProviderAccessSetup` allows you to get a single role for a provider access role setup, currently only AWS and Azure are supported.
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
 *
 * ## Example Usage
 *
 * ### With AWS
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const testRole = new mongodbatlas.CloudProviderAccessSetup("test_role", {
 *     projectId: "64259ee860c43338194b0f8e",
 *     providerName: "AWS",
 * });
 * const singleSetup = mongodbatlas.getCloudProviderAccessSetupOutput({
 *     projectId: testRole.projectId,
 *     providerName: testRole.providerName,
 *     roleId: testRole.roleId,
 * });
 * ```
 *
 * ### With AZURE
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const testRole = new mongodbatlas.CloudProviderAccessSetup("test_role", {
 *     projectId: "64259ee860c43338194b0f8e",
 *     providerName: "AZURE",
 *     azureConfigs: [{
 *         atlasAzureAppId: "9f2deb0d-be22-4524-a403-df531868bac0",
 *         servicePrincipalId: "22f1d2a6-d0e9-482a-83a4-b8dd7dddc2c1",
 *         tenantId: "91402384-d71e-22f5-22dd-759e272cdc1c",
 *     }],
 * });
 * const singleSetup = mongodbatlas.getCloudProviderAccessSetupOutput({
 *     projectId: testRole.projectId,
 *     providerName: testRole.providerName,
 *     roleId: testRole.roleId,
 * });
 * ```
 */
function getCloudProviderAccessSetupOutput(args, opts) {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("mongodbatlas:index/getCloudProviderAccessSetup:getCloudProviderAccessSetup", {
        "azureConfigs": args.azureConfigs,
        "projectId": args.projectId,
        "providerName": args.providerName,
        "roleId": args.roleId,
    }, opts);
}
exports.getCloudProviderAccessSetupOutput = getCloudProviderAccessSetupOutput;
//# sourceMappingURL=getCloudProviderAccessSetup.js.map