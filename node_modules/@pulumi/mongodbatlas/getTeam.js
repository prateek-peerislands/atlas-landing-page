"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTeamOutput = exports.getTeam = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * ## # Data Source: mongodbatlas.Team
 *
 * `mongodbatlas.Team` describes a Team. The resource requires your Organization ID, Project ID and Team ID.
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const testTeam = new mongodbatlas.Team("test", {
 *     orgId: "<ORGANIZATION-ID>",
 *     name: "myNewTeam",
 *     usernames: [
 *         "user1",
 *         "user2",
 *         "user3",
 *     ],
 * });
 * const test = mongodbatlas.getTeamOutput({
 *     orgId: testTeam.orgId,
 *     teamId: testTeam.teamId,
 * });
 * ```
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = new mongodbatlas.Team("test", {
 *     orgId: "<ORGANIZATION-ID>",
 *     name: "myNewTeam",
 *     usernames: [
 *         "user1",
 *         "user2",
 *         "user3",
 *     ],
 * });
 * const test2 = mongodbatlas.getTeamOutput({
 *     orgId: test.orgId,
 *     name: test.name,
 * });
 * ```
 */
function getTeam(args, opts) {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("mongodbatlas:index/getTeam:getTeam", {
        "name": args.name,
        "orgId": args.orgId,
        "teamId": args.teamId,
    }, opts);
}
exports.getTeam = getTeam;
/**
 * ## # Data Source: mongodbatlas.Team
 *
 * `mongodbatlas.Team` describes a Team. The resource requires your Organization ID, Project ID and Team ID.
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const testTeam = new mongodbatlas.Team("test", {
 *     orgId: "<ORGANIZATION-ID>",
 *     name: "myNewTeam",
 *     usernames: [
 *         "user1",
 *         "user2",
 *         "user3",
 *     ],
 * });
 * const test = mongodbatlas.getTeamOutput({
 *     orgId: testTeam.orgId,
 *     teamId: testTeam.teamId,
 * });
 * ```
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = new mongodbatlas.Team("test", {
 *     orgId: "<ORGANIZATION-ID>",
 *     name: "myNewTeam",
 *     usernames: [
 *         "user1",
 *         "user2",
 *         "user3",
 *     ],
 * });
 * const test2 = mongodbatlas.getTeamOutput({
 *     orgId: test.orgId,
 *     name: test.name,
 * });
 * ```
 */
function getTeamOutput(args, opts) {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("mongodbatlas:index/getTeam:getTeam", {
        "name": args.name,
        "orgId": args.orgId,
        "teamId": args.teamId,
    }, opts);
}
exports.getTeamOutput = getTeamOutput;
//# sourceMappingURL=getTeam.js.map