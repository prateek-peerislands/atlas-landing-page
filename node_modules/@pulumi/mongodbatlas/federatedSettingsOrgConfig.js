"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.FederatedSettingsOrgConfig = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * ## # Resource: mongodbatlas.FederatedSettingsOrgConfig
 *
 * `mongodbatlas.FederatedSettingsOrgConfig` provides an Federated Settings Identity Providers datasource. Atlas Cloud Federated Settings Identity Providers provides federated settings outputs for the configured Identity Providers.
 *
 * ## Example Usage
 *
 * > **IMPORTANT** You **MUST** import this resource before you can manage it with this provider.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const orgConnection = new mongodbatlas.FederatedSettingsOrgConfig("org_connection", {
 *     federationSettingsId: "627a9687f7f7f7f774de306f14",
 *     orgId: "627a9683ea7ff7f74de306f14",
 *     dataAccessIdentityProviderIds: ["64d613677e1ad50839cce4db"],
 *     domainRestrictionEnabled: false,
 *     domainAllowLists: ["mydomain.com"],
 *     postAuthRoleGrants: ["ORG_MEMBER"],
 *     identityProviderId: "0oaqyt9fc2ySTWnA0357",
 * });
 * const orgConfigsDs = mongodbatlas.getFederatedSettingsOrgConfigs({
 *     federationSettingsId: orgConnectionMongodbatlasFederatedSettingsOrgConfig.id,
 * });
 * ```
 *
 * ## Import
 *
 * FederatedSettingsOrgConfig must be imported using federation_settings_id-org_id, e.g.
 *
 * ```sh
 * $ pulumi import mongodbatlas:index/federatedSettingsOrgConfig:FederatedSettingsOrgConfig org_connection 627a9687f7f7f7f774de306f14-627a9683ea7ff7f74de306f14
 * ```
 * For more information see: [MongoDB Atlas API Reference.](https://www.mongodb.com/docs/atlas/reference/api/federation-configuration/)
 */
class FederatedSettingsOrgConfig extends pulumi.CustomResource {
    /**
     * Get an existing FederatedSettingsOrgConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new FederatedSettingsOrgConfig(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of FederatedSettingsOrgConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FederatedSettingsOrgConfig.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["dataAccessIdentityProviderIds"] = state ? state.dataAccessIdentityProviderIds : undefined;
            resourceInputs["domainAllowLists"] = state ? state.domainAllowLists : undefined;
            resourceInputs["domainRestrictionEnabled"] = state ? state.domainRestrictionEnabled : undefined;
            resourceInputs["federationSettingsId"] = state ? state.federationSettingsId : undefined;
            resourceInputs["identityProviderId"] = state ? state.identityProviderId : undefined;
            resourceInputs["orgId"] = state ? state.orgId : undefined;
            resourceInputs["postAuthRoleGrants"] = state ? state.postAuthRoleGrants : undefined;
            resourceInputs["userConflicts"] = state ? state.userConflicts : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.domainRestrictionEnabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domainRestrictionEnabled'");
            }
            if ((!args || args.federationSettingsId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'federationSettingsId'");
            }
            if ((!args || args.orgId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'orgId'");
            }
            resourceInputs["dataAccessIdentityProviderIds"] = args ? args.dataAccessIdentityProviderIds : undefined;
            resourceInputs["domainAllowLists"] = args ? args.domainAllowLists : undefined;
            resourceInputs["domainRestrictionEnabled"] = args ? args.domainRestrictionEnabled : undefined;
            resourceInputs["federationSettingsId"] = args ? args.federationSettingsId : undefined;
            resourceInputs["identityProviderId"] = args ? args.identityProviderId : undefined;
            resourceInputs["orgId"] = args ? args.orgId : undefined;
            resourceInputs["postAuthRoleGrants"] = args ? args.postAuthRoleGrants : undefined;
            resourceInputs["userConflicts"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FederatedSettingsOrgConfig.__pulumiType, name, resourceInputs, opts);
    }
}
exports.FederatedSettingsOrgConfig = FederatedSettingsOrgConfig;
/** @internal */
FederatedSettingsOrgConfig.__pulumiType = 'mongodbatlas:index/federatedSettingsOrgConfig:FederatedSettingsOrgConfig';
//# sourceMappingURL=federatedSettingsOrgConfig.js.map