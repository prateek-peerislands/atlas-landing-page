import * as pulumi from "@pulumi/pulumi";
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = new mongodbatlas.ApiKey("test", {
 *     description: "key-name",
 *     orgId: "<ORG_ID>",
 *     roleNames: ["ORG_READ_ONLY"],
 * });
 * ```
 *
 * ## ## Attributes Reference
 *
 * In addition to all arguments above, the following attributes are exported:
 *
 * * `apiKeyId` - Unique identifier for this Organization API key.
 *
 * ## Import
 *
 * API Keys must be imported using org ID, API Key ID e.g.
 *
 * ```sh
 * $ pulumi import mongodbatlas:index/apiKey:ApiKey test 5d09d6a59ccf6445652a444a-6576974933969669
 * ```
 * See [MongoDB Atlas API - API Key](https://www.mongodb.com/docs/atlas/reference/api-resources-spec/#tag/Programmatic-API-Keys/operation/createApiKey) Documentation for more information.
 */
export declare class ApiKey extends pulumi.CustomResource {
    /**
     * Get an existing ApiKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApiKeyState, opts?: pulumi.CustomResourceOptions): ApiKey;
    /**
     * Returns true if the given object is an instance of ApiKey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is ApiKey;
    readonly apiKeyId: pulumi.Output<string>;
    /**
     * Description of this Organization API key.
     */
    readonly description: pulumi.Output<string>;
    /**
     * Unique identifier for the organization whose API keys you want to retrieve. Use the /orgs endpoint to retrieve all organizations to which the authenticated user has access.
     */
    readonly orgId: pulumi.Output<string>;
    readonly privateKey: pulumi.Output<string>;
    readonly publicKey: pulumi.Output<string>;
    /**
     * Name of the role. This resource returns all the roles the user has in Atlas.
     * The following are valid roles:
     * * `ORG_OWNER`
     * * `ORG_GROUP_CREATOR`
     * * `ORG_BILLING_ADMIN`
     * * `ORG_READ_ONLY`
     * * `ORG_MEMBER`
     */
    readonly roleNames: pulumi.Output<string[]>;
    /**
     * Create a ApiKey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApiKeyArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering ApiKey resources.
 */
export interface ApiKeyState {
    apiKeyId?: pulumi.Input<string>;
    /**
     * Description of this Organization API key.
     */
    description?: pulumi.Input<string>;
    /**
     * Unique identifier for the organization whose API keys you want to retrieve. Use the /orgs endpoint to retrieve all organizations to which the authenticated user has access.
     */
    orgId?: pulumi.Input<string>;
    privateKey?: pulumi.Input<string>;
    publicKey?: pulumi.Input<string>;
    /**
     * Name of the role. This resource returns all the roles the user has in Atlas.
     * The following are valid roles:
     * * `ORG_OWNER`
     * * `ORG_GROUP_CREATOR`
     * * `ORG_BILLING_ADMIN`
     * * `ORG_READ_ONLY`
     * * `ORG_MEMBER`
     */
    roleNames?: pulumi.Input<pulumi.Input<string>[]>;
}
/**
 * The set of arguments for constructing a ApiKey resource.
 */
export interface ApiKeyArgs {
    /**
     * Description of this Organization API key.
     */
    description: pulumi.Input<string>;
    /**
     * Unique identifier for the organization whose API keys you want to retrieve. Use the /orgs endpoint to retrieve all organizations to which the authenticated user has access.
     */
    orgId: pulumi.Input<string>;
    /**
     * Name of the role. This resource returns all the roles the user has in Atlas.
     * The following are valid roles:
     * * `ORG_OWNER`
     * * `ORG_GROUP_CREATOR`
     * * `ORG_BILLING_ADMIN`
     * * `ORG_READ_ONLY`
     * * `ORG_MEMBER`
     */
    roleNames: pulumi.Input<pulumi.Input<string>[]>;
}
