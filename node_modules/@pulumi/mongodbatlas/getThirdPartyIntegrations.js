"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.getThirdPartyIntegrationsOutput = exports.getThirdPartyIntegrations = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * ## # Data Source: mongodbatlas.getThirdPartyIntegrations
 *
 * `mongodbatlas.getThirdPartyIntegrations` describes all Third-Party Integration Settings. This represents two Third-Party services `PAGER_DUTY` and `DATADOG`
 * applied across the project.
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const testPagerDuty = new mongodbatlas.ThirdPartyIntegration("test_pager_duty", {
 *     projectId: "<PROJECT-ID>",
 *     type: "PAGER_DUTY",
 *     serviceKey: "<PAGER-DUTY-SERVICE-KEY>",
 * });
 * const testDatadog = new mongodbatlas.ThirdPartyIntegration("test_datadog", {
 *     projectId: "<PROJECT-ID>",
 *     type: "DATADOG",
 *     apiKey: "<API-KEY>",
 *     region: "<REGION>",
 * });
 * const test = mongodbatlas.getThirdPartyIntegrationsOutput({
 *     projectId: testPagerDuty.projectId,
 * });
 * ```
 */
function getThirdPartyIntegrations(args, opts) {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("mongodbatlas:index/getThirdPartyIntegrations:getThirdPartyIntegrations", {
        "projectId": args.projectId,
    }, opts);
}
exports.getThirdPartyIntegrations = getThirdPartyIntegrations;
/**
 * ## # Data Source: mongodbatlas.getThirdPartyIntegrations
 *
 * `mongodbatlas.getThirdPartyIntegrations` describes all Third-Party Integration Settings. This represents two Third-Party services `PAGER_DUTY` and `DATADOG`
 * applied across the project.
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const testPagerDuty = new mongodbatlas.ThirdPartyIntegration("test_pager_duty", {
 *     projectId: "<PROJECT-ID>",
 *     type: "PAGER_DUTY",
 *     serviceKey: "<PAGER-DUTY-SERVICE-KEY>",
 * });
 * const testDatadog = new mongodbatlas.ThirdPartyIntegration("test_datadog", {
 *     projectId: "<PROJECT-ID>",
 *     type: "DATADOG",
 *     apiKey: "<API-KEY>",
 *     region: "<REGION>",
 * });
 * const test = mongodbatlas.getThirdPartyIntegrationsOutput({
 *     projectId: testPagerDuty.projectId,
 * });
 * ```
 */
function getThirdPartyIntegrationsOutput(args, opts) {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("mongodbatlas:index/getThirdPartyIntegrations:getThirdPartyIntegrations", {
        "projectId": args.projectId,
    }, opts);
}
exports.getThirdPartyIntegrationsOutput = getThirdPartyIntegrationsOutput;
//# sourceMappingURL=getThirdPartyIntegrations.js.map