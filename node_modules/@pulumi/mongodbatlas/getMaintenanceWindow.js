"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMaintenanceWindowOutput = exports.getMaintenanceWindow = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * ## # Data Source: mongodbatlas.MaintenanceWindow
 *
 * `mongodbatlas.MaintenanceWindow` provides a Maintenance Window entry datasource. Gets information regarding the configured maintenance window for a MongoDB Atlas project.
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
 *
 * ## Examples Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const testMaintenanceWindow = new mongodbatlas.MaintenanceWindow("test", {
 *     projectId: "<your-project-id>",
 *     dayOfWeek: 3,
 *     hourOfDay: 4,
 *     autoDeferOnceEnabled: true,
 * });
 * const test = mongodbatlas.getMaintenanceWindowOutput({
 *     projectId: testMaintenanceWindow.id,
 * });
 * ```
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const testMaintenanceWindow = new mongodbatlas.MaintenanceWindow("test", {
 *     projectId: "<your-project-id>",
 *     startAsap: true,
 * });
 * const test = mongodbatlas.getMaintenanceWindowOutput({
 *     projectId: testMaintenanceWindow.id,
 * });
 * ```
 */
function getMaintenanceWindow(args, opts) {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("mongodbatlas:index/getMaintenanceWindow:getMaintenanceWindow", {
        "projectId": args.projectId,
    }, opts);
}
exports.getMaintenanceWindow = getMaintenanceWindow;
/**
 * ## # Data Source: mongodbatlas.MaintenanceWindow
 *
 * `mongodbatlas.MaintenanceWindow` provides a Maintenance Window entry datasource. Gets information regarding the configured maintenance window for a MongoDB Atlas project.
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
 *
 * ## Examples Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const testMaintenanceWindow = new mongodbatlas.MaintenanceWindow("test", {
 *     projectId: "<your-project-id>",
 *     dayOfWeek: 3,
 *     hourOfDay: 4,
 *     autoDeferOnceEnabled: true,
 * });
 * const test = mongodbatlas.getMaintenanceWindowOutput({
 *     projectId: testMaintenanceWindow.id,
 * });
 * ```
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const testMaintenanceWindow = new mongodbatlas.MaintenanceWindow("test", {
 *     projectId: "<your-project-id>",
 *     startAsap: true,
 * });
 * const test = mongodbatlas.getMaintenanceWindowOutput({
 *     projectId: testMaintenanceWindow.id,
 * });
 * ```
 */
function getMaintenanceWindowOutput(args, opts) {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("mongodbatlas:index/getMaintenanceWindow:getMaintenanceWindow", {
        "projectId": args.projectId,
    }, opts);
}
exports.getMaintenanceWindowOutput = getMaintenanceWindowOutput;
//# sourceMappingURL=getMaintenanceWindow.js.map