"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.LdapConfiguration = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * ## # Resource: mongodbatlas.LdapConfiguration
 *
 * `mongodbatlas.LdapConfiguration` provides an LDAP Configuration resource. This allows an LDAP configuration for an Atlas project to be created and managed. This endpoint doesnâ€™t verify connectivity using the provided LDAP over TLS configuration details. To verify a configuration before saving it, use the resource to verify the LDAP configuration.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = new mongodbatlas.Project("test", {
 *     name: "NAME OF THE PROJECT",
 *     orgId: "ORG ID",
 * });
 * const testLdapConfiguration = new mongodbatlas.LdapConfiguration("test", {
 *     projectId: test.id,
 *     authenticationEnabled: true,
 *     hostname: "HOSTNAME",
 *     port: 636,
 *     bindUsername: "USERNAME",
 *     bindPassword: "PASSWORD",
 * });
 * ```
 *
 * ### LDAP With User To DN Mapping
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = new mongodbatlas.Project("test", {
 *     name: "NAME OF THE PROJECT",
 *     orgId: "ORG ID",
 * });
 * const testLdapConfiguration = new mongodbatlas.LdapConfiguration("test", {
 *     projectId: test.id,
 *     authenticationEnabled: true,
 *     hostname: "HOSTNAME",
 *     port: 636,
 *     bindUsername: "USERNAME",
 *     bindPassword: "PASSWORD",
 *     caCertificate: "CA CERTIFICATE",
 *     authzQueryTemplate: "{USER}?memberOf?base",
 *     userToDnMappings: [{
 *         match: "(.+)",
 *         ldapQuery: "DC=example,DC=com??sub?(userPrincipalName={0})",
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * LDAP Configuration must be imported using project ID, e.g.
 *
 * ```sh
 * $ pulumi import mongodbatlas:index/ldapConfiguration:LdapConfiguration test 5d09d6a59ccf6445652a444a
 * ```
 * For more information see: [MongoDB Atlas API Reference.](https://docs.atlas.mongodb.com/reference/api/ldaps-configuration-save)
 */
class LdapConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing LdapConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new LdapConfiguration(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of LdapConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LdapConfiguration.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["authenticationEnabled"] = state ? state.authenticationEnabled : undefined;
            resourceInputs["authorizationEnabled"] = state ? state.authorizationEnabled : undefined;
            resourceInputs["authzQueryTemplate"] = state ? state.authzQueryTemplate : undefined;
            resourceInputs["bindPassword"] = state ? state.bindPassword : undefined;
            resourceInputs["bindUsername"] = state ? state.bindUsername : undefined;
            resourceInputs["caCertificate"] = state ? state.caCertificate : undefined;
            resourceInputs["hostname"] = state ? state.hostname : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["userToDnMappings"] = state ? state.userToDnMappings : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.authenticationEnabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authenticationEnabled'");
            }
            if ((!args || args.bindPassword === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bindPassword'");
            }
            if ((!args || args.bindUsername === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bindUsername'");
            }
            if ((!args || args.hostname === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hostname'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["authenticationEnabled"] = args ? args.authenticationEnabled : undefined;
            resourceInputs["authorizationEnabled"] = args ? args.authorizationEnabled : undefined;
            resourceInputs["authzQueryTemplate"] = args ? args.authzQueryTemplate : undefined;
            resourceInputs["bindPassword"] = (args === null || args === void 0 ? void 0 : args.bindPassword) ? pulumi.secret(args.bindPassword) : undefined;
            resourceInputs["bindUsername"] = args ? args.bindUsername : undefined;
            resourceInputs["caCertificate"] = args ? args.caCertificate : undefined;
            resourceInputs["hostname"] = args ? args.hostname : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["userToDnMappings"] = args ? args.userToDnMappings : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["bindPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(LdapConfiguration.__pulumiType, name, resourceInputs, opts);
    }
}
exports.LdapConfiguration = LdapConfiguration;
/** @internal */
LdapConfiguration.__pulumiType = 'mongodbatlas:index/ldapConfiguration:LdapConfiguration';
//# sourceMappingURL=ldapConfiguration.js.map