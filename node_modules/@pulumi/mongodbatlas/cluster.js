"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Cluster = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * ## Example Usage
 *
 * ### Example AWS cluster
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const cluster_test = new mongodbatlas.Cluster("cluster-test", {
 *     projectId: "<YOUR-PROJECT-ID>",
 *     name: "cluster-test",
 *     clusterType: "REPLICASET",
 *     replicationSpecs: [{
 *         numShards: 1,
 *         regionsConfigs: [{
 *             regionName: "US_EAST_1",
 *             electableNodes: 3,
 *             priority: 7,
 *             readOnlyNodes: 0,
 *         }],
 *     }],
 *     cloudBackup: true,
 *     autoScalingDiskGbEnabled: true,
 *     mongoDbMajorVersion: "7.0",
 *     providerName: "AWS",
 *     providerInstanceSizeName: "M40",
 * });
 * ```
 *
 * ### Example Azure cluster.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = new mongodbatlas.Cluster("test", {
 *     projectId: "<YOUR-PROJECT-ID>",
 *     name: "test",
 *     clusterType: "REPLICASET",
 *     replicationSpecs: [{
 *         numShards: 1,
 *         regionsConfigs: [{
 *             regionName: "US_EAST",
 *             electableNodes: 3,
 *             priority: 7,
 *             readOnlyNodes: 0,
 *         }],
 *     }],
 *     cloudBackup: true,
 *     autoScalingDiskGbEnabled: true,
 *     mongoDbMajorVersion: "7.0",
 *     providerName: "AZURE",
 *     providerDiskTypeName: "P6",
 *     providerInstanceSizeName: "M30",
 * });
 * ```
 *
 * ### Example GCP cluster
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = new mongodbatlas.Cluster("test", {
 *     projectId: "<YOUR-PROJECT-ID>",
 *     name: "test",
 *     clusterType: "REPLICASET",
 *     replicationSpecs: [{
 *         numShards: 1,
 *         regionsConfigs: [{
 *             regionName: "EASTERN_US",
 *             electableNodes: 3,
 *             priority: 7,
 *             readOnlyNodes: 0,
 *         }],
 *     }],
 *     cloudBackup: true,
 *     autoScalingDiskGbEnabled: true,
 *     mongoDbMajorVersion: "7.0",
 *     providerName: "GCP",
 *     providerInstanceSizeName: "M30",
 * });
 * ```
 *
 * ### Example Multi Region cluster
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const cluster_test = new mongodbatlas.Cluster("cluster-test", {
 *     projectId: "<YOUR-PROJECT-ID>",
 *     name: "cluster-test-multi-region",
 *     numShards: 1,
 *     cloudBackup: true,
 *     clusterType: "REPLICASET",
 *     providerName: "AWS",
 *     providerInstanceSizeName: "M10",
 *     replicationSpecs: [{
 *         numShards: 1,
 *         regionsConfigs: [
 *             {
 *                 regionName: "US_EAST_1",
 *                 electableNodes: 3,
 *                 priority: 7,
 *                 readOnlyNodes: 0,
 *             },
 *             {
 *                 regionName: "US_EAST_2",
 *                 electableNodes: 2,
 *                 priority: 6,
 *                 readOnlyNodes: 0,
 *             },
 *             {
 *                 regionName: "US_WEST_1",
 *                 electableNodes: 2,
 *                 priority: 5,
 *                 readOnlyNodes: 2,
 *             },
 *         ],
 *     }],
 * });
 * ```
 *
 * ### Example Global cluster
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const cluster_test = new mongodbatlas.Cluster("cluster-test", {
 *     projectId: "<YOUR-PROJECT-ID>",
 *     name: "cluster-test-global",
 *     numShards: 1,
 *     cloudBackup: true,
 *     clusterType: "GEOSHARDED",
 *     providerName: "AWS",
 *     providerInstanceSizeName: "M30",
 *     replicationSpecs: [
 *         {
 *             zoneName: "Zone 1",
 *             numShards: 2,
 *             regionsConfigs: [{
 *                 regionName: "US_EAST_1",
 *                 electableNodes: 3,
 *                 priority: 7,
 *                 readOnlyNodes: 0,
 *             }],
 *         },
 *         {
 *             zoneName: "Zone 2",
 *             numShards: 2,
 *             regionsConfigs: [{
 *                 regionName: "EU_CENTRAL_1",
 *                 electableNodes: 3,
 *                 priority: 7,
 *                 readOnlyNodes: 0,
 *             }],
 *         },
 *     ],
 * });
 * ```
 * ### Example AWS Free Tier cluster
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const cluster_test = new mongodbatlas.Cluster("cluster-test", {
 *     projectId: "<YOUR-PROJECT-ID>",
 *     name: "cluster-test-global",
 *     providerName: "TENANT",
 *     backingProviderName: "AWS",
 *     providerRegionName: "US_EAST_1",
 *     providerInstanceSizeName: "M0",
 * });
 * ```
 * ### Example - Return a Connection String
 * Standard
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 *
 * export const standard = cluster_test.connectionStrings[0].standard;
 * ```
 * Standard srv
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 *
 * export const standardSrv = cluster_test.connectionStrings[0].standardSrv;
 * ```
 * Private with Network peering and Custom DNS AWS enabled
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 *
 * export = async () => {
 *     return {
 *         "private": cluster_test.connectionStrings[0]["private"],
 *     };
 * }
 * ```
 * Private srv with Network peering and Custom DNS AWS enabled
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 *
 * export const privateSrv = cluster_test.connectionStrings[0].privateSrv;
 * ```
 *
 * By endpointServiceId
 * ## Import
 *
 * Clusters can be imported using project ID and cluster name, in the format `PROJECTID-CLUSTERNAME`, e.g.
 *
 * ```sh
 * $ pulumi import mongodbatlas:index/cluster:Cluster my_cluster 1112222b3bf99403840e8934-Cluster0
 * ```
 * See detailed information for arguments and attributes: [MongoDB API Clusters](https://docs.atlas.mongodb.com/reference/api/clusters-create-one/)
 */
class Cluster extends pulumi.CustomResource {
    /**
     * Get an existing Cluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Cluster(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Cluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cluster.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["acceptDataRisksAndForceReplicaSetReconfig"] = state ? state.acceptDataRisksAndForceReplicaSetReconfig : undefined;
            resourceInputs["advancedConfiguration"] = state ? state.advancedConfiguration : undefined;
            resourceInputs["autoScalingComputeEnabled"] = state ? state.autoScalingComputeEnabled : undefined;
            resourceInputs["autoScalingComputeScaleDownEnabled"] = state ? state.autoScalingComputeScaleDownEnabled : undefined;
            resourceInputs["autoScalingDiskGbEnabled"] = state ? state.autoScalingDiskGbEnabled : undefined;
            resourceInputs["backingProviderName"] = state ? state.backingProviderName : undefined;
            resourceInputs["backupEnabled"] = state ? state.backupEnabled : undefined;
            resourceInputs["biConnectorConfig"] = state ? state.biConnectorConfig : undefined;
            resourceInputs["cloudBackup"] = state ? state.cloudBackup : undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["clusterType"] = state ? state.clusterType : undefined;
            resourceInputs["connectionStrings"] = state ? state.connectionStrings : undefined;
            resourceInputs["containerId"] = state ? state.containerId : undefined;
            resourceInputs["diskSizeGb"] = state ? state.diskSizeGb : undefined;
            resourceInputs["encryptionAtRestProvider"] = state ? state.encryptionAtRestProvider : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["mongoDbMajorVersion"] = state ? state.mongoDbMajorVersion : undefined;
            resourceInputs["mongoDbVersion"] = state ? state.mongoDbVersion : undefined;
            resourceInputs["mongoUri"] = state ? state.mongoUri : undefined;
            resourceInputs["mongoUriUpdated"] = state ? state.mongoUriUpdated : undefined;
            resourceInputs["mongoUriWithOptions"] = state ? state.mongoUriWithOptions : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["numShards"] = state ? state.numShards : undefined;
            resourceInputs["paused"] = state ? state.paused : undefined;
            resourceInputs["pinnedFcv"] = state ? state.pinnedFcv : undefined;
            resourceInputs["pitEnabled"] = state ? state.pitEnabled : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["providerAutoScalingComputeMaxInstanceSize"] = state ? state.providerAutoScalingComputeMaxInstanceSize : undefined;
            resourceInputs["providerAutoScalingComputeMinInstanceSize"] = state ? state.providerAutoScalingComputeMinInstanceSize : undefined;
            resourceInputs["providerDiskIops"] = state ? state.providerDiskIops : undefined;
            resourceInputs["providerDiskTypeName"] = state ? state.providerDiskTypeName : undefined;
            resourceInputs["providerEncryptEbsVolume"] = state ? state.providerEncryptEbsVolume : undefined;
            resourceInputs["providerEncryptEbsVolumeFlag"] = state ? state.providerEncryptEbsVolumeFlag : undefined;
            resourceInputs["providerInstanceSizeName"] = state ? state.providerInstanceSizeName : undefined;
            resourceInputs["providerName"] = state ? state.providerName : undefined;
            resourceInputs["providerRegionName"] = state ? state.providerRegionName : undefined;
            resourceInputs["providerVolumeType"] = state ? state.providerVolumeType : undefined;
            resourceInputs["redactClientLogData"] = state ? state.redactClientLogData : undefined;
            resourceInputs["replicationFactor"] = state ? state.replicationFactor : undefined;
            resourceInputs["replicationSpecs"] = state ? state.replicationSpecs : undefined;
            resourceInputs["retainBackupsEnabled"] = state ? state.retainBackupsEnabled : undefined;
            resourceInputs["snapshotBackupPolicies"] = state ? state.snapshotBackupPolicies : undefined;
            resourceInputs["srvAddress"] = state ? state.srvAddress : undefined;
            resourceInputs["stateName"] = state ? state.stateName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["terminationProtectionEnabled"] = state ? state.terminationProtectionEnabled : undefined;
            resourceInputs["versionReleaseSystem"] = state ? state.versionReleaseSystem : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.providerInstanceSizeName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'providerInstanceSizeName'");
            }
            if ((!args || args.providerName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'providerName'");
            }
            resourceInputs["acceptDataRisksAndForceReplicaSetReconfig"] = args ? args.acceptDataRisksAndForceReplicaSetReconfig : undefined;
            resourceInputs["advancedConfiguration"] = args ? args.advancedConfiguration : undefined;
            resourceInputs["autoScalingComputeEnabled"] = args ? args.autoScalingComputeEnabled : undefined;
            resourceInputs["autoScalingComputeScaleDownEnabled"] = args ? args.autoScalingComputeScaleDownEnabled : undefined;
            resourceInputs["autoScalingDiskGbEnabled"] = args ? args.autoScalingDiskGbEnabled : undefined;
            resourceInputs["backingProviderName"] = args ? args.backingProviderName : undefined;
            resourceInputs["backupEnabled"] = args ? args.backupEnabled : undefined;
            resourceInputs["biConnectorConfig"] = args ? args.biConnectorConfig : undefined;
            resourceInputs["cloudBackup"] = args ? args.cloudBackup : undefined;
            resourceInputs["clusterType"] = args ? args.clusterType : undefined;
            resourceInputs["diskSizeGb"] = args ? args.diskSizeGb : undefined;
            resourceInputs["encryptionAtRestProvider"] = args ? args.encryptionAtRestProvider : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["mongoDbMajorVersion"] = args ? args.mongoDbMajorVersion : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["numShards"] = args ? args.numShards : undefined;
            resourceInputs["paused"] = args ? args.paused : undefined;
            resourceInputs["pinnedFcv"] = args ? args.pinnedFcv : undefined;
            resourceInputs["pitEnabled"] = args ? args.pitEnabled : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["providerAutoScalingComputeMaxInstanceSize"] = args ? args.providerAutoScalingComputeMaxInstanceSize : undefined;
            resourceInputs["providerAutoScalingComputeMinInstanceSize"] = args ? args.providerAutoScalingComputeMinInstanceSize : undefined;
            resourceInputs["providerDiskIops"] = args ? args.providerDiskIops : undefined;
            resourceInputs["providerDiskTypeName"] = args ? args.providerDiskTypeName : undefined;
            resourceInputs["providerEncryptEbsVolume"] = args ? args.providerEncryptEbsVolume : undefined;
            resourceInputs["providerInstanceSizeName"] = args ? args.providerInstanceSizeName : undefined;
            resourceInputs["providerName"] = args ? args.providerName : undefined;
            resourceInputs["providerRegionName"] = args ? args.providerRegionName : undefined;
            resourceInputs["providerVolumeType"] = args ? args.providerVolumeType : undefined;
            resourceInputs["redactClientLogData"] = args ? args.redactClientLogData : undefined;
            resourceInputs["replicationFactor"] = args ? args.replicationFactor : undefined;
            resourceInputs["replicationSpecs"] = args ? args.replicationSpecs : undefined;
            resourceInputs["retainBackupsEnabled"] = args ? args.retainBackupsEnabled : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["terminationProtectionEnabled"] = args ? args.terminationProtectionEnabled : undefined;
            resourceInputs["versionReleaseSystem"] = args ? args.versionReleaseSystem : undefined;
            resourceInputs["clusterId"] = undefined /*out*/;
            resourceInputs["connectionStrings"] = undefined /*out*/;
            resourceInputs["containerId"] = undefined /*out*/;
            resourceInputs["mongoDbVersion"] = undefined /*out*/;
            resourceInputs["mongoUri"] = undefined /*out*/;
            resourceInputs["mongoUriUpdated"] = undefined /*out*/;
            resourceInputs["mongoUriWithOptions"] = undefined /*out*/;
            resourceInputs["providerEncryptEbsVolumeFlag"] = undefined /*out*/;
            resourceInputs["snapshotBackupPolicies"] = undefined /*out*/;
            resourceInputs["srvAddress"] = undefined /*out*/;
            resourceInputs["stateName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Cluster.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Cluster = Cluster;
/** @internal */
Cluster.__pulumiType = 'mongodbatlas:index/cluster:Cluster';
//# sourceMappingURL=cluster.js.map