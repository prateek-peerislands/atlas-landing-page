"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.getFederatedSettingsIdentityProviderOutput = exports.getFederatedSettingsIdentityProvider = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * ## # Data Source: mongodbatlas.FederatedSettingsIdentityProvider
 *
 * `mongodbatlas.FederatedSettingsIdentityProvider` provides a federated settings identity provider data source. Atlas federated settings identity provider provides federated settings outputs for the configured identity provider.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const identityProvider = new mongodbatlas.FederatedSettingsIdentityProvider("identity_provider", {
 *     federationSettingsId: "627a9687f7f7f7f774de306f14",
 *     name: "mongodb_federation_test",
 *     associatedDomains: ["yourdomain.com"],
 *     ssoDebugEnabled: true,
 *     status: "ACTIVE",
 *     ssoUrl: "https://mysso.oktapreview.com/app/mysso_terraformtest_1/exk177f7f7f70h8/sso/saml",
 *     issuerUri: "http://www.okta.com/exk17f7f7f7f7p50h8",
 *     requestBinding: "HTTP-POST",
 *     responseSignatureAlgorithm: "SHA-256",
 * });
 * const identityProviderDs = mongodbatlas.getFederatedSettingsIdentityProviderOutput({
 *     federationSettingsId: identityProvider.id,
 *     identityProviderId: "0oad4fas87jL5Xnk12971234",
 * });
 * ```
 */
function getFederatedSettingsIdentityProvider(args, opts) {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("mongodbatlas:index/getFederatedSettingsIdentityProvider:getFederatedSettingsIdentityProvider", {
        "federationSettingsId": args.federationSettingsId,
        "identityProviderId": args.identityProviderId,
    }, opts);
}
exports.getFederatedSettingsIdentityProvider = getFederatedSettingsIdentityProvider;
/**
 * ## # Data Source: mongodbatlas.FederatedSettingsIdentityProvider
 *
 * `mongodbatlas.FederatedSettingsIdentityProvider` provides a federated settings identity provider data source. Atlas federated settings identity provider provides federated settings outputs for the configured identity provider.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const identityProvider = new mongodbatlas.FederatedSettingsIdentityProvider("identity_provider", {
 *     federationSettingsId: "627a9687f7f7f7f774de306f14",
 *     name: "mongodb_federation_test",
 *     associatedDomains: ["yourdomain.com"],
 *     ssoDebugEnabled: true,
 *     status: "ACTIVE",
 *     ssoUrl: "https://mysso.oktapreview.com/app/mysso_terraformtest_1/exk177f7f7f70h8/sso/saml",
 *     issuerUri: "http://www.okta.com/exk17f7f7f7f7p50h8",
 *     requestBinding: "HTTP-POST",
 *     responseSignatureAlgorithm: "SHA-256",
 * });
 * const identityProviderDs = mongodbatlas.getFederatedSettingsIdentityProviderOutput({
 *     federationSettingsId: identityProvider.id,
 *     identityProviderId: "0oad4fas87jL5Xnk12971234",
 * });
 * ```
 */
function getFederatedSettingsIdentityProviderOutput(args, opts) {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("mongodbatlas:index/getFederatedSettingsIdentityProvider:getFederatedSettingsIdentityProvider", {
        "federationSettingsId": args.federationSettingsId,
        "identityProviderId": args.identityProviderId,
    }, opts);
}
exports.getFederatedSettingsIdentityProviderOutput = getFederatedSettingsIdentityProviderOutput;
//# sourceMappingURL=getFederatedSettingsIdentityProvider.js.map