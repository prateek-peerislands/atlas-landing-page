"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCustomDbRoleOutput = exports.getCustomDbRole = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * ## # Data Source: mongodbatlas.CustomDbRole
 *
 * `mongodbatlas.CustomDbRole` describes a Custom DB Role. This represents a custom db role.
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find groupId in the official documentation.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const testRole = new mongodbatlas.CustomDbRole("test_role", {
 *     projectId: "<PROJECT-ID>",
 *     roleName: "myCustomRole",
 *     actions: [
 *         {
 *             action: "UPDATE",
 *             resources: [{
 *                 collectionName: "",
 *                 databaseName: "anyDatabase",
 *             }],
 *         },
 *         {
 *             action: "INSERT",
 *             resources: [{
 *                 collectionName: "",
 *                 databaseName: "anyDatabase",
 *             }],
 *         },
 *     ],
 * });
 * const test = mongodbatlas.getCustomDbRoleOutput({
 *     projectId: testRole.projectId,
 *     roleName: testRole.roleName,
 * });
 * ```
 */
function getCustomDbRole(args, opts) {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("mongodbatlas:index/getCustomDbRole:getCustomDbRole", {
        "inheritedRoles": args.inheritedRoles,
        "projectId": args.projectId,
        "roleName": args.roleName,
    }, opts);
}
exports.getCustomDbRole = getCustomDbRole;
/**
 * ## # Data Source: mongodbatlas.CustomDbRole
 *
 * `mongodbatlas.CustomDbRole` describes a Custom DB Role. This represents a custom db role.
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find groupId in the official documentation.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const testRole = new mongodbatlas.CustomDbRole("test_role", {
 *     projectId: "<PROJECT-ID>",
 *     roleName: "myCustomRole",
 *     actions: [
 *         {
 *             action: "UPDATE",
 *             resources: [{
 *                 collectionName: "",
 *                 databaseName: "anyDatabase",
 *             }],
 *         },
 *         {
 *             action: "INSERT",
 *             resources: [{
 *                 collectionName: "",
 *                 databaseName: "anyDatabase",
 *             }],
 *         },
 *     ],
 * });
 * const test = mongodbatlas.getCustomDbRoleOutput({
 *     projectId: testRole.projectId,
 *     roleName: testRole.roleName,
 * });
 * ```
 */
function getCustomDbRoleOutput(args, opts) {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("mongodbatlas:index/getCustomDbRole:getCustomDbRole", {
        "inheritedRoles": args.inheritedRoles,
        "projectId": args.projectId,
        "roleName": args.roleName,
    }, opts);
}
exports.getCustomDbRoleOutput = getCustomDbRoleOutput;
//# sourceMappingURL=getCustomDbRole.js.map