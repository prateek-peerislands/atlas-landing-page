"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.DatabaseUser = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * ## # Resource: mongodbatlas.DatabaseUser
 *
 * `mongodbatlas.DatabaseUser` provides a Database User resource. This represents a database user which will be applied to all clusters within the project.
 *
 * Each user has a set of roles that provide access to the projectâ€™s databases. User's roles apply to all the clusters in the project: if two clusters have a `products` database and a user has a role granting `read` access on the products database, the user has that access on both clusters.
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find groupId in the official documentation.
 *
 * > **WARNING:** The password argument is required for creation but should be removed after creation if it will be managed externally. More details can be found in the password argument documentation.
 *
 * > **IMPORTANT:** All arguments including the password will be stored in the raw state as plain-text. Read more about sensitive data in state.
 *
 * ## Example Usage
 *
 * ### S
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = new mongodbatlas.DatabaseUser("test", {
 *     username: "test-acc-username",
 *     password: "test-acc-password",
 *     projectId: "<PROJECT-ID>",
 *     authDatabaseName: "admin",
 *     roles: [
 *         {
 *             roleName: "readWrite",
 *             databaseName: "dbforApp",
 *         },
 *         {
 *             roleName: "readAnyDatabase",
 *             databaseName: "admin",
 *         },
 *     ],
 *     labels: [{
 *         key: "My Key",
 *         value: "My Value",
 *     }],
 *     scopes: [
 *         {
 *             name: "My cluster name",
 *             type: "CLUSTER",
 *         },
 *         {
 *             name: "My second cluster name",
 *             type: "CLUSTER",
 *         },
 *     ],
 * });
 * ```
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = new mongodbatlas.DatabaseUser("test", {
 *     username: "test-acc-username",
 *     x509Type: "MANAGED",
 *     projectId: "<PROJECT-ID>",
 *     authDatabaseName: "$external",
 *     roles: [{
 *         roleName: "readAnyDatabase",
 *         databaseName: "admin",
 *     }],
 *     labels: [{
 *         key: "%s",
 *         value: "%s",
 *     }],
 *     scopes: [{
 *         name: "My cluster name",
 *         type: "CLUSTER",
 *     }],
 * });
 * ```
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = new mongodbatlas.DatabaseUser("test", {
 *     username: testAwsIamRole.arn,
 *     projectId: "<PROJECT-ID>",
 *     authDatabaseName: "$external",
 *     awsIamType: "ROLE",
 *     roles: [{
 *         roleName: "readAnyDatabase",
 *         databaseName: "admin",
 *     }],
 *     labels: [{
 *         key: "%s",
 *         value: "%s",
 *     }],
 *     scopes: [{
 *         name: "My cluster name",
 *         type: "CLUSTER",
 *     }],
 * });
 * ```
 *
 * ## Example of how to create a OIDC federated authentication user
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = new mongodbatlas.DatabaseUser("test", {
 *     username: "64d613677e1ad50839cce4db/testUserOr",
 *     projectId: "6414908c207f4d22f4d8f232",
 *     authDatabaseName: "admin",
 *     oidcAuthType: "IDP_GROUP",
 *     roles: [{
 *         roleName: "readWriteAnyDatabase",
 *         databaseName: "admin",
 *     }],
 * });
 * ```
 * `username` format: Atlas OIDC IdP ID (found in federation settings), followed by a '/', followed by the IdP group name
 *
 * Note: OIDC support is only avalible starting in [MongoDB 7.0](https://www.mongodb.com/evolved#mdbsevenzero) or later. To learn more, see the [MongoDB Atlas documentation](https://www.mongodb.com/docs/atlas/security-oidc/).
 *
 * ## Import
 *
 * Database users can be imported using project ID, username, and auth database name in the format:
 *
 * 1. `project_id`-`username`-`auth_database_name` Doesn't  work if `-` is used in both the `username` and the `auth_database_name`. For example `my-username` and `my-db` should use (2).
 *
 * 2. `project_id`/`username`/`auth_database_name` Works when neither `username` nor `auth_database_name` use `/`.
 *
 * ```sh
 * $ pulumi import mongodbatlas:index/databaseUser:DatabaseUser my_user 1112222b3bf99403840e8934-my_user-admin # (1)
 * ```
 *
 * ```sh
 * $ pulumi import mongodbatlas:index/databaseUser:DatabaseUser my_user 1112222b3bf99403840e8934/my-username-dash/my-db-name # (2)
 * ```
 */
class DatabaseUser extends pulumi.CustomResource {
    /**
     * Get an existing DatabaseUser resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new DatabaseUser(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of DatabaseUser.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DatabaseUser.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["authDatabaseName"] = state ? state.authDatabaseName : undefined;
            resourceInputs["awsIamType"] = state ? state.awsIamType : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["ldapAuthType"] = state ? state.ldapAuthType : undefined;
            resourceInputs["oidcAuthType"] = state ? state.oidcAuthType : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["roles"] = state ? state.roles : undefined;
            resourceInputs["scopes"] = state ? state.scopes : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
            resourceInputs["x509Type"] = state ? state.x509Type : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.authDatabaseName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authDatabaseName'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.username === undefined) && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["authDatabaseName"] = args ? args.authDatabaseName : undefined;
            resourceInputs["awsIamType"] = args ? args.awsIamType : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["ldapAuthType"] = args ? args.ldapAuthType : undefined;
            resourceInputs["oidcAuthType"] = args ? args.oidcAuthType : undefined;
            resourceInputs["password"] = (args === null || args === void 0 ? void 0 : args.password) ? pulumi.secret(args.password) : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["roles"] = args ? args.roles : undefined;
            resourceInputs["scopes"] = args ? args.scopes : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["x509Type"] = args ? args.x509Type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(DatabaseUser.__pulumiType, name, resourceInputs, opts);
    }
}
exports.DatabaseUser = DatabaseUser;
/** @internal */
DatabaseUser.__pulumiType = 'mongodbatlas:index/databaseUser:DatabaseUser';
//# sourceMappingURL=databaseUser.js.map