"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPushBasedLogExportOutput = exports.getPushBasedLogExport = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * ## # Data Source: mongodbatlas.PushBasedLogExport
 *
 * `mongodbatlas.PushBasedLogExport` describes the configured project level settings for the push-based log export feature.
 *
 * ## Example Usage
 *
 * ### S
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * export = async () => {
 *     const project_tf = new mongodbatlas.Project("project-tf", {
 *         name: atlasProjectName,
 *         orgId: atlasOrgId,
 *     });
 *     // Set up cloud provider access in Atlas using the created IAM role
 *     const setupOnly = new mongodbatlas.CloudProviderAccessSetup("setup_only", {
 *         projectId: project_tf.id,
 *         providerName: "AWS",
 *     });
 *     const authRole = new mongodbatlas.CloudProviderAccessAuthorization("auth_role", {
 *         projectId: project_tf.id,
 *         roleId: setupOnly.roleId,
 *         aws: {
 *             iamAssumedRoleArn: testRole.arn,
 *         },
 *     });
 *     // Set up push-based log export with authorized IAM role
 *     const testPushBasedLogExport = new mongodbatlas.PushBasedLogExport("test", {
 *         projectId: project_tf.id,
 *         bucketName: logBucket.bucket,
 *         iamRoleId: authRole.roleId,
 *         prefixPath: "push-based-log-test",
 *     });
 *     const test = mongodbatlas.getPushBasedLogExportOutput({
 *         projectId: testPushBasedLogExport.projectId,
 *     });
 *     return {
 *         test: test.apply(test => test.prefixPath),
 *     };
 * }
 * ```
 */
function getPushBasedLogExport(args, opts) {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("mongodbatlas:index/getPushBasedLogExport:getPushBasedLogExport", {
        "projectId": args.projectId,
    }, opts);
}
exports.getPushBasedLogExport = getPushBasedLogExport;
/**
 * ## # Data Source: mongodbatlas.PushBasedLogExport
 *
 * `mongodbatlas.PushBasedLogExport` describes the configured project level settings for the push-based log export feature.
 *
 * ## Example Usage
 *
 * ### S
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * export = async () => {
 *     const project_tf = new mongodbatlas.Project("project-tf", {
 *         name: atlasProjectName,
 *         orgId: atlasOrgId,
 *     });
 *     // Set up cloud provider access in Atlas using the created IAM role
 *     const setupOnly = new mongodbatlas.CloudProviderAccessSetup("setup_only", {
 *         projectId: project_tf.id,
 *         providerName: "AWS",
 *     });
 *     const authRole = new mongodbatlas.CloudProviderAccessAuthorization("auth_role", {
 *         projectId: project_tf.id,
 *         roleId: setupOnly.roleId,
 *         aws: {
 *             iamAssumedRoleArn: testRole.arn,
 *         },
 *     });
 *     // Set up push-based log export with authorized IAM role
 *     const testPushBasedLogExport = new mongodbatlas.PushBasedLogExport("test", {
 *         projectId: project_tf.id,
 *         bucketName: logBucket.bucket,
 *         iamRoleId: authRole.roleId,
 *         prefixPath: "push-based-log-test",
 *     });
 *     const test = mongodbatlas.getPushBasedLogExportOutput({
 *         projectId: testPushBasedLogExport.projectId,
 *     });
 *     return {
 *         test: test.apply(test => test.prefixPath),
 *     };
 * }
 * ```
 */
function getPushBasedLogExportOutput(args, opts) {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("mongodbatlas:index/getPushBasedLogExport:getPushBasedLogExport", {
        "projectId": args.projectId,
    }, opts);
}
exports.getPushBasedLogExportOutput = getPushBasedLogExportOutput;
//# sourceMappingURL=getPushBasedLogExport.js.map