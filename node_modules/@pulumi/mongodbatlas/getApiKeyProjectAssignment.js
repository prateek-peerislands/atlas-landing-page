"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.getApiKeyProjectAssignmentOutput = exports.getApiKeyProjectAssignment = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * ## # Data Source: mongodbatlas.ApiKeyProjectAssignment
 *
 * `mongodbatlas.ApiKeyProjectAssignment` describes an API Key Project Assignment.
 *
 * ## Example Usage
 *
 * ### S
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const _this = new mongodbatlas.ApiKey("this", {
 *     orgId: orgId,
 *     description: "Test API Key",
 *     roleNames: ["ORG_READ_ONLY"],
 * });
 * const firstProject = new mongodbatlas.Project("first_project", {
 *     name: "First Project",
 *     orgId: orgId,
 * });
 * const secondProject = new mongodbatlas.Project("second_project", {
 *     name: "Second Project",
 *     orgId: orgId,
 * });
 * const firstAssignment = new mongodbatlas.ApiKeyProjectAssignment("first_assignment", {
 *     projectId: firstProject.id,
 *     apiKeyId: _this.apiKeyId,
 *     roles: ["GROUP_OWNER"],
 * });
 * const secondAssignment = new mongodbatlas.ApiKeyProjectAssignment("second_assignment", {
 *     projectId: secondProject.id,
 *     apiKeyId: _this.apiKeyId,
 *     roles: ["GROUP_OWNER"],
 * });
 * // Add IP Access List Entry to Programmatic API Key
 * const thisAccessListApiKey = new mongodbatlas.AccessListApiKey("this", {
 *     orgId: orgId,
 *     cidrBlock: "0.0.0.0/1",
 *     apiKeyId: _this.apiKeyId,
 * });
 * ```
 */
function getApiKeyProjectAssignment(args, opts) {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("mongodbatlas:index/getApiKeyProjectAssignment:getApiKeyProjectAssignment", {
        "apiKeyId": args.apiKeyId,
        "projectId": args.projectId,
    }, opts);
}
exports.getApiKeyProjectAssignment = getApiKeyProjectAssignment;
/**
 * ## # Data Source: mongodbatlas.ApiKeyProjectAssignment
 *
 * `mongodbatlas.ApiKeyProjectAssignment` describes an API Key Project Assignment.
 *
 * ## Example Usage
 *
 * ### S
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const _this = new mongodbatlas.ApiKey("this", {
 *     orgId: orgId,
 *     description: "Test API Key",
 *     roleNames: ["ORG_READ_ONLY"],
 * });
 * const firstProject = new mongodbatlas.Project("first_project", {
 *     name: "First Project",
 *     orgId: orgId,
 * });
 * const secondProject = new mongodbatlas.Project("second_project", {
 *     name: "Second Project",
 *     orgId: orgId,
 * });
 * const firstAssignment = new mongodbatlas.ApiKeyProjectAssignment("first_assignment", {
 *     projectId: firstProject.id,
 *     apiKeyId: _this.apiKeyId,
 *     roles: ["GROUP_OWNER"],
 * });
 * const secondAssignment = new mongodbatlas.ApiKeyProjectAssignment("second_assignment", {
 *     projectId: secondProject.id,
 *     apiKeyId: _this.apiKeyId,
 *     roles: ["GROUP_OWNER"],
 * });
 * // Add IP Access List Entry to Programmatic API Key
 * const thisAccessListApiKey = new mongodbatlas.AccessListApiKey("this", {
 *     orgId: orgId,
 *     cidrBlock: "0.0.0.0/1",
 *     apiKeyId: _this.apiKeyId,
 * });
 * ```
 */
function getApiKeyProjectAssignmentOutput(args, opts) {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("mongodbatlas:index/getApiKeyProjectAssignment:getApiKeyProjectAssignment", {
        "apiKeyId": args.apiKeyId,
        "projectId": args.projectId,
    }, opts);
}
exports.getApiKeyProjectAssignmentOutput = getApiKeyProjectAssignmentOutput;
//# sourceMappingURL=getApiKeyProjectAssignment.js.map