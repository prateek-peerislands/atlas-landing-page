"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.CloudBackupSnapshotExportJob = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * ## # Resource: mongodbatlas.CloudBackupSnapshotExportJob
 *
 * `mongodbatlas.CloudBackupSnapshotExportJob` allows you to create a cloud backup snapshot export job for the specified project.
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
 *
 * ## Example Usage
 *
 * ### Export one snapshot
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = new mongodbatlas.CloudBackupSnapshotExportBucket("test", {
 *     projectId: "{PROJECT_ID}",
 *     iamRoleId: "{IAM_ROLE_ID}",
 *     bucketName: "example_bucket",
 *     cloudProvider: "AWS",
 * });
 * const testCloudBackupSnapshotExportJob = new mongodbatlas.CloudBackupSnapshotExportJob("test", {
 *     projectId: "{PROJECT_ID}",
 *     clusterName: "{CLUSTER_NAME}",
 *     snapshotId: "{SNAPSHOT_ID}",
 *     exportBucketId: test.exportBucketId,
 *     customDatas: [{
 *         key: "exported by",
 *         value: "myName",
 *     }],
 * });
 * ```
 *
 * ### Create backup and automatic snapshot export policies
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const _export = new mongodbatlas.CloudBackupSnapshotExportBucket("export", {
 *     projectId: "{PROJECT_ID}",
 *     iamRoleId: "{IAM_ROLE_ID}",
 *     bucketName: "example_bucket",
 *     cloudProvider: "AWS",
 * });
 * const backup = new mongodbatlas.CloudBackupSchedule("backup", {
 *     projectId: "{PROJECT_ID}",
 *     clusterName: "{CLUSTER_NAME}",
 *     autoExportEnabled: true,
 *     "export": {
 *         exportBucketId: _export.exportBucketId,
 *         frequencyType: "weekly",
 *     },
 *     useOrgAndGroupNamesInExportPrefix: true,
 *     referenceHourOfDay: 7,
 *     referenceMinuteOfHour: 0,
 *     restoreWindowDays: 5,
 *     policyItemHourly: {
 *         frequencyInterval: 6,
 *         retentionUnit: "days",
 *         retentionValue: 7,
 *     },
 *     policyItemDaily: {
 *         frequencyInterval: 1,
 *         retentionUnit: "days",
 *         retentionValue: 7,
 *     },
 *     policyItemWeeklies: [{
 *         frequencyInterval: 6,
 *         retentionUnit: "weeks",
 *         retentionValue: 4,
 *     }],
 *     policyItemMonthlies: [{
 *         frequencyInterval: 28,
 *         retentionUnit: "months",
 *         retentionValue: 12,
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * Cloud Backup Snapshot Export Backup entries can be imported using project project_id, cluster_name and export_job_id (Unique identifier of the snapshot export job), in the format `PROJECTID-CLUSTERNAME-EXPORTJOBID`, e.g.
 *
 * ```sh
 * $ pulumi import mongodbatlas:index/cloudBackupSnapshotExportJob:CloudBackupSnapshotExportJob test 5d0f1f73cf09a29120e173cf-5d116d82014b764445b2f9b5-5d116d82014b764445b2f9b5
 * ```
 * For more information see: [MongoDB Atlas API Reference.](https://docs.atlas.mongodb.com/reference/api/cloud-backup/export/create-one-export-job/)
 */
class CloudBackupSnapshotExportJob extends pulumi.CustomResource {
    /**
     * Get an existing CloudBackupSnapshotExportJob resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new CloudBackupSnapshotExportJob(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of CloudBackupSnapshotExportJob.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CloudBackupSnapshotExportJob.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["clusterName"] = state ? state.clusterName : undefined;
            resourceInputs["components"] = state ? state.components : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["customDatas"] = state ? state.customDatas : undefined;
            resourceInputs["exportBucketId"] = state ? state.exportBucketId : undefined;
            resourceInputs["exportJobId"] = state ? state.exportJobId : undefined;
            resourceInputs["exportStatusExportedCollections"] = state ? state.exportStatusExportedCollections : undefined;
            resourceInputs["exportStatusTotalCollections"] = state ? state.exportStatusTotalCollections : undefined;
            resourceInputs["finishedAt"] = state ? state.finishedAt : undefined;
            resourceInputs["prefix"] = state ? state.prefix : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["snapshotId"] = state ? state.snapshotId : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.clusterName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterName'");
            }
            if ((!args || args.exportBucketId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'exportBucketId'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.snapshotId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'snapshotId'");
            }
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["customDatas"] = args ? args.customDatas : undefined;
            resourceInputs["exportBucketId"] = args ? args.exportBucketId : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["snapshotId"] = args ? args.snapshotId : undefined;
            resourceInputs["components"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["exportJobId"] = undefined /*out*/;
            resourceInputs["exportStatusExportedCollections"] = undefined /*out*/;
            resourceInputs["exportStatusTotalCollections"] = undefined /*out*/;
            resourceInputs["finishedAt"] = undefined /*out*/;
            resourceInputs["prefix"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CloudBackupSnapshotExportJob.__pulumiType, name, resourceInputs, opts);
    }
}
exports.CloudBackupSnapshotExportJob = CloudBackupSnapshotExportJob;
/** @internal */
CloudBackupSnapshotExportJob.__pulumiType = 'mongodbatlas:index/cloudBackupSnapshotExportJob:CloudBackupSnapshotExportJob';
//# sourceMappingURL=cloudBackupSnapshotExportJob.js.map