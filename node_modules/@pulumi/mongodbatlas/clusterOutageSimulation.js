"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClusterOutageSimulation = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * ## # Resource: mongodbatlas.ClusterOutageSimulation
 *
 * `mongodbatlas.ClusterOutageSimulation` provides a Cluster Outage Simulation resource. For more details see https://www.mongodb.com/docs/atlas/tutorial/test-resilience/simulate-regional-outage/
 *
 * Test Outage on Minority of Electable Nodes - Select fewer than half of your electable nodes.
 *
 * Test Outage on Majority of Electable Nodes - Select at least one more than half of your electable nodes and keep at least one electable node remaining.
 *
 * **IMPORTANT:** Test Outage on Majority of Electable Nodes will leave the Atlas cluster without a majority quorum. There will be no primary so write operations will not succeed, and reads will succeed only when configured with a suitable [readPreference](https://www.mongodb.com/docs/manual/core/read-preference/). To recover the majority quorum, you will have the option to manually reconfigure your cluster by adding new nodes to existing regions or adding new regions at the risk of losing recent writes, or end the simulation.
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find groupId in the official documentation.
 *
 * > **IMPORTANT:** This resource cannot be updated.
 * **IMPORTANT:** An existing Cluster Outage Simulation cannot be imported as this resource does not support import operation.
 *
 * ## Example Usage
 *
 * ### S
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const outageSimulation = new mongodbatlas.ClusterOutageSimulation("outage_simulation", {
 *     projectId: "64707f06c519c20c3a2b1b03",
 *     clusterName: "Cluster0",
 *     outageFilters: [
 *         {
 *             cloudProvider: "AWS",
 *             regionName: "US_EAST_1",
 *         },
 *         {
 *             cloudProvider: "AWS",
 *             regionName: "US_EAST_2",
 *         },
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * The `mongodbatlas_cluster_outage_simulation` resource does not support import operation.
 *
 * See [MongoDB Atlas API](https://www.mongodb.com/docs/atlas/reference/api-resources-spec/#tag/Cluster-Outage-Simulation) Documentation for more information.
 */
class ClusterOutageSimulation extends pulumi.CustomResource {
    /**
     * Get an existing ClusterOutageSimulation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ClusterOutageSimulation(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ClusterOutageSimulation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ClusterOutageSimulation.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["clusterName"] = state ? state.clusterName : undefined;
            resourceInputs["outageFilters"] = state ? state.outageFilters : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["simulationId"] = state ? state.simulationId : undefined;
            resourceInputs["startRequestDate"] = state ? state.startRequestDate : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.clusterName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterName'");
            }
            if ((!args || args.outageFilters === undefined) && !opts.urn) {
                throw new Error("Missing required property 'outageFilters'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["outageFilters"] = args ? args.outageFilters : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["simulationId"] = undefined /*out*/;
            resourceInputs["startRequestDate"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ClusterOutageSimulation.__pulumiType, name, resourceInputs, opts);
    }
}
exports.ClusterOutageSimulation = ClusterOutageSimulation;
/** @internal */
ClusterOutageSimulation.__pulumiType = 'mongodbatlas:index/clusterOutageSimulation:ClusterOutageSimulation';
//# sourceMappingURL=clusterOutageSimulation.js.map