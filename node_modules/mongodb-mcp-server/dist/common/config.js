import path from "path";
import os from "os";
import argv from "yargs-parser";
const defaults = {
    apiBaseUrl: "https://cloud.mongodb.com/",
    logPath: getLogPath(),
    connectOptions: {
        readConcern: "local",
        readPreference: "secondaryPreferred",
        writeConcern: "majority",
        timeoutMS: 30000,
    },
    disabledTools: [],
    telemetry: "enabled",
    readOnly: false,
    indexCheck: false,
    transport: "stdio",
    httpPort: 3000,
    httpHost: "127.0.0.1",
    loggers: ["disk", "mcp"],
    idleTimeoutMs: 600000, // 10 minutes
    notificationTimeoutMs: 540000, // 9 minutes
};
export const config = {
    ...defaults,
    ...getEnvConfig(),
    ...getCliConfig(),
};
function getLogPath() {
    const localDataPath = process.platform === "win32"
        ? path.join(process.env.LOCALAPPDATA || process.env.APPDATA || os.homedir(), "mongodb")
        : path.join(os.homedir(), ".mongodb");
    const logPath = path.join(localDataPath, "mongodb-mcp", ".app-logs");
    return logPath;
}
// Gets the config supplied by the user as environment variables. The variable names
// are prefixed with `MDB_MCP_` and the keys match the UserConfig keys, but are converted
// to SNAKE_UPPER_CASE.
function getEnvConfig() {
    function setValue(obj, path, value) {
        const currentField = path.shift();
        if (!currentField) {
            return;
        }
        if (path.length === 0) {
            const numberValue = Number(value);
            if (!isNaN(numberValue)) {
                obj[currentField] = numberValue;
                return;
            }
            const booleanValue = value.toLocaleLowerCase();
            if (booleanValue === "true" || booleanValue === "false") {
                obj[currentField] = booleanValue === "true";
                return;
            }
            // Try to parse an array of values
            if (value.indexOf(",") !== -1) {
                obj[currentField] = value.split(",").map((v) => v.trim());
                return;
            }
            obj[currentField] = value;
            return;
        }
        if (!obj[currentField]) {
            obj[currentField] = {};
        }
        setValue(obj[currentField], path, value);
    }
    const result = {};
    const mcpVariables = Object.entries(process.env).filter(([key, value]) => value !== undefined && key.startsWith("MDB_MCP_"));
    for (const [key, value] of mcpVariables) {
        const fieldPath = key
            .replace("MDB_MCP_", "")
            .split(".")
            .map((part) => SNAKE_CASE_toCamelCase(part));
        setValue(result, fieldPath, value);
    }
    return result;
}
function SNAKE_CASE_toCamelCase(str) {
    return str.toLowerCase().replace(/([-_][a-z])/g, (group) => group.toUpperCase().replace("_", ""));
}
// Reads the cli args and parses them into a UserConfig object.
function getCliConfig() {
    return argv(process.argv.slice(2), {
        array: ["disabledTools", "loggers"],
    });
}
//# sourceMappingURL=config.js.map