import { NodeDriverServiceProvider } from "@mongosh/service-provider-node-driver";
import { ApiClient } from "./atlas/apiClient.js";
import logger, { LogId } from "./logger.js";
import EventEmitter from "events";
import { setAppNameParamIfMissing } from "../helpers/connectionOptions.js";
import { packageInfo } from "./packageInfo.js";
export class Session extends EventEmitter {
    constructor({ apiBaseUrl, apiClientId, apiClientSecret }) {
        super();
        const credentials = apiClientId && apiClientSecret
            ? {
                clientId: apiClientId,
                clientSecret: apiClientSecret,
            }
            : undefined;
        this.apiClient = new ApiClient({
            baseUrl: apiBaseUrl,
            credentials,
        });
    }
    setAgentRunner(agentRunner) {
        if (agentRunner?.name && agentRunner?.version) {
            this.agentRunner = {
                name: agentRunner.name,
                version: agentRunner.version,
            };
        }
    }
    async disconnect() {
        if (this.serviceProvider) {
            try {
                await this.serviceProvider.close(true);
            }
            catch (err) {
                const error = err instanceof Error ? err : new Error(String(err));
                logger.error(LogId.mongodbDisconnectFailure, "Error closing service provider:", error.message);
            }
            this.serviceProvider = undefined;
        }
        if (this.connectedAtlasCluster?.username && this.connectedAtlasCluster?.projectId) {
            void this.apiClient
                .deleteDatabaseUser({
                params: {
                    path: {
                        groupId: this.connectedAtlasCluster.projectId,
                        username: this.connectedAtlasCluster.username,
                        databaseName: "admin",
                    },
                },
            })
                .catch((err) => {
                const error = err instanceof Error ? err : new Error(String(err));
                logger.error(LogId.atlasDeleteDatabaseUserFailure, "atlas-connect-cluster", `Error deleting previous database user: ${error.message}`);
            });
            this.connectedAtlasCluster = undefined;
        }
        this.emit("disconnect");
    }
    async close() {
        await this.disconnect();
        await this.apiClient.close();
        this.emit("close");
    }
    async connectToMongoDB(connectionString, connectOptions) {
        connectionString = setAppNameParamIfMissing({
            connectionString,
            defaultAppName: `${packageInfo.mcpServerName} ${packageInfo.version}`,
        });
        this.serviceProvider = await NodeDriverServiceProvider.connect(connectionString, {
            productDocsLink: "https://github.com/mongodb-js/mongodb-mcp-server/",
            productName: "MongoDB MCP",
            readConcern: {
                level: connectOptions.readConcern,
            },
            readPreference: connectOptions.readPreference,
            writeConcern: {
                w: connectOptions.writeConcern,
            },
            timeoutMS: connectOptions.timeoutMS,
        });
    }
}
//# sourceMappingURL=session.js.map