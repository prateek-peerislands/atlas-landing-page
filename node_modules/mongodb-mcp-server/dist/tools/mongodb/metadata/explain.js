import { DbOperationArgs, MongoDBToolBase } from "../mongodbTool.js";
import { z } from "zod";
import { ExplainVerbosity } from "mongodb";
import { AggregateArgs } from "../read/aggregate.js";
import { FindArgs } from "../read/find.js";
import { CountArgs } from "../read/count.js";
export class ExplainTool extends MongoDBToolBase {
    constructor() {
        super(...arguments);
        this.name = "explain";
        this.description = "Returns statistics describing the execution of the winning plan chosen by the query optimizer for the evaluated method";
        this.argsShape = {
            ...DbOperationArgs,
            method: z
                .array(z.discriminatedUnion("name", [
                z.object({
                    name: z.literal("aggregate"),
                    arguments: z.object(AggregateArgs),
                }),
                z.object({
                    name: z.literal("find"),
                    arguments: z.object(FindArgs),
                }),
                z.object({
                    name: z.literal("count"),
                    arguments: z.object(CountArgs),
                }),
            ]))
                .describe("The method and its arguments to run"),
        };
        this.operationType = "metadata";
    }
    async execute({ database, collection, method: methods, }) {
        const provider = await this.ensureConnected();
        const method = methods[0];
        if (!method) {
            throw new Error("No method provided. Expected one of the following: `aggregate`, `find`, or `count`");
        }
        let result;
        switch (method.name) {
            case "aggregate": {
                const { pipeline } = method.arguments;
                result = await provider
                    .aggregate(database, collection, pipeline, {}, {
                    writeConcern: undefined,
                })
                    .explain(ExplainTool.defaultVerbosity);
                break;
            }
            case "find": {
                const { filter, ...rest } = method.arguments;
                result = await provider
                    .find(database, collection, filter, { ...rest })
                    .explain(ExplainTool.defaultVerbosity);
                break;
            }
            case "count": {
                const { query } = method.arguments;
                result = await provider.runCommandWithCheck(database, {
                    explain: {
                        count: collection,
                        query,
                    },
                    verbosity: ExplainTool.defaultVerbosity,
                });
                break;
            }
        }
        return {
            content: [
                {
                    text: `Here is some information about the winning plan chosen by the query optimizer for running the given \`${method.name}\` operation in "${database}.${collection}". This information can be used to understand how the query was executed and to optimize the query performance.`,
                    type: "text",
                },
                {
                    text: JSON.stringify(result),
                    type: "text",
                },
            ],
        };
    }
}
ExplainTool.defaultVerbosity = ExplainVerbosity.queryPlanner;
//# sourceMappingURL=explain.js.map