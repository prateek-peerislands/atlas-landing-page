import express from "express";
import { StreamableHTTPServerTransport } from "@modelcontextprotocol/sdk/server/streamableHttp.js";
import { isInitializeRequest } from "@modelcontextprotocol/sdk/types.js";
import { TransportRunnerBase } from "./base.js";
import logger, { LogId } from "../common/logger.js";
import { randomUUID } from "crypto";
import { SessionStore } from "../common/sessionStore.js";
const JSON_RPC_ERROR_CODE_PROCESSING_REQUEST_FAILED = -32000;
const JSON_RPC_ERROR_CODE_SESSION_ID_REQUIRED = -32001;
const JSON_RPC_ERROR_CODE_SESSION_ID_INVALID = -32002;
const JSON_RPC_ERROR_CODE_SESSION_NOT_FOUND = -32003;
const JSON_RPC_ERROR_CODE_INVALID_REQUEST = -32004;
function withErrorHandling(fn) {
    return (req, res, next) => {
        fn(req, res, next).catch((error) => {
            logger.error(LogId.streamableHttpTransportRequestFailure, "streamableHttpTransport", `Error handling request: ${error instanceof Error ? error.message : String(error)}`);
            res.status(400).json({
                jsonrpc: "2.0",
                error: {
                    code: JSON_RPC_ERROR_CODE_PROCESSING_REQUEST_FAILED,
                    message: `failed to handle request`,
                    data: error instanceof Error ? error.message : String(error),
                },
            });
        });
    };
}
export class StreamableHttpRunner extends TransportRunnerBase {
    constructor(userConfig) {
        super();
        this.userConfig = userConfig;
        this.sessionStore = new SessionStore(this.userConfig.idleTimeoutMs, this.userConfig.notificationTimeoutMs);
    }
    async start() {
        const app = express();
        app.enable("trust proxy"); // needed for reverse proxy support
        app.use(express.json());
        const handleSessionRequest = async (req, res) => {
            const sessionId = req.headers["mcp-session-id"];
            if (!sessionId) {
                res.status(400).json({
                    jsonrpc: "2.0",
                    error: {
                        code: JSON_RPC_ERROR_CODE_SESSION_ID_REQUIRED,
                        message: `session id is required`,
                    },
                });
                return;
            }
            if (typeof sessionId !== "string") {
                res.status(400).json({
                    jsonrpc: "2.0",
                    error: {
                        code: JSON_RPC_ERROR_CODE_SESSION_ID_INVALID,
                        message: `session id is invalid`,
                    },
                });
                return;
            }
            const transport = this.sessionStore.getSession(sessionId);
            if (!transport) {
                res.status(404).json({
                    jsonrpc: "2.0",
                    error: {
                        code: JSON_RPC_ERROR_CODE_SESSION_NOT_FOUND,
                        message: `session not found`,
                    },
                });
                return;
            }
            await transport.handleRequest(req, res, req.body);
        };
        app.post("/mcp", withErrorHandling(async (req, res) => {
            const sessionId = req.headers["mcp-session-id"];
            if (sessionId) {
                await handleSessionRequest(req, res);
                return;
            }
            if (!isInitializeRequest(req.body)) {
                res.status(400).json({
                    jsonrpc: "2.0",
                    error: {
                        code: JSON_RPC_ERROR_CODE_INVALID_REQUEST,
                        message: `invalid request`,
                    },
                });
                return;
            }
            const server = this.setupServer(this.userConfig);
            const transport = new StreamableHTTPServerTransport({
                sessionIdGenerator: () => randomUUID().toString(),
                onsessioninitialized: (sessionId) => {
                    this.sessionStore.setSession(sessionId, transport, server.mcpServer);
                },
                onsessionclosed: async (sessionId) => {
                    try {
                        await this.sessionStore.closeSession(sessionId, false);
                    }
                    catch (error) {
                        logger.error(LogId.streamableHttpTransportSessionCloseFailure, "streamableHttpTransport", `Error closing session: ${error instanceof Error ? error.message : String(error)}`);
                    }
                },
            });
            transport.onclose = () => {
                server.close().catch((error) => {
                    logger.error(LogId.streamableHttpTransportCloseFailure, "streamableHttpTransport", `Error closing server: ${error instanceof Error ? error.message : String(error)}`);
                });
            };
            await server.connect(transport);
            await transport.handleRequest(req, res, req.body);
        }));
        app.get("/mcp", withErrorHandling(handleSessionRequest));
        app.delete("/mcp", withErrorHandling(handleSessionRequest));
        this.httpServer = await new Promise((resolve, reject) => {
            const result = app.listen(this.userConfig.httpPort, this.userConfig.httpHost, (err) => {
                if (err) {
                    reject(err);
                    return;
                }
                resolve(result);
            });
        });
        logger.info(LogId.streamableHttpTransportStarted, "streamableHttpTransport", `Server started on http://${this.userConfig.httpHost}:${this.userConfig.httpPort}`);
    }
    async close() {
        await Promise.all([
            this.sessionStore.closeAllSessions(),
            new Promise((resolve, reject) => {
                this.httpServer?.close((err) => {
                    if (err) {
                        reject(err);
                        return;
                    }
                    resolve();
                });
            }),
        ]);
    }
}
//# sourceMappingURL=streamableHttp.js.map