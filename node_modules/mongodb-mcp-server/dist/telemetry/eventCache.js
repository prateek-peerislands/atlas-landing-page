import { LRUCache } from "lru-cache";
/**
 * Singleton class for in-memory telemetry event caching
 * Provides a central storage for telemetry events that couldn't be sent
 * Uses LRU cache to automatically drop oldest events when limit is exceeded
 */
export class EventCache {
    constructor() {
        this.nextId = 0;
        this.cache = new LRUCache({
            max: EventCache.MAX_EVENTS,
            // Using FIFO eviction strategy for events
            allowStale: false,
            updateAgeOnGet: false,
        });
    }
    /**
     * Gets the singleton instance of EventCache
     * @returns The EventCache instance
     */
    static getInstance() {
        if (!EventCache.instance) {
            EventCache.instance = new EventCache();
        }
        return EventCache.instance;
    }
    /**
     * Gets a copy of the currently cached events
     * @returns Array of cached BaseEvent objects
     */
    getEvents() {
        return Array.from(this.cache.values());
    }
    /**
     * Appends new events to the cached events
     * LRU cache automatically handles dropping oldest events when limit is exceeded
     * @param events - The events to append
     */
    appendEvents(events) {
        for (const event of events) {
            this.cache.set(this.nextId++, event);
        }
    }
    /**
     * Clears all cached events
     */
    clearEvents() {
        this.cache.clear();
        this.nextId = 0;
    }
}
EventCache.MAX_EVENTS = 1000;
//# sourceMappingURL=eventCache.js.map