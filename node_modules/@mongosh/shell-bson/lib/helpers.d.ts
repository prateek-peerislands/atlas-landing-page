export declare function functionCtorWithoutProps<T extends Function & {
    new (...args: any): any;
}>(ClassCtor: T): {
    new (...args: ConstructorParameters<T>): InstanceType<T>;
    (...args: ConstructorParameters<T>): InstanceType<T>;
};
export declare function assignAll<T extends {}, U extends {}>(t: T, u: U): T & U;
export declare function assignAll<T extends {}, U extends {}, V extends {}>(t: T, u: U, v: V): T & U & V;
export declare function assignAll<T extends {}, U extends {}, V extends {}, W extends {}>(t: T, u: U, v: V, w: W): T & U & V & W;
export declare function pickWithExactKeyMatch<K extends string, O extends Record<K, unknown>>(o: Record<string, never> extends Omit<O, K> ? O : never, keys: K[]): O;
export declare function assertArgsDefinedType(args: any[], expectedTypes: Array<true | string | Array<string | undefined>>, func?: string): void;
