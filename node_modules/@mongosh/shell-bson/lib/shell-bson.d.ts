import type { BSON, Long, ObjectId } from './bson-export';
type LongWithoutAccidentallyExposedMethods = Omit<typeof Long, 'fromExtendedJSON'>;
export interface ShellBsonBase<BSONLib extends BSON = BSON> {
    DBRef: BSONLib['DBRef'] & ((namespace: string, oid: any, db?: string, fields?: Document) => BSONLib['DBRef']['prototype']);
    bsonsize: (object: any) => number;
    MaxKey: (() => BSONLib['MaxKey']['prototype']) & {
        toBSON: () => BSONLib['MaxKey']['prototype'];
    };
    MinKey: (() => BSONLib['MinKey']['prototype']) & {
        toBSON: () => BSONLib['MinKey']['prototype'];
    };
    ObjectId: BSONLib['ObjectId'] & ((id?: string | number | ObjectId | Buffer) => BSONLib['ObjectId']['prototype']);
    Timestamp: BSONLib['Timestamp'] & ((t?: number | Long | {
        t: number;
        i: number;
    }, i?: number) => BSONLib['Timestamp']['prototype']);
    Code: BSONLib['Code'] & ((c?: string | Function, s?: any) => BSONLib['Code']['prototype']);
    NumberDecimal: (s?: string) => BSONLib['Decimal128']['prototype'];
    NumberInt: (v?: string) => BSONLib['Int32']['prototype'];
    NumberLong: (s?: string | number) => BSONLib['Long']['prototype'];
    ISODate: (input?: string) => Date;
    BinData: (subtype: number, b64string: string) => BSONLib['Binary']['prototype'];
    HexData: (subtype: number, hexstr: string) => BSONLib['Binary']['prototype'];
    UUID: (hexstr?: string) => BSONLib['Binary']['prototype'];
    MD5: (hexstr: string) => BSONLib['Binary']['prototype'];
    Decimal128: BSONLib['Decimal128'];
    BSONSymbol: BSONLib['BSONSymbol'];
    Int32: BSONLib['Int32'];
    Long: LongWithoutAccidentallyExposedMethods;
    Binary: BSONLib['Binary'];
    Double: BSONLib['Double'];
    EJSON: BSONLib['EJSON'];
    BSONRegExp: BSONLib['BSONRegExp'];
}
type WithHelp<T, Help> = {
    [prop in keyof T]: T[prop] & {
        help?: () => Help;
    } & {
        prototype?: {
            help?: Help & (() => Help);
            _bsontype?: unknown;
        };
    };
};
export type ShellBson<BSONLib extends BSON = BSON, Help = unknown> = WithHelp<ShellBsonBase<WithHelp<BSONLib, Help>>, Help>;
export interface ShellBsonOptions<BSONLib extends BSON = BSON, Help = unknown> {
    bsonLibrary: BSONLib;
    printWarning: (msg: string) => void;
    assignMetadata?: (target: any, props: {
        minVersion?: string;
        maxVersion?: string;
        deprecated?: boolean;
        help?: Help;
    }) => void;
    constructHelp?: (className: string) => Help;
}
export declare function constructShellBson<BSONLib extends BSON = BSON, Help = unknown>({ bsonLibrary: bson, printWarning, assignMetadata, constructHelp, }: ShellBsonOptions<BSONLib, Help>): ShellBson<BSONLib, Help>;
export {};
