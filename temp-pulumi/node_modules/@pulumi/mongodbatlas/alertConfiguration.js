"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.AlertConfiguration = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * ## # Resource: mongodbatlas.AlertConfiguration
 *
 * `mongodbatlas.AlertConfiguration` provides an Alert Configuration resource to define the conditions that trigger an alert and the methods of notification within a MongoDB Atlas project.
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = new mongodbatlas.AlertConfiguration("test", {
 *     projectId: "<PROJECT-ID>",
 *     eventType: "OUTSIDE_METRIC_THRESHOLD",
 *     enabled: true,
 *     notifications: [{
 *         typeName: "GROUP",
 *         intervalMin: 5,
 *         delayMin: 0,
 *         smsEnabled: false,
 *         emailEnabled: true,
 *         roles: ["GROUP_CLUSTER_MANAGER"],
 *     }],
 *     matchers: [{
 *         fieldName: "HOSTNAME_AND_PORT",
 *         operator: "EQUALS",
 *         value: "SECONDARY",
 *     }],
 *     metricThresholdConfig: {
 *         metricName: "ASSERT_REGULAR",
 *         operator: "LESS_THAN",
 *         threshold: 99,
 *         units: "RAW",
 *         mode: "AVERAGE",
 *     },
 * });
 * ```
 *
 * > **NOTE:** In order to allow for a fast pace of change to alert variables some validations have been removed from this resource in order to unblock alert creation. Impacted areas have links to the MongoDB Atlas API documentation so always check it for the most current information: https://docs.atlas.mongodb.com/reference/api/alert-configurations-create-config/
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = new mongodbatlas.AlertConfiguration("test", {
 *     projectId: "<PROJECT-ID>",
 *     eventType: "REPLICATION_OPLOG_WINDOW_RUNNING_OUT",
 *     enabled: true,
 *     notifications: [{
 *         typeName: "GROUP",
 *         intervalMin: 5,
 *         delayMin: 0,
 *         smsEnabled: false,
 *         emailEnabled: true,
 *         roles: ["GROUP_CLUSTER_MANAGER"],
 *     }],
 *     matchers: [{
 *         fieldName: "CLUSTER_NAME",
 *         operator: "EQUALS",
 *         value: "my-cluster",
 *     }],
 *     thresholdConfig: {
 *         operator: "LESS_THAN",
 *         threshold: 1,
 *         units: "HOURS",
 *     },
 * });
 * ```
 *
 * ### Create an alert with two notifications using Email and SMS
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = new mongodbatlas.AlertConfiguration("test", {
 *     projectId: "PROJECT ID",
 *     eventType: "OUTSIDE_METRIC_THRESHOLD",
 *     enabled: true,
 *     notifications: [
 *         {
 *             typeName: "GROUP",
 *             intervalMin: 5,
 *             delayMin: 0,
 *             smsEnabled: false,
 *             emailEnabled: true,
 *             roles: [
 *                 "GROUP_DATA_ACCESS_READ_ONLY",
 *                 "GROUP_CLUSTER_MANAGER",
 *                 "GROUP_DATA_ACCESS_ADMIN",
 *             ],
 *         },
 *         {
 *             typeName: "ORG",
 *             intervalMin: 5,
 *             delayMin: 0,
 *             smsEnabled: true,
 *             emailEnabled: false,
 *         },
 *     ],
 *     matchers: [{
 *         fieldName: "HOSTNAME_AND_PORT",
 *         operator: "EQUALS",
 *         value: "SECONDARY",
 *     }],
 *     metricThresholdConfig: {
 *         metricName: "ASSERT_REGULAR",
 *         operator: "LESS_THAN",
 *         threshold: 99,
 *         units: "RAW",
 *         mode: "AVERAGE",
 *     },
 * });
 * ```
 *
 * ### Create third party notification using credentials from existing third party integration
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = mongodbatlas.getThirdPartyIntegration({
 *     projectId: "PROJECT ID",
 *     type: "PAGER_DUTY",
 * });
 * const testAlertConfiguration = new mongodbatlas.AlertConfiguration("test", {
 *     projectId: "PROJECT ID",
 *     enabled: true,
 *     eventType: "USERS_WITHOUT_MULTI_FACTOR_AUTH",
 *     notifications: [{
 *         typeName: "PAGER_DUTY",
 *         integrationId: test.then(test => test.id),
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * Alert Configuration can be imported using the `project_id-alert_configuration_id`, e.g.
 *
 * ```sh
 * $ pulumi import mongodbatlas:index/alertConfiguration:AlertConfiguration test 5d0f1f74cf09a29120e123cd-5d0f1f74cf09a29120e1fscg
 * ```
 *
 * **NOTE**: Third-party notifications will not contain their respective credentials as these are sensitive attributes. If you wish to perform updates on these notifications without providing the original credentials, the corresponding `notifier_id` attribute must be provided instead.
 *
 * For more information see: [MongoDB Atlas API Reference.](https://docs.atlas.mongodb.com/reference/api/alert-configurations/)
 */
class AlertConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing AlertConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new AlertConfiguration(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of AlertConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AlertConfiguration.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["alertConfigurationId"] = state ? state.alertConfigurationId : undefined;
            resourceInputs["created"] = state ? state.created : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["eventType"] = state ? state.eventType : undefined;
            resourceInputs["matchers"] = state ? state.matchers : undefined;
            resourceInputs["metricThresholdConfig"] = state ? state.metricThresholdConfig : undefined;
            resourceInputs["notifications"] = state ? state.notifications : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["thresholdConfig"] = state ? state.thresholdConfig : undefined;
            resourceInputs["updated"] = state ? state.updated : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.eventType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'eventType'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["eventType"] = args ? args.eventType : undefined;
            resourceInputs["matchers"] = args ? args.matchers : undefined;
            resourceInputs["metricThresholdConfig"] = args ? args.metricThresholdConfig : undefined;
            resourceInputs["notifications"] = args ? args.notifications : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["thresholdConfig"] = args ? args.thresholdConfig : undefined;
            resourceInputs["alertConfigurationId"] = undefined /*out*/;
            resourceInputs["created"] = undefined /*out*/;
            resourceInputs["updated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AlertConfiguration.__pulumiType, name, resourceInputs, opts);
    }
}
exports.AlertConfiguration = AlertConfiguration;
/** @internal */
AlertConfiguration.__pulumiType = 'mongodbatlas:index/alertConfiguration:AlertConfiguration';
//# sourceMappingURL=alertConfiguration.js.map