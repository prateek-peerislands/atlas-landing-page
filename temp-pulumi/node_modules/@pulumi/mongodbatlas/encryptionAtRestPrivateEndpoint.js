"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.EncryptionAtRestPrivateEndpoint = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * ## # Resource: mongodbatlas.EncryptionAtRestPrivateEndpoint
 *
 * `mongodbatlas.EncryptionAtRestPrivateEndpoint` provides a resource for managing a private endpoint used for encryption at rest with customer-managed keys. This ensures all traffic between Atlas and customer key management systems take place over private network interfaces.
 *
 * > **NOTE:** As a prerequisite to configuring a private endpoint for Azure Key Vault or AWS KMS, the corresponding `mongodbatlas.EncryptionAtRest` resource has to be adjusted by configuring to true `azure_key_vault_config.require_private_networking` or `aws_kms_config.require_private_networking`, respectively. This attribute should be updated in place, ensuring the customer-managed keys encryption is never disabled.
 *
 * > **NOTE:** This resource does not support update operations. To modify values of a private endpoint the existing resource must be deleted and a new one can be created with the modified values.
 *
 * ## Example Usage
 *
 * ### S
 *
 * > **NOTE:** Only Azure Key Vault with Azure Private Link and AWS KMS over AWS PrivateLink is supported at this time.
 *
 * ### Configuring Atlas Encryption at Rest using Azure Key Vault with Azure Private Link
 * To learn more about existing limitations, see [Manage Customer Keys with Azure Key Vault Over Private Endpoints](https://www.mongodb.com/docs/atlas/security/azure-kms-over-private-endpoint/#manage-customer-keys-with-azure-key-vault-over-private-endpoints).
 *
 * Make sure to reference the complete example section for detailed steps and considerations.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azapi from "@pulumi/azapi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const ear = new mongodbatlas.EncryptionAtRest("ear", {
 *     projectId: atlasProjectId,
 *     azureKeyVaultConfig: {
 *         requirePrivateNetworking: true,
 *         enabled: true,
 *         azureEnvironment: "AZURE",
 *         tenantId: azureTenantId,
 *         subscriptionId: azureSubscriptionId,
 *         clientId: azureClientId,
 *         secret: azureClientSecret,
 *         resourceGroupName: azureResourceGroupName,
 *         keyVaultName: azureKeyVaultName,
 *         keyIdentifier: azureKeyIdentifier,
 *     },
 * });
 * // Creates private endpoint
 * const endpoint = new mongodbatlas.EncryptionAtRestPrivateEndpoint("endpoint", {
 *     projectId: ear.projectId,
 *     cloudProvider: "AZURE",
 *     regionName: azureRegionName,
 * });
 * const keyVaultResourceId = `/subscriptions/${azureSubscriptionId}/resourceGroups/${azureResourceGroupName}/providers/Microsoft.KeyVault/vaults/${azureKeyVaultName}`;
 * // Approves private endpoint connection from Azure Key Vault
 * const approval = new azapi.index.UpdateResource("approval", {
 *     type: "Microsoft.KeyVault/Vaults/PrivateEndpointConnections@2023-07-01",
 *     name: endpoint.privateEndpointConnectionName,
 *     parentId: keyVaultResourceId,
 *     body: JSON.stringify({
 *         properties: {
 *             privateLinkServiceConnectionState: {
 *                 description: "Approved via Terraform",
 *                 status: "Approved",
 *             },
 *         },
 *     }),
 * });
 * ```
 *
 * ### Configuring Atlas Encryption at Rest using AWS KMS with AWS PrivateLink
 *
 * Make sure to reference the complete example section for detailed steps and considerations.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const ear = new mongodbatlas.EncryptionAtRest("ear", {
 *     projectId: atlasProjectId,
 *     awsKmsConfig: {
 *         requirePrivateNetworking: true,
 *         enabled: true,
 *         customerMasterKeyId: awsKmsKeyId,
 *         region: atlasAwsRegion,
 *         roleId: authRole.roleId,
 *     },
 * });
 * // Creates private endpoint
 * const endpoint = new mongodbatlas.EncryptionAtRestPrivateEndpoint("endpoint", {
 *     projectId: ear.projectId,
 *     cloudProvider: "AWS",
 *     regionName: atlasAwsRegion,
 * });
 * ```
 *
 * ## Import
 *
 * Encryption At Rest Private Endpoint resource can be imported using the project ID, cloud provider, and private endpoint ID. The format must be `{project_id}-{cloud_provider}-{private_endpoint_id}` e.g.
 *
 * For more information see:
 * - [MongoDB Atlas API - Private Endpoint for Encryption at Rest Using Customer Key Management](https://www.mongodb.com/docs/api/doc/atlas-admin-api-v2/operation/operation-getencryptionatrestprivateendpoint) Documentation.
 * - [Manage Customer Keys with Azure Key Vault Over Private Endpoints](https://www.mongodb.com/docs/atlas/security/azure-kms-over-private-endpoint/).
 */
class EncryptionAtRestPrivateEndpoint extends pulumi.CustomResource {
    /**
     * Get an existing EncryptionAtRestPrivateEndpoint resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new EncryptionAtRestPrivateEndpoint(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of EncryptionAtRestPrivateEndpoint.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EncryptionAtRestPrivateEndpoint.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["cloudProvider"] = state ? state.cloudProvider : undefined;
            resourceInputs["errorMessage"] = state ? state.errorMessage : undefined;
            resourceInputs["privateEndpointConnectionName"] = state ? state.privateEndpointConnectionName : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["regionName"] = state ? state.regionName : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.cloudProvider === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cloudProvider'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.regionName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'regionName'");
            }
            resourceInputs["cloudProvider"] = args ? args.cloudProvider : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["regionName"] = args ? args.regionName : undefined;
            resourceInputs["errorMessage"] = undefined /*out*/;
            resourceInputs["privateEndpointConnectionName"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EncryptionAtRestPrivateEndpoint.__pulumiType, name, resourceInputs, opts);
    }
}
exports.EncryptionAtRestPrivateEndpoint = EncryptionAtRestPrivateEndpoint;
/** @internal */
EncryptionAtRestPrivateEndpoint.__pulumiType = 'mongodbatlas:index/encryptionAtRestPrivateEndpoint:EncryptionAtRestPrivateEndpoint';
//# sourceMappingURL=encryptionAtRestPrivateEndpoint.js.map