"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.getLdapConfigurationOutput = exports.getLdapConfiguration = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * ## # Data Source: mongodbatlas.LdapConfiguration
 *
 * `mongodbatlas.LdapConfiguration` describes a LDAP Configuration.
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const testProject = new mongodbatlas.Project("test", {
 *     name: "NAME OF THE PROJECT",
 *     orgId: "ORG ID",
 * });
 * const testLdapConfiguration = new mongodbatlas.LdapConfiguration("test", {
 *     projectId: testProject.id,
 *     authenticationEnabled: true,
 *     hostname: "HOSTNAME",
 *     port: 636,
 *     bindUsername: "USERNAME",
 *     bindPassword: "PASSWORD",
 * });
 * const test = mongodbatlas.getLdapConfigurationOutput({
 *     projectId: testLdapConfiguration.id,
 * });
 * ```
 */
function getLdapConfiguration(args, opts) {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("mongodbatlas:index/getLdapConfiguration:getLdapConfiguration", {
        "projectId": args.projectId,
    }, opts);
}
exports.getLdapConfiguration = getLdapConfiguration;
/**
 * ## # Data Source: mongodbatlas.LdapConfiguration
 *
 * `mongodbatlas.LdapConfiguration` describes a LDAP Configuration.
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const testProject = new mongodbatlas.Project("test", {
 *     name: "NAME OF THE PROJECT",
 *     orgId: "ORG ID",
 * });
 * const testLdapConfiguration = new mongodbatlas.LdapConfiguration("test", {
 *     projectId: testProject.id,
 *     authenticationEnabled: true,
 *     hostname: "HOSTNAME",
 *     port: 636,
 *     bindUsername: "USERNAME",
 *     bindPassword: "PASSWORD",
 * });
 * const test = mongodbatlas.getLdapConfigurationOutput({
 *     projectId: testLdapConfiguration.id,
 * });
 * ```
 */
function getLdapConfigurationOutput(args, opts) {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("mongodbatlas:index/getLdapConfiguration:getLdapConfiguration", {
        "projectId": args.projectId,
    }, opts);
}
exports.getLdapConfigurationOutput = getLdapConfigurationOutput;
//# sourceMappingURL=getLdapConfiguration.js.map