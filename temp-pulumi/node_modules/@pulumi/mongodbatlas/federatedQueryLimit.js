"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.FederatedQueryLimit = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * ## # Resource: mongodbatlas.FederatedQueryLimit
 *
 * `mongodbatlas.FederatedQueryLimit` provides a Federated Database Instance Query Limits resource. To learn more about Atlas Data Federation see https://www.mongodb.com/docs/atlas/data-federation/overview/.
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find groupId in the official documentation.
 *
 * ## Example Usage
 *
 * ### S
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = new mongodbatlas.FederatedQueryLimit("test", {
 *     projectId: "64707f06c519c20c3a2b1b03",
 *     tenantName: "FederatedDatabseInstance0",
 *     limitName: "bytesProcessed.weekly",
 *     overrunPolicy: "BLOCK",
 *     value: 5147483648,
 * });
 * ```
 *
 * ## Import
 *
 * The Federated Database Instance Query Limit can be imported using project ID, name of the instance and limit name, in the format:
 * `project_id`--`tenant_name`--`limit_name`, e.g.
 *
 * ```sh
 * $ pulumi import mongodbatlas:index/federatedQueryLimit:FederatedQueryLimit example 1112222b3bf99403840e8934--FederatedDatabaseInstance0--bytesProcessed.daily
 * ```
 * See [MongoDB Atlas API](https://www.mongodb.com/docs/atlas/reference/api-resources-spec/#tag/Data-Federation/operation/createOneDataFederationQueryLimit) Documentation for more information.
 */
class FederatedQueryLimit extends pulumi.CustomResource {
    /**
     * Get an existing FederatedQueryLimit resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new FederatedQueryLimit(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of FederatedQueryLimit.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FederatedQueryLimit.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["currentUsage"] = state ? state.currentUsage : undefined;
            resourceInputs["defaultLimit"] = state ? state.defaultLimit : undefined;
            resourceInputs["lastModifiedDate"] = state ? state.lastModifiedDate : undefined;
            resourceInputs["limitName"] = state ? state.limitName : undefined;
            resourceInputs["maximumLimit"] = state ? state.maximumLimit : undefined;
            resourceInputs["overrunPolicy"] = state ? state.overrunPolicy : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["tenantName"] = state ? state.tenantName : undefined;
            resourceInputs["value"] = state ? state.value : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.limitName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'limitName'");
            }
            if ((!args || args.overrunPolicy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'overrunPolicy'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.tenantName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'tenantName'");
            }
            if ((!args || args.value === undefined) && !opts.urn) {
                throw new Error("Missing required property 'value'");
            }
            resourceInputs["defaultLimit"] = args ? args.defaultLimit : undefined;
            resourceInputs["limitName"] = args ? args.limitName : undefined;
            resourceInputs["maximumLimit"] = args ? args.maximumLimit : undefined;
            resourceInputs["overrunPolicy"] = args ? args.overrunPolicy : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["tenantName"] = args ? args.tenantName : undefined;
            resourceInputs["value"] = args ? args.value : undefined;
            resourceInputs["currentUsage"] = undefined /*out*/;
            resourceInputs["lastModifiedDate"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FederatedQueryLimit.__pulumiType, name, resourceInputs, opts);
    }
}
exports.FederatedQueryLimit = FederatedQueryLimit;
/** @internal */
FederatedQueryLimit.__pulumiType = 'mongodbatlas:index/federatedQueryLimit:FederatedQueryLimit';
//# sourceMappingURL=federatedQueryLimit.js.map