"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.PrivatelinkEndpointServiceServerless = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * **WARNING:** This resource is deprecated and will be removed in March 2025. For more datails see Migration Guide: Transition out of Serverless Instances and Shared-tier clusters
 *
 * `privatelinkEndpointServiceServerless` Provides a Serverless PrivateLink Endpoint Service resource.
 * This is the second of two resources required to configure PrivateLink for Serverless, the first is mongodbatlas_privatelink_endpoint_serverless.
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find groupId in the official documentation.
 * **NOTE:** Create waits for all serverless instances on the project to IDLE in order for their operations to complete. This ensures the latest connection strings can be retrieved following creation of this resource. Default timeout is 2hrs.
 *
 * ## Example with AWS
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const testServerlessInstance = new mongodbatlas.ServerlessInstance("test", {
 *     projectId: "<PROJECT_ID>",
 *     name: "test-db",
 *     providerSettingsBackingProviderName: "AWS",
 *     providerSettingsProviderName: "SERVERLESS",
 *     providerSettingsRegionName: "US_EAST_1",
 *     continuousBackupEnabled: true,
 * });
 * const test = new mongodbatlas.PrivatelinkEndpointServerless("test", {
 *     projectId: "<PROJECT_ID>",
 *     instanceName: testServerlessInstance.name,
 *     providerName: "AWS",
 * });
 * const ptfeService = new aws.index.VpcEndpoint("ptfe_service", {
 *     vpcId: "vpc-7fc0a543",
 *     serviceName: test.endpointServiceName,
 *     vpcEndpointType: "Interface",
 *     subnetIds: ["subnet-de0406d2"],
 *     securityGroupIds: ["sg-3f238186"],
 * });
 * const testPrivatelinkEndpointServiceServerless = new mongodbatlas.PrivatelinkEndpointServiceServerless("test", {
 *     projectId: "<PROJECT_ID>",
 *     instanceName: testServerlessInstance.name,
 *     endpointId: test.endpointId,
 *     cloudProviderEndpointId: ptfeService.id,
 *     providerName: "AWS",
 *     comment: "New serverless endpoint",
 * });
 * ```
 *
 * ## Example with AZURE
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azurerm from "@pulumi/azurerm";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = new mongodbatlas.PrivatelinkEndpointServerless("test", {
 *     projectId: projectId,
 *     providerName: "AZURE",
 * });
 * const testPrivateEndpoint = new azurerm.index.PrivateEndpoint("test", {
 *     name: "endpoint-test",
 *     location: testAzurermResourceGroup.location,
 *     resourceGroupName: resourceGroupName,
 *     subnetId: testAzurermSubnet.id,
 *     privateServiceConnection: [{
 *         name: test.privateLinkServiceName,
 *         privateConnectionResourceId: test.privateLinkServiceResourceId,
 *         isManualConnection: true,
 *         requestMessage: "Azure Private Link test",
 *     }],
 * });
 * const testServerlessInstance = new mongodbatlas.ServerlessInstance("test", {
 *     projectId: "<PROJECT_ID>",
 *     name: "test-db",
 *     providerSettingsBackingProviderName: "AZURE",
 *     providerSettingsProviderName: "SERVERLESS",
 *     providerSettingsRegionName: "US_EAST",
 *     continuousBackupEnabled: true,
 * });
 * const testPrivatelinkEndpointServiceServerless = new mongodbatlas.PrivatelinkEndpointServiceServerless("test", {
 *     projectId: test.projectId,
 *     instanceName: testServerlessInstance.name,
 *     endpointId: test.endpointId,
 *     cloudProviderEndpointId: testPrivateEndpoint.id,
 *     privateEndpointIpAddress: testPrivateEndpoint.privateServiceConnection[0].privateIpAddress,
 *     providerName: "AZURE",
 *     comment: "test",
 * });
 * ```
 *
 * ### Available complete examples
 * - Setup private connection to a MongoDB Atlas Serverless Instance with AWS VPC
 *
 * ## Import
 *
 * Serverless privatelink endpoint can be imported using project ID and endpoint ID, in the format `project_id`--`endpoint_id`, e.g.
 *
 * ```sh
 * $ pulumi import mongodbatlas:index/privatelinkEndpointServiceServerless:PrivatelinkEndpointServiceServerless test 1112222b3bf99403840e8934--serverless_name--vpce-jjg5e24qp93513h03
 * ```
 * For more information see: [MongoDB Atlas API - Serverless Private Endpoints](https://www.mongodb.com/docs/atlas/reference/api/serverless-private-endpoints-get-one/).
 */
class PrivatelinkEndpointServiceServerless extends pulumi.CustomResource {
    /**
     * Get an existing PrivatelinkEndpointServiceServerless resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new PrivatelinkEndpointServiceServerless(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of PrivatelinkEndpointServiceServerless.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PrivatelinkEndpointServiceServerless.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["cloudProviderEndpointId"] = state ? state.cloudProviderEndpointId : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["endpointId"] = state ? state.endpointId : undefined;
            resourceInputs["instanceName"] = state ? state.instanceName : undefined;
            resourceInputs["privateEndpointIpAddress"] = state ? state.privateEndpointIpAddress : undefined;
            resourceInputs["privateLinkServiceResourceId"] = state ? state.privateLinkServiceResourceId : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["providerName"] = state ? state.providerName : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.endpointId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'endpointId'");
            }
            if ((!args || args.instanceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceName'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.providerName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'providerName'");
            }
            resourceInputs["cloudProviderEndpointId"] = args ? args.cloudProviderEndpointId : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["endpointId"] = args ? args.endpointId : undefined;
            resourceInputs["instanceName"] = args ? args.instanceName : undefined;
            resourceInputs["privateEndpointIpAddress"] = args ? args.privateEndpointIpAddress : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["providerName"] = args ? args.providerName : undefined;
            resourceInputs["privateLinkServiceResourceId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PrivatelinkEndpointServiceServerless.__pulumiType, name, resourceInputs, opts);
    }
}
exports.PrivatelinkEndpointServiceServerless = PrivatelinkEndpointServiceServerless;
/** @internal */
PrivatelinkEndpointServiceServerless.__pulumiType = 'mongodbatlas:index/privatelinkEndpointServiceServerless:PrivatelinkEndpointServiceServerless';
//# sourceMappingURL=privatelinkEndpointServiceServerless.js.map