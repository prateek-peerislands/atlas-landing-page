"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.getProjectOutput = exports.getProject = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * ## # Data Source: mongodbatlas.Project
 *
 * `mongodbatlas.Project` describes a MongoDB Atlas Project. This represents a project that has been created.
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find groupId in the official documentation.
 *
 * ## Example Usage
 *
 * ### Using projectId attribute to query
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = mongodbatlas.getRolesOrgId({});
 * const testProject = new mongodbatlas.Project("test", {
 *     name: "project-name",
 *     orgId: test.then(test => test.orgId),
 *     teams: [
 *         {
 *             teamId: "5e0fa8c99ccf641c722fe645",
 *             roleNames: ["GROUP_OWNER"],
 *         },
 *         {
 *             teamId: "5e1dd7b4f2a30ba80a70cd4rw",
 *             roleNames: [
 *                 "GROUP_READ_ONLY",
 *                 "GROUP_DATA_ACCESS_READ_WRITE",
 *             ],
 *         },
 *     ],
 *     limits: [{
 *         name: "atlas.project.deployment.clusters",
 *         value: 26,
 *     }],
 * });
 * const testGetProject = mongodbatlas.getProjectOutput({
 *     projectId: testProject.id,
 * });
 * ```
 *
 * ### Using name attribute to query
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const testProject = new mongodbatlas.Project("test", {
 *     name: "project-name",
 *     orgId: "<ORG_ID>",
 *     teams: [
 *         {
 *             teamId: "5e0fa8c99ccf641c722fe645",
 *             roleNames: ["GROUP_OWNER"],
 *         },
 *         {
 *             teamId: "5e1dd7b4f2a30ba80a70cd4rw",
 *             roleNames: [
 *                 "GROUP_READ_ONLY",
 *                 "GROUP_DATA_ACCESS_READ_WRITE",
 *             ],
 *         },
 *     ],
 *     limits: [{
 *         name: "atlas.project.deployment.clusters",
 *         value: 26,
 *     }],
 * });
 * const test = mongodbatlas.getProjectOutput({
 *     name: testProject.name,
 * });
 * ```
 */
function getProject(args, opts) {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("mongodbatlas:index/getProject:getProject", {
        "name": args.name,
        "projectId": args.projectId,
    }, opts);
}
exports.getProject = getProject;
/**
 * ## # Data Source: mongodbatlas.Project
 *
 * `mongodbatlas.Project` describes a MongoDB Atlas Project. This represents a project that has been created.
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find groupId in the official documentation.
 *
 * ## Example Usage
 *
 * ### Using projectId attribute to query
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = mongodbatlas.getRolesOrgId({});
 * const testProject = new mongodbatlas.Project("test", {
 *     name: "project-name",
 *     orgId: test.then(test => test.orgId),
 *     teams: [
 *         {
 *             teamId: "5e0fa8c99ccf641c722fe645",
 *             roleNames: ["GROUP_OWNER"],
 *         },
 *         {
 *             teamId: "5e1dd7b4f2a30ba80a70cd4rw",
 *             roleNames: [
 *                 "GROUP_READ_ONLY",
 *                 "GROUP_DATA_ACCESS_READ_WRITE",
 *             ],
 *         },
 *     ],
 *     limits: [{
 *         name: "atlas.project.deployment.clusters",
 *         value: 26,
 *     }],
 * });
 * const testGetProject = mongodbatlas.getProjectOutput({
 *     projectId: testProject.id,
 * });
 * ```
 *
 * ### Using name attribute to query
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const testProject = new mongodbatlas.Project("test", {
 *     name: "project-name",
 *     orgId: "<ORG_ID>",
 *     teams: [
 *         {
 *             teamId: "5e0fa8c99ccf641c722fe645",
 *             roleNames: ["GROUP_OWNER"],
 *         },
 *         {
 *             teamId: "5e1dd7b4f2a30ba80a70cd4rw",
 *             roleNames: [
 *                 "GROUP_READ_ONLY",
 *                 "GROUP_DATA_ACCESS_READ_WRITE",
 *             ],
 *         },
 *     ],
 *     limits: [{
 *         name: "atlas.project.deployment.clusters",
 *         value: 26,
 *     }],
 * });
 * const test = mongodbatlas.getProjectOutput({
 *     name: testProject.name,
 * });
 * ```
 */
function getProjectOutput(args, opts) {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("mongodbatlas:index/getProject:getProject", {
        "name": args.name,
        "projectId": args.projectId,
    }, opts);
}
exports.getProjectOutput = getProjectOutput;
//# sourceMappingURL=getProject.js.map