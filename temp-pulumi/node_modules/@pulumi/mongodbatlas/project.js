"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Project = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * ## # Resource: mongodbatlas.Project
 *
 * `mongodbatlas.Project` provides a Project resource. This allows project to be created.
 *
 * > **NOTE:** If Backup Compliance Policy is enabled for the project for which this backup schedule is defined, you cannot delete the Atlas project if any snapshots exist.  See [Backup Compliance Policy Prohibited Actions and Considerations](https://www.mongodb.com/docs/atlas/backup/cloud-backup/backup-compliance-policy/#configure-a-backup-compliance-policy).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = mongodbatlas.getRolesOrgId({});
 * const testProject = new mongodbatlas.Project("test", {
 *     name: "project-name",
 *     orgId: test.then(test => test.orgId),
 *     projectOwnerId: "<OWNER_ACCOUNT_ID>",
 *     teams: [
 *         {
 *             teamId: "5e0fa8c99ccf641c722fe645",
 *             roleNames: ["GROUP_OWNER"],
 *         },
 *         {
 *             teamId: "5e1dd7b4f2a30ba80a70cd4rw",
 *             roleNames: [
 *                 "GROUP_READ_ONLY",
 *                 "GROUP_DATA_ACCESS_READ_WRITE",
 *             ],
 *         },
 *     ],
 *     limits: [
 *         {
 *             name: "atlas.project.deployment.clusters",
 *             value: 26,
 *         },
 *         {
 *             name: "atlas.project.deployment.nodesPerPrivateLinkRegion",
 *             value: 51,
 *         },
 *     ],
 *     isCollectDatabaseSpecificsStatisticsEnabled: true,
 *     isDataExplorerEnabled: true,
 *     isExtendedStorageSizesEnabled: true,
 *     isPerformanceAdvisorEnabled: true,
 *     isRealtimePerformancePanelEnabled: true,
 *     isSchemaAdvisorEnabled: true,
 *     isSlowOperationThresholdingEnabled: true,
 * });
 * ```
 *
 * ## Import
 *
 * Project must be imported using project ID, e.g.
 *
 * ```sh
 * $ pulumi import mongodbatlas:index/project:Project my_project 5d09d6a59ccf6445652a444a
 * ```
 * For more information see: [MongoDB Atlas Admin API Projects](https://www.mongodb.com/docs/atlas/reference/api-resources-spec/#tag/Projects) and [MongoDB Atlas Admin API Teams](https://docs.atlas.mongodb.com/reference/api/teams/) Documentation for more information.
 */
class Project extends pulumi.CustomResource {
    /**
     * Get an existing Project resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Project(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Project.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Project.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["clusterCount"] = state ? state.clusterCount : undefined;
            resourceInputs["created"] = state ? state.created : undefined;
            resourceInputs["ipAddresses"] = state ? state.ipAddresses : undefined;
            resourceInputs["isCollectDatabaseSpecificsStatisticsEnabled"] = state ? state.isCollectDatabaseSpecificsStatisticsEnabled : undefined;
            resourceInputs["isDataExplorerEnabled"] = state ? state.isDataExplorerEnabled : undefined;
            resourceInputs["isExtendedStorageSizesEnabled"] = state ? state.isExtendedStorageSizesEnabled : undefined;
            resourceInputs["isPerformanceAdvisorEnabled"] = state ? state.isPerformanceAdvisorEnabled : undefined;
            resourceInputs["isRealtimePerformancePanelEnabled"] = state ? state.isRealtimePerformancePanelEnabled : undefined;
            resourceInputs["isSchemaAdvisorEnabled"] = state ? state.isSchemaAdvisorEnabled : undefined;
            resourceInputs["isSlowOperationThresholdingEnabled"] = state ? state.isSlowOperationThresholdingEnabled : undefined;
            resourceInputs["limits"] = state ? state.limits : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["orgId"] = state ? state.orgId : undefined;
            resourceInputs["projectOwnerId"] = state ? state.projectOwnerId : undefined;
            resourceInputs["regionUsageRestrictions"] = state ? state.regionUsageRestrictions : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["teams"] = state ? state.teams : undefined;
            resourceInputs["withDefaultAlertsSettings"] = state ? state.withDefaultAlertsSettings : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.orgId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'orgId'");
            }
            resourceInputs["isCollectDatabaseSpecificsStatisticsEnabled"] = args ? args.isCollectDatabaseSpecificsStatisticsEnabled : undefined;
            resourceInputs["isDataExplorerEnabled"] = args ? args.isDataExplorerEnabled : undefined;
            resourceInputs["isExtendedStorageSizesEnabled"] = args ? args.isExtendedStorageSizesEnabled : undefined;
            resourceInputs["isPerformanceAdvisorEnabled"] = args ? args.isPerformanceAdvisorEnabled : undefined;
            resourceInputs["isRealtimePerformancePanelEnabled"] = args ? args.isRealtimePerformancePanelEnabled : undefined;
            resourceInputs["isSchemaAdvisorEnabled"] = args ? args.isSchemaAdvisorEnabled : undefined;
            resourceInputs["isSlowOperationThresholdingEnabled"] = args ? args.isSlowOperationThresholdingEnabled : undefined;
            resourceInputs["limits"] = args ? args.limits : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["orgId"] = args ? args.orgId : undefined;
            resourceInputs["projectOwnerId"] = args ? args.projectOwnerId : undefined;
            resourceInputs["regionUsageRestrictions"] = args ? args.regionUsageRestrictions : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["teams"] = args ? args.teams : undefined;
            resourceInputs["withDefaultAlertsSettings"] = args ? args.withDefaultAlertsSettings : undefined;
            resourceInputs["clusterCount"] = undefined /*out*/;
            resourceInputs["created"] = undefined /*out*/;
            resourceInputs["ipAddresses"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Project.__pulumiType, name, resourceInputs, opts);
    }
}
exports.Project = Project;
/** @internal */
Project.__pulumiType = 'mongodbatlas:index/project:Project';
//# sourceMappingURL=project.js.map