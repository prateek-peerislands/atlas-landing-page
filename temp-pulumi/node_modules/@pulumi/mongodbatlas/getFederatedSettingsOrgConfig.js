"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.getFederatedSettingsOrgConfigOutput = exports.getFederatedSettingsOrgConfig = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * ## # Data Source: mongodbatlas.FederatedSettingsOrgConfig
 *
 * `mongodbatlas.FederatedSettingsOrgConfig` provides an Federated Settings Identity Providers datasource. Atlas Cloud Federated Settings Organizational configuration provides federated settings outputs for the configured Organizational configuration.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const orgConnection = new mongodbatlas.FederatedSettingsOrgConfig("org_connection", {
 *     federationSettingsId: "627a9687f7f7f7f774de306f14",
 *     orgId: "627a9683ea7ff7f74de306f14",
 *     dataAccessIdentityProviderIds: ["64d613677e1ad50839cce4db"],
 *     domainRestrictionEnabled: false,
 *     domainAllowLists: ["mydomain.com"],
 *     postAuthRoleGrants: ["ORG_MEMBER"],
 *     identityProviderId: "0oaqyt9fc2ySTWnA0357",
 * });
 * const orgConfigsDs = mongodbatlas.getFederatedSettingsOrgConfig({
 *     federationSettingsId: orgConnectionMongodbatlasFederatedSettingsOrgConfig.id,
 *     orgId: "627a9683ea7ff7f74de306f14",
 * });
 * ```
 */
function getFederatedSettingsOrgConfig(args, opts) {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("mongodbatlas:index/getFederatedSettingsOrgConfig:getFederatedSettingsOrgConfig", {
        "federationSettingsId": args.federationSettingsId,
        "orgId": args.orgId,
    }, opts);
}
exports.getFederatedSettingsOrgConfig = getFederatedSettingsOrgConfig;
/**
 * ## # Data Source: mongodbatlas.FederatedSettingsOrgConfig
 *
 * `mongodbatlas.FederatedSettingsOrgConfig` provides an Federated Settings Identity Providers datasource. Atlas Cloud Federated Settings Organizational configuration provides federated settings outputs for the configured Organizational configuration.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const orgConnection = new mongodbatlas.FederatedSettingsOrgConfig("org_connection", {
 *     federationSettingsId: "627a9687f7f7f7f774de306f14",
 *     orgId: "627a9683ea7ff7f74de306f14",
 *     dataAccessIdentityProviderIds: ["64d613677e1ad50839cce4db"],
 *     domainRestrictionEnabled: false,
 *     domainAllowLists: ["mydomain.com"],
 *     postAuthRoleGrants: ["ORG_MEMBER"],
 *     identityProviderId: "0oaqyt9fc2ySTWnA0357",
 * });
 * const orgConfigsDs = mongodbatlas.getFederatedSettingsOrgConfig({
 *     federationSettingsId: orgConnectionMongodbatlasFederatedSettingsOrgConfig.id,
 *     orgId: "627a9683ea7ff7f74de306f14",
 * });
 * ```
 */
function getFederatedSettingsOrgConfigOutput(args, opts) {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("mongodbatlas:index/getFederatedSettingsOrgConfig:getFederatedSettingsOrgConfig", {
        "federationSettingsId": args.federationSettingsId,
        "orgId": args.orgId,
    }, opts);
}
exports.getFederatedSettingsOrgConfigOutput = getFederatedSettingsOrgConfigOutput;
//# sourceMappingURL=getFederatedSettingsOrgConfig.js.map