"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.X509AuthenticationDatabaseUser = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * ## # Resource: mongodbatlas.X509AuthenticationDatabaseUser
 *
 * `mongodbatlas.X509AuthenticationDatabaseUser` provides a X509 Authentication Database User resource. The mongodbatlas.X509AuthenticationDatabaseUser resource lets you manage MongoDB users who authenticate using X.509 certificates. You can manage these X.509 certificates or let Atlas do it for you.
 *
 * | Management  | Description  |
 * |---|---|
 * | Atlas  | Atlas manages your Certificate Authority and can generate certificates for your MongoDB users. No additional X.509 configuration is required.  |
 * | Customer  |  You must provide a Certificate Authority and generate certificates for your MongoDB users. |
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find groupId in the official documentation.
 *
 * > **NOTE:** Before provider version 1.14.0, Self-managed X.509 Authentication was disabled for the project when this resource was deleted. Starting from that version onward, it will not be disabled, allowing other users to continue using X.509 within the same project.
 *
 * ## Example Usage
 *
 * ### S
 *
 * ## Import
 *
 * X.509 Certificates for a User can be imported using project ID and username, in the format `project_id-username`, e.g.
 *
 * ```sh
 * $ pulumi import mongodbatlas:index/x509AuthenticationDatabaseUser:X509AuthenticationDatabaseUser test 1112222b3bf99403840e8934-myUsername
 * ```
 * For more information see: [MongoDB Atlas API Reference.](https://docs.atlas.mongodb.com/reference/api/x509-configuration-get-certificates/)
 *
 * Current X.509 Configuration can be imported using project ID, in the format `project_id`, e.g.
 *
 * ```sh
 * $ pulumi import mongodbatlas:index/x509AuthenticationDatabaseUser:X509AuthenticationDatabaseUser test 1112222b3bf99403840e8934
 * ```
 * For more information see: [MongoDB Atlas API Reference.](https://docs.atlas.mongodb.com/reference/api/x509-configuration-get-certificates/)
 */
class X509AuthenticationDatabaseUser extends pulumi.CustomResource {
    /**
     * Get an existing X509AuthenticationDatabaseUser resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new X509AuthenticationDatabaseUser(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of X509AuthenticationDatabaseUser.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === X509AuthenticationDatabaseUser.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["certificates"] = state ? state.certificates : undefined;
            resourceInputs["currentCertificate"] = state ? state.currentCertificate : undefined;
            resourceInputs["customerX509Cas"] = state ? state.customerX509Cas : undefined;
            resourceInputs["monthsUntilExpiration"] = state ? state.monthsUntilExpiration : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["customerX509Cas"] = (args === null || args === void 0 ? void 0 : args.customerX509Cas) ? pulumi.secret(args.customerX509Cas) : undefined;
            resourceInputs["monthsUntilExpiration"] = args ? args.monthsUntilExpiration : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["certificates"] = undefined /*out*/;
            resourceInputs["currentCertificate"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["currentCertificate", "customerX509Cas"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(X509AuthenticationDatabaseUser.__pulumiType, name, resourceInputs, opts);
    }
}
exports.X509AuthenticationDatabaseUser = X509AuthenticationDatabaseUser;
/** @internal */
X509AuthenticationDatabaseUser.__pulumiType = 'mongodbatlas:index/x509AuthenticationDatabaseUser:X509AuthenticationDatabaseUser';
//# sourceMappingURL=x509authenticationDatabaseUser.js.map