"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.getFederatedDatabaseInstanceOutput = exports.getFederatedDatabaseInstance = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * ## # Data Source: mongodbatlas.FederatedDatabaseInstance
 *
 * `mongodbatlas.FederatedDatabaseInstance` provides a Federated Database Instance data source.
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find groupId in the official documentation.
 *
 * > **IMPORTANT:** All arguments including the password will be stored in the raw state as plain text. Read more about sensitive data in state.
 *
 * ## Example Usage
 *
 * ### S With MongoDB Atlas Cluster As Storage Database
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = mongodbatlas.getFederatedDatabaseInstance({
 *     projectId: "<PROJECT_ID>",
 *     name: "TENANT NAME OF THE FEDERATED DATABASE INSTANCE",
 * });
 * ```
 *
 * ## Example of Azure Blob Storage as storage database
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = mongodbatlas.getFederatedDatabaseInstance({
 *     projectId: "<PROJECT_ID>",
 *     name: "<TENANT_NAME_OF_THE_FEDERATED_DATABASE_INSTANCE>",
 *     cloudProviderConfig: {
 *         azures: [{
 *             roleId: "<AZURE_ROLE_ID>",
 *         }],
 *     },
 * });
 * ```
 */
function getFederatedDatabaseInstance(args, opts) {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("mongodbatlas:index/getFederatedDatabaseInstance:getFederatedDatabaseInstance", {
        "cloudProviderConfig": args.cloudProviderConfig,
        "name": args.name,
        "projectId": args.projectId,
    }, opts);
}
exports.getFederatedDatabaseInstance = getFederatedDatabaseInstance;
/**
 * ## # Data Source: mongodbatlas.FederatedDatabaseInstance
 *
 * `mongodbatlas.FederatedDatabaseInstance` provides a Federated Database Instance data source.
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find groupId in the official documentation.
 *
 * > **IMPORTANT:** All arguments including the password will be stored in the raw state as plain text. Read more about sensitive data in state.
 *
 * ## Example Usage
 *
 * ### S With MongoDB Atlas Cluster As Storage Database
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = mongodbatlas.getFederatedDatabaseInstance({
 *     projectId: "<PROJECT_ID>",
 *     name: "TENANT NAME OF THE FEDERATED DATABASE INSTANCE",
 * });
 * ```
 *
 * ## Example of Azure Blob Storage as storage database
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = mongodbatlas.getFederatedDatabaseInstance({
 *     projectId: "<PROJECT_ID>",
 *     name: "<TENANT_NAME_OF_THE_FEDERATED_DATABASE_INSTANCE>",
 *     cloudProviderConfig: {
 *         azures: [{
 *             roleId: "<AZURE_ROLE_ID>",
 *         }],
 *     },
 * });
 * ```
 */
function getFederatedDatabaseInstanceOutput(args, opts) {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("mongodbatlas:index/getFederatedDatabaseInstance:getFederatedDatabaseInstance", {
        "cloudProviderConfig": args.cloudProviderConfig,
        "name": args.name,
        "projectId": args.projectId,
    }, opts);
}
exports.getFederatedDatabaseInstanceOutput = getFederatedDatabaseInstanceOutput;
//# sourceMappingURL=getFederatedDatabaseInstance.js.map