"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAlertConfigurationsOutput = exports.getAlertConfigurations = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * ## # Data Source: mongodbatlas.getAlertConfigurations
 *
 * `mongodbatlas.getAlertConfigurations` describes all Alert Configurations by the provided project_id. The data source requires your Project ID.
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find groupId in the official documentation.
 */
function getAlertConfigurations(args, opts) {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("mongodbatlas:index/getAlertConfigurations:getAlertConfigurations", {
        "listOptions": args.listOptions,
        "outputTypes": args.outputTypes,
        "projectId": args.projectId,
    }, opts);
}
exports.getAlertConfigurations = getAlertConfigurations;
/**
 * ## # Data Source: mongodbatlas.getAlertConfigurations
 *
 * `mongodbatlas.getAlertConfigurations` describes all Alert Configurations by the provided project_id. The data source requires your Project ID.
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find groupId in the official documentation.
 */
function getAlertConfigurationsOutput(args, opts) {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("mongodbatlas:index/getAlertConfigurations:getAlertConfigurations", {
        "listOptions": args.listOptions,
        "outputTypes": args.outputTypes,
        "projectId": args.projectId,
    }, opts);
}
exports.getAlertConfigurationsOutput = getAlertConfigurationsOutput;
//# sourceMappingURL=getAlertConfigurations.js.map