"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProjectApiKey = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * ## Example Usage
 *
 * ### Create And Assign PAK Together
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = new mongodbatlas.ProjectApiKey("test", {
 *     description: "Description of your API key",
 *     projectAssignments: [{
 *         projectId: "64259ee860c43338194b0f8e",
 *         roleNames: ["GROUP_OWNER"],
 *     }],
 * });
 * ```
 *
 * ### Create And Assign PAK To Multiple Projects
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = new mongodbatlas.ProjectApiKey("test", {
 *     description: "Description of your API key",
 *     projectAssignments: [
 *         {
 *             projectId: "64259ee860c43338194b0f8e",
 *             roleNames: [
 *                 "GROUP_READ_ONLY",
 *                 "GROUP_OWNER",
 *             ],
 *         },
 *         {
 *             projectId: "74259ee860c43338194b0f8e",
 *             roleNames: ["GROUP_READ_ONLY"],
 *         },
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * API Keys must be imported using project ID, API Key ID e.g.
 *
 * ```sh
 * $ pulumi import mongodbatlas:index/projectApiKey:ProjectApiKey test 5d09d6a59ccf6445652a444a-6576974933969669
 * ```
 * See [MongoDB Atlas API - API Key](https://www.mongodb.com/docs/atlas/reference/api-resources-spec/#tag/Programmatic-API-Keys/operation/createProjectApiKey) - Documentation for more information.
 */
class ProjectApiKey extends pulumi.CustomResource {
    /**
     * Get an existing ProjectApiKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ProjectApiKey(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ProjectApiKey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProjectApiKey.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["apiKeyId"] = state ? state.apiKeyId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["privateKey"] = state ? state.privateKey : undefined;
            resourceInputs["projectAssignments"] = state ? state.projectAssignments : undefined;
            resourceInputs["publicKey"] = state ? state.publicKey : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.projectAssignments === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectAssignments'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["projectAssignments"] = args ? args.projectAssignments : undefined;
            resourceInputs["apiKeyId"] = undefined /*out*/;
            resourceInputs["privateKey"] = undefined /*out*/;
            resourceInputs["publicKey"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["privateKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ProjectApiKey.__pulumiType, name, resourceInputs, opts);
    }
}
exports.ProjectApiKey = ProjectApiKey;
/** @internal */
ProjectApiKey.__pulumiType = 'mongodbatlas:index/projectApiKey:ProjectApiKey';
//# sourceMappingURL=projectApiKey.js.map