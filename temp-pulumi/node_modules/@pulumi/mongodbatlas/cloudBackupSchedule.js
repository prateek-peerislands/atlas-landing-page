"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.CloudBackupSchedule = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * ## Import
 *
 * Cloud Backup Schedule entries can be imported using project_id and cluster_name, in the format `PROJECTID-CLUSTERNAME`, e.g.
 *
 * ```sh
 * $ pulumi import mongodbatlas:index/cloudBackupSchedule:CloudBackupSchedule test 5d0f1f73cf09a29120e173cf-MyClusterTest
 * ```
 * For more information see: [MongoDB Atlas API Reference.](https://docs.atlas.mongodb.com/reference/api/cloud-backup/schedule/modify-one-schedule/)
 */
class CloudBackupSchedule extends pulumi.CustomResource {
    /**
     * Get an existing CloudBackupSchedule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new CloudBackupSchedule(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of CloudBackupSchedule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CloudBackupSchedule.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["autoExportEnabled"] = state ? state.autoExportEnabled : undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["clusterName"] = state ? state.clusterName : undefined;
            resourceInputs["copySettings"] = state ? state.copySettings : undefined;
            resourceInputs["export"] = state ? state.export : undefined;
            resourceInputs["idPolicy"] = state ? state.idPolicy : undefined;
            resourceInputs["nextSnapshot"] = state ? state.nextSnapshot : undefined;
            resourceInputs["policyItemDaily"] = state ? state.policyItemDaily : undefined;
            resourceInputs["policyItemHourly"] = state ? state.policyItemHourly : undefined;
            resourceInputs["policyItemMonthlies"] = state ? state.policyItemMonthlies : undefined;
            resourceInputs["policyItemWeeklies"] = state ? state.policyItemWeeklies : undefined;
            resourceInputs["policyItemYearlies"] = state ? state.policyItemYearlies : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["referenceHourOfDay"] = state ? state.referenceHourOfDay : undefined;
            resourceInputs["referenceMinuteOfHour"] = state ? state.referenceMinuteOfHour : undefined;
            resourceInputs["restoreWindowDays"] = state ? state.restoreWindowDays : undefined;
            resourceInputs["updateSnapshots"] = state ? state.updateSnapshots : undefined;
            resourceInputs["useOrgAndGroupNamesInExportPrefix"] = state ? state.useOrgAndGroupNamesInExportPrefix : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.clusterName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterName'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["autoExportEnabled"] = args ? args.autoExportEnabled : undefined;
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["copySettings"] = args ? args.copySettings : undefined;
            resourceInputs["export"] = args ? args.export : undefined;
            resourceInputs["policyItemDaily"] = args ? args.policyItemDaily : undefined;
            resourceInputs["policyItemHourly"] = args ? args.policyItemHourly : undefined;
            resourceInputs["policyItemMonthlies"] = args ? args.policyItemMonthlies : undefined;
            resourceInputs["policyItemWeeklies"] = args ? args.policyItemWeeklies : undefined;
            resourceInputs["policyItemYearlies"] = args ? args.policyItemYearlies : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["referenceHourOfDay"] = args ? args.referenceHourOfDay : undefined;
            resourceInputs["referenceMinuteOfHour"] = args ? args.referenceMinuteOfHour : undefined;
            resourceInputs["restoreWindowDays"] = args ? args.restoreWindowDays : undefined;
            resourceInputs["updateSnapshots"] = args ? args.updateSnapshots : undefined;
            resourceInputs["useOrgAndGroupNamesInExportPrefix"] = args ? args.useOrgAndGroupNamesInExportPrefix : undefined;
            resourceInputs["clusterId"] = undefined /*out*/;
            resourceInputs["idPolicy"] = undefined /*out*/;
            resourceInputs["nextSnapshot"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CloudBackupSchedule.__pulumiType, name, resourceInputs, opts);
    }
}
exports.CloudBackupSchedule = CloudBackupSchedule;
/** @internal */
CloudBackupSchedule.__pulumiType = 'mongodbatlas:index/cloudBackupSchedule:CloudBackupSchedule';
//# sourceMappingURL=cloudBackupSchedule.js.map