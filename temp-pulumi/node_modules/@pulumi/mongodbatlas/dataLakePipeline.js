"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataLakePipeline = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * **WARNING:** Data Lake is deprecated. To learn more, see <https://dochub.mongodb.org/core/data-lake-deprecation>
 *
 * `mongodbatlas.DataLakePipeline` provides a Data Lake Pipeline resource.
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
 *
 * ## Example Usage
 *
 * ## Import
 *
 * Data Lake Pipeline can be imported using project ID, name of the data lake and name of the AWS s3 bucket, in the format `project_id`--`name`, e.g.
 *
 * ```sh
 * $ pulumi import mongodbatlas:index/dataLakePipeline:DataLakePipeline example 1112222b3bf99403840e8934--test-data-lake-pipeline-test
 * ```
 *
 * See [MongoDB Atlas API](https://www.mongodb.com/docs/atlas/reference/api-resources-spec/#tag/Data-Lake-Pipelines) Documentation for more information.
 */
class DataLakePipeline extends pulumi.CustomResource {
    /**
     * Get an existing DataLakePipeline resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new DataLakePipeline(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of DataLakePipeline.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DataLakePipeline.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["createdDate"] = state ? state.createdDate : undefined;
            resourceInputs["ingestionSchedules"] = state ? state.ingestionSchedules : undefined;
            resourceInputs["lastUpdatedDate"] = state ? state.lastUpdatedDate : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["sink"] = state ? state.sink : undefined;
            resourceInputs["snapshots"] = state ? state.snapshots : undefined;
            resourceInputs["source"] = state ? state.source : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["transformations"] = state ? state.transformations : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["sink"] = args ? args.sink : undefined;
            resourceInputs["source"] = args ? args.source : undefined;
            resourceInputs["transformations"] = args ? args.transformations : undefined;
            resourceInputs["createdDate"] = undefined /*out*/;
            resourceInputs["ingestionSchedules"] = undefined /*out*/;
            resourceInputs["lastUpdatedDate"] = undefined /*out*/;
            resourceInputs["snapshots"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DataLakePipeline.__pulumiType, name, resourceInputs, opts);
    }
}
exports.DataLakePipeline = DataLakePipeline;
/** @internal */
DataLakePipeline.__pulumiType = 'mongodbatlas:index/dataLakePipeline:DataLakePipeline';
//# sourceMappingURL=dataLakePipeline.js.map