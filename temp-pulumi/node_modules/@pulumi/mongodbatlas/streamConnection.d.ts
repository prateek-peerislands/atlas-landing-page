import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
/**
 * ## # Resource: mongodbatlas.StreamConnection
 *
 * `mongodbatlas.StreamConnection` provides a Stream Connection resource. The resource lets you create, edit, and delete stream instance connections.
 *
 * > **IMPORTANT:** All arguments including the Kafka authentication password will be stored in the raw state as plaintext. Read more about sensitive data in state.
 *
 * ## Example Usage
 *
 * ### Example Cluster Connection
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = new mongodbatlas.StreamConnection("test", {
 *     projectId: projectId,
 *     instanceName: "InstanceName",
 *     connectionName: "ConnectionName",
 *     type: "Cluster",
 *     clusterName: "Cluster0",
 * });
 * ```
 *
 * ### Example Cross Project Cluster Connection
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = new mongodbatlas.StreamConnection("test", {
 *     projectId: projectId,
 *     instanceName: "InstanceName",
 *     connectionName: "ConnectionName",
 *     type: "Cluster",
 *     clusterName: "OtherCluster",
 *     clusterProjectId: otherProjectId,
 * });
 * ```
 *
 * ### Example Kafka SASL Plaintext Connection
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = new mongodbatlas.StreamConnection("test", {
 *     projectId: projectId,
 *     instanceName: "NewInstance",
 *     connectionName: "KafkaConnection",
 *     type: "Kafka",
 *     authentication: {
 *         mechanism: "SCRAM-256",
 *         username: "user",
 *         password: "somepassword",
 *     },
 *     security: {
 *         protocol: "SASL_PLAINTEXT",
 *     },
 *     config: {
 *         "auto.offset.reset": "latest",
 *     },
 *     bootstrapServers: "localhost:9091,localhost:9092",
 * });
 * ```
 *
 * ### Example Https Connection
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const example_https = new mongodbatlas.StreamConnection("example-https", {
 *     projectId: projectId,
 *     instanceName: example.instanceName,
 *     connectionName: "https_connection_tf_new",
 *     type: "Https",
 *     url: "https://example.com",
 *     headers: {
 *         key1: "value1",
 *         key2: "value2",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * You can import a stream connection resource using the instance name, project ID, and connection name. The format must be `INSTANCE_NAME-PROJECT_ID-CONNECTION_NAME`. For example:
 *
 * ```sh
 * $ pulumi import mongodbatlas:index/streamConnection:StreamConnection test "DefaultInstance-12251446ae5f3f6ec7968b13-NewConnection"
 * ```
 * To learn more, see: [MongoDB Atlas API - Stream Connection](https://www.mongodb.com/docs/atlas/reference/api-resources-spec/#tag/Streams/operation/createStreamConnection) Documentation.
 * The Terraform Provider Examples Section also contains details on the overall support for Atlas Streams Processing in Terraform.
 */
export declare class StreamConnection extends pulumi.CustomResource {
    /**
     * Get an existing StreamConnection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StreamConnectionState, opts?: pulumi.CustomResourceOptions): StreamConnection;
    /**
     * Returns true if the given object is an instance of StreamConnection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is StreamConnection;
    readonly authentication: pulumi.Output<outputs.StreamConnectionAuthentication | undefined>;
    readonly aws: pulumi.Output<outputs.StreamConnectionAws | undefined>;
    readonly bootstrapServers: pulumi.Output<string | undefined>;
    readonly clusterName: pulumi.Output<string | undefined>;
    readonly clusterProjectId: pulumi.Output<string | undefined>;
    readonly config: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * Human-readable label that identifies the stream connection. In the case of the Sample type, this is the name of the sample source.
     */
    readonly connectionName: pulumi.Output<string>;
    readonly dbRoleToExecute: pulumi.Output<outputs.StreamConnectionDbRoleToExecute | undefined>;
    readonly headers: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * Human-readable label that identifies the stream instance.
     */
    readonly instanceName: pulumi.Output<string>;
    readonly networking: pulumi.Output<outputs.StreamConnectionNetworking>;
    /**
     * Unique 24-hexadecimal digit string that identifies your project.
     */
    readonly projectId: pulumi.Output<string>;
    readonly security: pulumi.Output<outputs.StreamConnectionSecurity | undefined>;
    /**
     * Type of connection. Can be `AWSLambda`, `Cluster`, `Https`, `Kafka` or `Sample`.
     */
    readonly type: pulumi.Output<string>;
    readonly url: pulumi.Output<string | undefined>;
    /**
     * Create a StreamConnection resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StreamConnectionArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering StreamConnection resources.
 */
export interface StreamConnectionState {
    authentication?: pulumi.Input<inputs.StreamConnectionAuthentication>;
    aws?: pulumi.Input<inputs.StreamConnectionAws>;
    bootstrapServers?: pulumi.Input<string>;
    clusterName?: pulumi.Input<string>;
    clusterProjectId?: pulumi.Input<string>;
    config?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * Human-readable label that identifies the stream connection. In the case of the Sample type, this is the name of the sample source.
     */
    connectionName?: pulumi.Input<string>;
    dbRoleToExecute?: pulumi.Input<inputs.StreamConnectionDbRoleToExecute>;
    headers?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * Human-readable label that identifies the stream instance.
     */
    instanceName?: pulumi.Input<string>;
    networking?: pulumi.Input<inputs.StreamConnectionNetworking>;
    /**
     * Unique 24-hexadecimal digit string that identifies your project.
     */
    projectId?: pulumi.Input<string>;
    security?: pulumi.Input<inputs.StreamConnectionSecurity>;
    /**
     * Type of connection. Can be `AWSLambda`, `Cluster`, `Https`, `Kafka` or `Sample`.
     */
    type?: pulumi.Input<string>;
    url?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a StreamConnection resource.
 */
export interface StreamConnectionArgs {
    authentication?: pulumi.Input<inputs.StreamConnectionAuthentication>;
    aws?: pulumi.Input<inputs.StreamConnectionAws>;
    bootstrapServers?: pulumi.Input<string>;
    clusterName?: pulumi.Input<string>;
    clusterProjectId?: pulumi.Input<string>;
    config?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * Human-readable label that identifies the stream connection. In the case of the Sample type, this is the name of the sample source.
     */
    connectionName: pulumi.Input<string>;
    dbRoleToExecute?: pulumi.Input<inputs.StreamConnectionDbRoleToExecute>;
    headers?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * Human-readable label that identifies the stream instance.
     */
    instanceName: pulumi.Input<string>;
    networking?: pulumi.Input<inputs.StreamConnectionNetworking>;
    /**
     * Unique 24-hexadecimal digit string that identifies your project.
     */
    projectId: pulumi.Input<string>;
    security?: pulumi.Input<inputs.StreamConnectionSecurity>;
    /**
     * Type of connection. Can be `AWSLambda`, `Cluster`, `Https`, `Kafka` or `Sample`.
     */
    type: pulumi.Input<string>;
    url?: pulumi.Input<string>;
}
