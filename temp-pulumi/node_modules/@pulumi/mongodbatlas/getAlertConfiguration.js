"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAlertConfigurationOutput = exports.getAlertConfiguration = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * ## # Data Source: mongodbatlas.AlertConfiguration
 *
 * `mongodbatlas.AlertConfiguration` describes an Alert Configuration.
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const testAlertConfiguration = new mongodbatlas.AlertConfiguration("test", {
 *     projectId: "<PROJECT-ID>",
 *     eventType: "OUTSIDE_METRIC_THRESHOLD",
 *     enabled: true,
 *     notifications: [{
 *         typeName: "GROUP",
 *         intervalMin: 5,
 *         delayMin: 0,
 *         smsEnabled: false,
 *         emailEnabled: true,
 *     }],
 *     matchers: [{
 *         fieldName: "HOSTNAME_AND_PORT",
 *         operator: "EQUALS",
 *         value: "SECONDARY",
 *     }],
 *     metricThresholdConfig: {
 *         metricName: "ASSERT_REGULAR",
 *         operator: "LESS_THAN",
 *         threshold: 99,
 *         units: "RAW",
 *         mode: "AVERAGE",
 *     },
 * });
 * const test = mongodbatlas.getAlertConfigurationOutput({
 *     projectId: testAlertConfiguration.projectId,
 *     alertConfigurationId: testAlertConfiguration.alertConfigurationId,
 * });
 * ```
 *
 * > **NOTE:** In order to allow for a fast pace of change to alert variables some validations have been removed from this resource in order to unblock alert creation. Impacted areas have links to the MongoDB Atlas API documentation so always check it for the most current information: https://docs.atlas.mongodb.com/reference/api/alert-configurations-create-config/
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const testAlertConfiguration = new mongodbatlas.AlertConfiguration("test", {
 *     projectId: "<PROJECT-ID>",
 *     eventType: "REPLICATION_OPLOG_WINDOW_RUNNING_OUT",
 *     enabled: true,
 *     notifications: [{
 *         typeName: "GROUP",
 *         intervalMin: 5,
 *         delayMin: 0,
 *         smsEnabled: false,
 *         emailEnabled: true,
 *         roles: ["GROUP_CLUSTER_MANAGER"],
 *     }],
 *     matchers: [{
 *         fieldName: "HOSTNAME_AND_PORT",
 *         operator: "EQUALS",
 *         value: "SECONDARY",
 *     }],
 *     thresholdConfig: {
 *         operator: "LESS_THAN",
 *         threshold: 1,
 *         units: "HOURS",
 *     },
 * });
 * const test = mongodbatlas.getAlertConfigurationOutput({
 *     projectId: testAlertConfiguration.projectId,
 *     alertConfigurationId: testAlertConfiguration.alertConfigurationId,
 * });
 * ```
 *
 * Utilize dataSource to generate resource hcl and import statement. Useful if you have a specific alertConfigurationId and are looking to manage it as is in state. To import all alerts, refer to the documentation on dataSourceMongodbatlasAlertConfigurations
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = mongodbatlas.getAlertConfiguration({
 *     projectId: projectId,
 *     alertConfigurationId: alertConfigurationId,
 *     outputs: [
 *         {
 *             type: "resource_hcl",
 *             label: "test",
 *         },
 *         {
 *             type: "resource_import",
 *             label: "test",
 *         },
 *     ],
 * });
 * ```
 */
function getAlertConfiguration(args, opts) {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("mongodbatlas:index/getAlertConfiguration:getAlertConfiguration", {
        "alertConfigurationId": args.alertConfigurationId,
        "outputs": args.outputs,
        "projectId": args.projectId,
    }, opts);
}
exports.getAlertConfiguration = getAlertConfiguration;
/**
 * ## # Data Source: mongodbatlas.AlertConfiguration
 *
 * `mongodbatlas.AlertConfiguration` describes an Alert Configuration.
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const testAlertConfiguration = new mongodbatlas.AlertConfiguration("test", {
 *     projectId: "<PROJECT-ID>",
 *     eventType: "OUTSIDE_METRIC_THRESHOLD",
 *     enabled: true,
 *     notifications: [{
 *         typeName: "GROUP",
 *         intervalMin: 5,
 *         delayMin: 0,
 *         smsEnabled: false,
 *         emailEnabled: true,
 *     }],
 *     matchers: [{
 *         fieldName: "HOSTNAME_AND_PORT",
 *         operator: "EQUALS",
 *         value: "SECONDARY",
 *     }],
 *     metricThresholdConfig: {
 *         metricName: "ASSERT_REGULAR",
 *         operator: "LESS_THAN",
 *         threshold: 99,
 *         units: "RAW",
 *         mode: "AVERAGE",
 *     },
 * });
 * const test = mongodbatlas.getAlertConfigurationOutput({
 *     projectId: testAlertConfiguration.projectId,
 *     alertConfigurationId: testAlertConfiguration.alertConfigurationId,
 * });
 * ```
 *
 * > **NOTE:** In order to allow for a fast pace of change to alert variables some validations have been removed from this resource in order to unblock alert creation. Impacted areas have links to the MongoDB Atlas API documentation so always check it for the most current information: https://docs.atlas.mongodb.com/reference/api/alert-configurations-create-config/
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const testAlertConfiguration = new mongodbatlas.AlertConfiguration("test", {
 *     projectId: "<PROJECT-ID>",
 *     eventType: "REPLICATION_OPLOG_WINDOW_RUNNING_OUT",
 *     enabled: true,
 *     notifications: [{
 *         typeName: "GROUP",
 *         intervalMin: 5,
 *         delayMin: 0,
 *         smsEnabled: false,
 *         emailEnabled: true,
 *         roles: ["GROUP_CLUSTER_MANAGER"],
 *     }],
 *     matchers: [{
 *         fieldName: "HOSTNAME_AND_PORT",
 *         operator: "EQUALS",
 *         value: "SECONDARY",
 *     }],
 *     thresholdConfig: {
 *         operator: "LESS_THAN",
 *         threshold: 1,
 *         units: "HOURS",
 *     },
 * });
 * const test = mongodbatlas.getAlertConfigurationOutput({
 *     projectId: testAlertConfiguration.projectId,
 *     alertConfigurationId: testAlertConfiguration.alertConfigurationId,
 * });
 * ```
 *
 * Utilize dataSource to generate resource hcl and import statement. Useful if you have a specific alertConfigurationId and are looking to manage it as is in state. To import all alerts, refer to the documentation on dataSourceMongodbatlasAlertConfigurations
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = mongodbatlas.getAlertConfiguration({
 *     projectId: projectId,
 *     alertConfigurationId: alertConfigurationId,
 *     outputs: [
 *         {
 *             type: "resource_hcl",
 *             label: "test",
 *         },
 *         {
 *             type: "resource_import",
 *             label: "test",
 *         },
 *     ],
 * });
 * ```
 */
function getAlertConfigurationOutput(args, opts) {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("mongodbatlas:index/getAlertConfiguration:getAlertConfiguration", {
        "alertConfigurationId": args.alertConfigurationId,
        "outputs": args.outputs,
        "projectId": args.projectId,
    }, opts);
}
exports.getAlertConfigurationOutput = getAlertConfigurationOutput;
//# sourceMappingURL=getAlertConfiguration.js.map