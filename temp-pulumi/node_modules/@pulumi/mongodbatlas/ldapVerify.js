"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.LdapVerify = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * ## # Resource: mongodbatlas.LdapVerify
 *
 * `mongodbatlas.LdapVerify` provides an LDAP Verify resource. This allows a a verification of an LDAP configuration over TLS for an Atlas project. Atlas retains only the most recent request for each project.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = new mongodbatlas.Project("test", {
 *     name: "NAME OF THE PROJECT",
 *     orgId: "ORG ID",
 * });
 * const testAdvancedCluster = new mongodbatlas.AdvancedCluster("test", {
 *     projectId: test.id,
 *     name: "NAME OF THE CLUSTER",
 *     clusterType: "REPLICASET",
 *     backupEnabled: true,
 *     replicationSpecs: [{
 *         regionConfigs: [{
 *             priority: 7,
 *             providerName: "AWS",
 *             regionName: "US_EAST_1",
 *             electableSpecs: {
 *                 instanceSize: "M10",
 *                 nodeCount: 3,
 *             },
 *         }],
 *     }],
 * });
 * const testLdapVerify = new mongodbatlas.LdapVerify("test", {
 *     projectId: test.id,
 *     hostname: "HOSTNAME",
 *     port: 636,
 *     bindUsername: "USERNAME",
 *     bindPassword: "PASSWORD",
 * }, {
 *     dependsOn: [testAdvancedCluster],
 * });
 * ```
 *
 * ## Import
 *
 * LDAP Configuration must be imported using project ID and request ID, e.g.
 *
 * ```sh
 * $ pulumi import mongodbatlas:index/ldapVerify:LdapVerify test 5d09d6a59ccf6445652a444a-5d09d6a59ccf6445652a444a
 * ```
 * For more information see: [MongoDB Atlas API Reference.](https://docs.atlas.mongodb.com/reference/api/ldaps-configuration-request-verification)
 */
class LdapVerify extends pulumi.CustomResource {
    /**
     * Get an existing LdapVerify resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new LdapVerify(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of LdapVerify.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LdapVerify.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["authzQueryTemplate"] = state ? state.authzQueryTemplate : undefined;
            resourceInputs["bindPassword"] = state ? state.bindPassword : undefined;
            resourceInputs["bindUsername"] = state ? state.bindUsername : undefined;
            resourceInputs["caCertificate"] = state ? state.caCertificate : undefined;
            resourceInputs["hostname"] = state ? state.hostname : undefined;
            resourceInputs["links"] = state ? state.links : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["requestId"] = state ? state.requestId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["validations"] = state ? state.validations : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.bindPassword === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bindPassword'");
            }
            if ((!args || args.bindUsername === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bindUsername'");
            }
            if ((!args || args.hostname === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hostname'");
            }
            if ((!args || args.port === undefined) && !opts.urn) {
                throw new Error("Missing required property 'port'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["authzQueryTemplate"] = args ? args.authzQueryTemplate : undefined;
            resourceInputs["bindPassword"] = args ? args.bindPassword : undefined;
            resourceInputs["bindUsername"] = args ? args.bindUsername : undefined;
            resourceInputs["caCertificate"] = args ? args.caCertificate : undefined;
            resourceInputs["hostname"] = args ? args.hostname : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["links"] = undefined /*out*/;
            resourceInputs["requestId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["validations"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LdapVerify.__pulumiType, name, resourceInputs, opts);
    }
}
exports.LdapVerify = LdapVerify;
/** @internal */
LdapVerify.__pulumiType = 'mongodbatlas:index/ldapVerify:LdapVerify';
//# sourceMappingURL=ldapVerify.js.map