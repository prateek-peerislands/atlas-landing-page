"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.MongodbEmployeeAccessGrant = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * ## # Resource: mongodbatlas.MongodbEmployeeAccessGrant
 *
 * `mongodbatlas.MongodbEmployeeAccessGrant` provides a MongoDB Employee Access Grant resource. The resource lets you create, delete, update and import a MongoDB employee access grant.
 *
 * ## Example Usage
 *
 * ### S
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const example = new mongodbatlas.MongodbEmployeeAccessGrant("example", {
 *     projectId: projectId,
 *     clusterName: clusterName,
 *     grantType: "CLUSTER_INFRASTRUCTURE_AND_APP_SERVICES_SYNC_DATA",
 *     expirationTime: "2025-01-01T12:00:00Z",
 * });
 * const dsExample = mongodbatlas.getMongodbEmployeeAccessGrant({
 *     projectId: projectId,
 *     clusterName: clusterName,
 * });
 * export const grantType = dsExample.then(dsExample => dsExample.grantType);
 * export const expirationTime = dsExample.then(dsExample => dsExample.expirationTime);
 * ```
 *
 * ## Import
 *
 * The resource can be imported using project ID and cluster name, in the format `PROJECTID-CLUSTERNAME`, e.g.
 *
 * For more information see: [MongoDB Employee Access Grant API doc](https://www.mongodb.com/docs/api/doc/atlas-admin-api-v2/operation/operation-grantmongodbemployeeaccess).
 */
class MongodbEmployeeAccessGrant extends pulumi.CustomResource {
    /**
     * Get an existing MongodbEmployeeAccessGrant resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new MongodbEmployeeAccessGrant(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of MongodbEmployeeAccessGrant.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MongodbEmployeeAccessGrant.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["clusterName"] = state ? state.clusterName : undefined;
            resourceInputs["expirationTime"] = state ? state.expirationTime : undefined;
            resourceInputs["grantType"] = state ? state.grantType : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.clusterName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterName'");
            }
            if ((!args || args.expirationTime === undefined) && !opts.urn) {
                throw new Error("Missing required property 'expirationTime'");
            }
            if ((!args || args.grantType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'grantType'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["expirationTime"] = args ? args.expirationTime : undefined;
            resourceInputs["grantType"] = args ? args.grantType : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MongodbEmployeeAccessGrant.__pulumiType, name, resourceInputs, opts);
    }
}
exports.MongodbEmployeeAccessGrant = MongodbEmployeeAccessGrant;
/** @internal */
MongodbEmployeeAccessGrant.__pulumiType = 'mongodbatlas:index/mongodbEmployeeAccessGrant:MongodbEmployeeAccessGrant';
//# sourceMappingURL=mongodbEmployeeAccessGrant.js.map