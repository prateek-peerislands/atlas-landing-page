"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.StreamPrivatelinkEndpoint = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * ## # Resource: mongodbatlas.StreamPrivatelinkEndpoint
 *
 * `mongodbatlas.StreamPrivatelinkEndpoint` describes a Privatelink Endpoint for Streams.
 *
 * ## Example Usage
 *
 * ### S
 *
 * ### AWS S3 Privatelink
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * // S3 bucket for stream data
 * const streamBucket = new aws.index.S3Bucket("stream_bucket", {
 *     bucket: s3BucketName,
 *     forceDestroy: true,
 * });
 * const streamBucketVersioning = new aws.index.S3BucketVersioning("stream_bucket_versioning", {
 *     bucket: streamBucket.id,
 *     versioningConfiguration: [{
 *         status: "Enabled",
 *     }],
 * });
 * const streamBucketEncryption = new aws.index.S3BucketServerSideEncryptionConfiguration("stream_bucket_encryption", {
 *     bucket: streamBucket.id,
 *     rule: [{
 *         applyServerSideEncryptionByDefault: [{
 *             sseAlgorithm: "AES256",
 *         }],
 *     }],
 * });
 * // PrivateLink for S3
 * const _this = new mongodbatlas.StreamPrivatelinkEndpoint("this", {
 *     projectId: projectId,
 *     providerName: "AWS",
 *     vendor: "S3",
 *     region: region,
 *     serviceEndpointId: serviceEndpointId,
 * });
 * export const privatelinkEndpointId = _this.id;
 * ```
 */
class StreamPrivatelinkEndpoint extends pulumi.CustomResource {
    /**
     * Get an existing StreamPrivatelinkEndpoint resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new StreamPrivatelinkEndpoint(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of StreamPrivatelinkEndpoint.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StreamPrivatelinkEndpoint.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["arn"] = state ? state.arn : undefined;
            resourceInputs["dnsDomain"] = state ? state.dnsDomain : undefined;
            resourceInputs["dnsSubDomains"] = state ? state.dnsSubDomains : undefined;
            resourceInputs["errorMessage"] = state ? state.errorMessage : undefined;
            resourceInputs["interfaceEndpointId"] = state ? state.interfaceEndpointId : undefined;
            resourceInputs["interfaceEndpointName"] = state ? state.interfaceEndpointName : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["providerAccountId"] = state ? state.providerAccountId : undefined;
            resourceInputs["providerName"] = state ? state.providerName : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["serviceEndpointId"] = state ? state.serviceEndpointId : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["vendor"] = state ? state.vendor : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.providerName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'providerName'");
            }
            if ((!args || args.vendor === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vendor'");
            }
            resourceInputs["arn"] = args ? args.arn : undefined;
            resourceInputs["dnsDomain"] = args ? args.dnsDomain : undefined;
            resourceInputs["dnsSubDomains"] = args ? args.dnsSubDomains : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["providerName"] = args ? args.providerName : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["serviceEndpointId"] = args ? args.serviceEndpointId : undefined;
            resourceInputs["vendor"] = args ? args.vendor : undefined;
            resourceInputs["errorMessage"] = undefined /*out*/;
            resourceInputs["interfaceEndpointId"] = undefined /*out*/;
            resourceInputs["interfaceEndpointName"] = undefined /*out*/;
            resourceInputs["providerAccountId"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StreamPrivatelinkEndpoint.__pulumiType, name, resourceInputs, opts);
    }
}
exports.StreamPrivatelinkEndpoint = StreamPrivatelinkEndpoint;
/** @internal */
StreamPrivatelinkEndpoint.__pulumiType = 'mongodbatlas:index/streamPrivatelinkEndpoint:StreamPrivatelinkEndpoint';
//# sourceMappingURL=streamPrivatelinkEndpoint.js.map