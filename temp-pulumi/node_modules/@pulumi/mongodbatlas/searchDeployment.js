"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.SearchDeployment = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * ## # Resource: mongodbatlas.SearchDeployment
 *
 * `mongodbatlas.SearchDeployment` provides a Search Deployment resource. The resource lets you create, edit and delete dedicated search nodes in a cluster.
 *
 * > **NOTE:** For details on supported cloud providers and existing limitations you can visit the [Search Node Documentation](https://www.mongodb.com/docs/atlas/cluster-config/multi-cloud-distribution/#search-nodes-for-workload-isolation).
 *
 * > **NOTE:** Only a single search deployment resource can be defined for each cluster.
 *
 * ## Example Usage
 *
 * ## Import
 *
 * Search node resource can be imported using the project ID and cluster name, in the format `PROJECT_ID-CLUSTER_NAME`, e.g.
 *
 * After an import, a non-empty plan is expected if the configuration defines the `skipWaitOnUpdate` attribute. However, the update will not have any effect on the search deployment since `skipWaitOnUpdate` only relates to the update operations wait time.
 *
 * For more information see: [MongoDB Atlas API - Search Node](https://www.mongodb.com/docs/atlas/reference/api-resources-spec/#tag/Atlas-Search/operation/createAtlasSearchDeployment) Documentation.
 */
class SearchDeployment extends pulumi.CustomResource {
    /**
     * Get an existing SearchDeployment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new SearchDeployment(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of SearchDeployment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SearchDeployment.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["clusterName"] = state ? state.clusterName : undefined;
            resourceInputs["deleteOnCreateTimeout"] = state ? state.deleteOnCreateTimeout : undefined;
            resourceInputs["encryptionAtRestProvider"] = state ? state.encryptionAtRestProvider : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["skipWaitOnUpdate"] = state ? state.skipWaitOnUpdate : undefined;
            resourceInputs["specs"] = state ? state.specs : undefined;
            resourceInputs["stateName"] = state ? state.stateName : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.clusterName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterName'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.specs === undefined) && !opts.urn) {
                throw new Error("Missing required property 'specs'");
            }
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["deleteOnCreateTimeout"] = args ? args.deleteOnCreateTimeout : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["skipWaitOnUpdate"] = args ? args.skipWaitOnUpdate : undefined;
            resourceInputs["specs"] = args ? args.specs : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["encryptionAtRestProvider"] = undefined /*out*/;
            resourceInputs["stateName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SearchDeployment.__pulumiType, name, resourceInputs, opts);
    }
}
exports.SearchDeployment = SearchDeployment;
/** @internal */
SearchDeployment.__pulumiType = 'mongodbatlas:index/searchDeployment:SearchDeployment';
//# sourceMappingURL=searchDeployment.js.map