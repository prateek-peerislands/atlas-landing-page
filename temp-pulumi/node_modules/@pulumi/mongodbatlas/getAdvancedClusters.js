"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAdvancedClustersOutput = exports.getAdvancedClusters = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * ## # Data Source: mongodbatlas.getAdvancedClusters
 *
 * `mongodbatlas.getAdvancedClusters` returns all Advanced Clusters for a project_id.
 *
 * This page describes the current version of `mongodbatlas.getAdvancedClusters`, the page for the **Preview for MongoDB Atlas Provider 2.0.0** can be found here.
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find groupId in the official documentation.
 *
 * > **IMPORTANT:**
 * <br> &#8226; Changes to cluster configurations can affect costs. Before making changes, please see [Billing](https://docs.atlas.mongodb.com/billing/).
 * <br> &#8226; If your Atlas project contains a custom role that uses actions introduced in a specific MongoDB version, you cannot create a cluster with a MongoDB version less than that version unless you delete the custom role.
 *
 * > **NOTE:** This data source also includes Flex clusters.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const exampleAdvancedCluster = new mongodbatlas.AdvancedCluster("example", {
 *     projectId: "<YOUR-PROJECT-ID>",
 *     name: "cluster-test",
 *     clusterType: "REPLICASET",
 *     replicationSpecs: [{
 *         regionConfigs: [{
 *             electableSpecs: {
 *                 instanceSize: "M0",
 *             },
 *             providerName: "TENANT",
 *             backingProviderName: "AWS",
 *             regionName: "US_EAST_1",
 *             priority: 7,
 *         }],
 *     }],
 * });
 * const example = mongodbatlas.getAdvancedClustersOutput({
 *     projectId: exampleAdvancedCluster.projectId,
 * });
 * ```
 *
 * ## Example using latest sharding configurations with independent shard scaling in the cluster
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const example = new mongodbatlas.AdvancedCluster("example", {
 *     projectId: "<YOUR-PROJECT-ID>",
 *     name: "cluster-test",
 *     backupEnabled: false,
 *     clusterType: "SHARDED",
 *     replicationSpecs: [
 *         {
 *             regionConfigs: [{
 *                 electableSpecs: {
 *                     instanceSize: "M30",
 *                     diskIops: 3000,
 *                     nodeCount: 3,
 *                 },
 *                 providerName: "AWS",
 *                 priority: 7,
 *                 regionName: "EU_WEST_1",
 *             }],
 *         },
 *         {
 *             regionConfigs: [{
 *                 electableSpecs: {
 *                     instanceSize: "M40",
 *                     diskIops: 3000,
 *                     nodeCount: 3,
 *                 },
 *                 providerName: "AWS",
 *                 priority: 7,
 *                 regionName: "EU_WEST_1",
 *             }],
 *         },
 *     ],
 * });
 * const example_asym = mongodbatlas.getAdvancedClusterOutput({
 *     projectId: example.projectId,
 *     name: example.name,
 *     useReplicationSpecPerShard: true,
 * });
 * ```
 *
 * ## Example using Flex cluster
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const example_flex = new mongodbatlas.AdvancedCluster("example-flex", {
 *     projectId: "<YOUR-PROJECT-ID>",
 *     name: "flex-cluster",
 *     clusterType: "REPLICASET",
 *     replicationSpecs: [{
 *         regionConfigs: [{
 *             providerName: "FLEX",
 *             backingProviderName: "AWS",
 *             regionName: "US_EAST_1",
 *             priority: 7,
 *         }],
 *     }],
 * });
 * const example = mongodbatlas.getAdvancedClustersOutput({
 *     projectId: example_flex.projectId,
 * });
 * ```
 */
function getAdvancedClusters(args, opts) {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("mongodbatlas:index/getAdvancedClusters:getAdvancedClusters", {
        "projectId": args.projectId,
        "useReplicationSpecPerShard": args.useReplicationSpecPerShard,
    }, opts);
}
exports.getAdvancedClusters = getAdvancedClusters;
/**
 * ## # Data Source: mongodbatlas.getAdvancedClusters
 *
 * `mongodbatlas.getAdvancedClusters` returns all Advanced Clusters for a project_id.
 *
 * This page describes the current version of `mongodbatlas.getAdvancedClusters`, the page for the **Preview for MongoDB Atlas Provider 2.0.0** can be found here.
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find groupId in the official documentation.
 *
 * > **IMPORTANT:**
 * <br> &#8226; Changes to cluster configurations can affect costs. Before making changes, please see [Billing](https://docs.atlas.mongodb.com/billing/).
 * <br> &#8226; If your Atlas project contains a custom role that uses actions introduced in a specific MongoDB version, you cannot create a cluster with a MongoDB version less than that version unless you delete the custom role.
 *
 * > **NOTE:** This data source also includes Flex clusters.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const exampleAdvancedCluster = new mongodbatlas.AdvancedCluster("example", {
 *     projectId: "<YOUR-PROJECT-ID>",
 *     name: "cluster-test",
 *     clusterType: "REPLICASET",
 *     replicationSpecs: [{
 *         regionConfigs: [{
 *             electableSpecs: {
 *                 instanceSize: "M0",
 *             },
 *             providerName: "TENANT",
 *             backingProviderName: "AWS",
 *             regionName: "US_EAST_1",
 *             priority: 7,
 *         }],
 *     }],
 * });
 * const example = mongodbatlas.getAdvancedClustersOutput({
 *     projectId: exampleAdvancedCluster.projectId,
 * });
 * ```
 *
 * ## Example using latest sharding configurations with independent shard scaling in the cluster
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const example = new mongodbatlas.AdvancedCluster("example", {
 *     projectId: "<YOUR-PROJECT-ID>",
 *     name: "cluster-test",
 *     backupEnabled: false,
 *     clusterType: "SHARDED",
 *     replicationSpecs: [
 *         {
 *             regionConfigs: [{
 *                 electableSpecs: {
 *                     instanceSize: "M30",
 *                     diskIops: 3000,
 *                     nodeCount: 3,
 *                 },
 *                 providerName: "AWS",
 *                 priority: 7,
 *                 regionName: "EU_WEST_1",
 *             }],
 *         },
 *         {
 *             regionConfigs: [{
 *                 electableSpecs: {
 *                     instanceSize: "M40",
 *                     diskIops: 3000,
 *                     nodeCount: 3,
 *                 },
 *                 providerName: "AWS",
 *                 priority: 7,
 *                 regionName: "EU_WEST_1",
 *             }],
 *         },
 *     ],
 * });
 * const example_asym = mongodbatlas.getAdvancedClusterOutput({
 *     projectId: example.projectId,
 *     name: example.name,
 *     useReplicationSpecPerShard: true,
 * });
 * ```
 *
 * ## Example using Flex cluster
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const example_flex = new mongodbatlas.AdvancedCluster("example-flex", {
 *     projectId: "<YOUR-PROJECT-ID>",
 *     name: "flex-cluster",
 *     clusterType: "REPLICASET",
 *     replicationSpecs: [{
 *         regionConfigs: [{
 *             providerName: "FLEX",
 *             backingProviderName: "AWS",
 *             regionName: "US_EAST_1",
 *             priority: 7,
 *         }],
 *     }],
 * });
 * const example = mongodbatlas.getAdvancedClustersOutput({
 *     projectId: example_flex.projectId,
 * });
 * ```
 */
function getAdvancedClustersOutput(args, opts) {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("mongodbatlas:index/getAdvancedClusters:getAdvancedClusters", {
        "projectId": args.projectId,
        "useReplicationSpecPerShard": args.useReplicationSpecPerShard,
    }, opts);
}
exports.getAdvancedClustersOutput = getAdvancedClustersOutput;
//# sourceMappingURL=getAdvancedClusters.js.map