import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
/**
 * ## Example Usage
 *
 * ### S
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * export = async () => {
 *     const project_tf = new mongodbatlas.Project("project-tf", {
 *         name: atlasProjectName,
 *         orgId: atlasOrgId,
 *     });
 *     // Set up cloud provider access in Atlas using the created IAM role
 *     const setupOnly = new mongodbatlas.CloudProviderAccessSetup("setup_only", {
 *         projectId: project_tf.id,
 *         providerName: "AWS",
 *     });
 *     const authRole = new mongodbatlas.CloudProviderAccessAuthorization("auth_role", {
 *         projectId: project_tf.id,
 *         roleId: setupOnly.roleId,
 *         aws: {
 *             iamAssumedRoleArn: testRole.arn,
 *         },
 *     });
 *     // Set up push-based log export with authorized IAM role
 *     const testPushBasedLogExport = new mongodbatlas.PushBasedLogExport("test", {
 *         projectId: project_tf.id,
 *         bucketName: logBucket.bucket,
 *         iamRoleId: authRole.roleId,
 *         prefixPath: "push-based-log-test",
 *     });
 *     const test = mongodbatlas.getPushBasedLogExportOutput({
 *         projectId: testPushBasedLogExport.projectId,
 *     });
 *     return {
 *         test: test.apply(test => test.prefixPath),
 *     };
 * }
 * ```
 *
 * ## Import
 *
 * Push-based log export resource can be imported using the project ID, e.g.
 *
 * For more information see: [MongoDB Atlas API - Push-Based Log Export](https://www.mongodb.com/docs/api/doc/atlas-admin-api-v2/group/endpoint-push-based-log-export) Documentation.
 */
export declare class PushBasedLogExport extends pulumi.CustomResource {
    /**
     * Get an existing PushBasedLogExport resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PushBasedLogExportState, opts?: pulumi.CustomResourceOptions): PushBasedLogExport;
    /**
     * Returns true if the given object is an instance of PushBasedLogExport.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is PushBasedLogExport;
    /**
     * The name of the bucket to which the agent sends the logs to.
     */
    readonly bucketName: pulumi.Output<string>;
    /**
     * Date and time that this feature was enabled on.
     */
    readonly createDate: pulumi.Output<string>;
    /**
     * ID of the AWS IAM role that is used to write to the S3 bucket.
     */
    readonly iamRoleId: pulumi.Output<string>;
    /**
     * S3 directory in which vector writes in order to store the logs. An empty string denotes the root directory.
     */
    readonly prefixPath: pulumi.Output<string>;
    /**
     * Unique 24-hexadecimal digit string that identifies your project. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.
     */
    readonly projectId: pulumi.Output<string>;
    /**
     * Describes whether or not the feature is enabled and what status it is in.
     */
    readonly state: pulumi.Output<string>;
    readonly timeouts: pulumi.Output<outputs.PushBasedLogExportTimeouts | undefined>;
    /**
     * Create a PushBasedLogExport resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PushBasedLogExportArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering PushBasedLogExport resources.
 */
export interface PushBasedLogExportState {
    /**
     * The name of the bucket to which the agent sends the logs to.
     */
    bucketName?: pulumi.Input<string>;
    /**
     * Date and time that this feature was enabled on.
     */
    createDate?: pulumi.Input<string>;
    /**
     * ID of the AWS IAM role that is used to write to the S3 bucket.
     */
    iamRoleId?: pulumi.Input<string>;
    /**
     * S3 directory in which vector writes in order to store the logs. An empty string denotes the root directory.
     */
    prefixPath?: pulumi.Input<string>;
    /**
     * Unique 24-hexadecimal digit string that identifies your project. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Describes whether or not the feature is enabled and what status it is in.
     */
    state?: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.PushBasedLogExportTimeouts>;
}
/**
 * The set of arguments for constructing a PushBasedLogExport resource.
 */
export interface PushBasedLogExportArgs {
    /**
     * The name of the bucket to which the agent sends the logs to.
     */
    bucketName: pulumi.Input<string>;
    /**
     * ID of the AWS IAM role that is used to write to the S3 bucket.
     */
    iamRoleId: pulumi.Input<string>;
    /**
     * S3 directory in which vector writes in order to store the logs. An empty string denotes the root directory.
     */
    prefixPath?: pulumi.Input<string>;
    /**
     * Unique 24-hexadecimal digit string that identifies your project. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.
     */
    projectId: pulumi.Input<string>;
    timeouts?: pulumi.Input<inputs.PushBasedLogExportTimeouts>;
}
