"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.PrivateLinkEndpointService = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * ## Import
 *
 * Private Endpoint Link Connection can be imported using project ID and username, in the format `{project_id}--{private_link_id}--{endpoint_service_id}--{provider_name}`, e.g.
 *
 * ```sh
 * $ pulumi import mongodbatlas:index/privateLinkEndpointService:PrivateLinkEndpointService test 1112222b3bf99403840e8934--3242342343112--vpce-4242342343--AWS
 * ```
 * See detailed information for arguments and attributes: [MongoDB API Private Endpoint Link Connection](https://docs.atlas.mongodb.com/reference/api/private-endpoints-endpoint-create-one/)
 */
class PrivateLinkEndpointService extends pulumi.CustomResource {
    /**
     * Get an existing PrivateLinkEndpointService resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new PrivateLinkEndpointService(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of PrivateLinkEndpointService.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PrivateLinkEndpointService.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["awsConnectionStatus"] = state ? state.awsConnectionStatus : undefined;
            resourceInputs["azureStatus"] = state ? state.azureStatus : undefined;
            resourceInputs["deleteRequested"] = state ? state.deleteRequested : undefined;
            resourceInputs["endpointGroupName"] = state ? state.endpointGroupName : undefined;
            resourceInputs["endpointServiceId"] = state ? state.endpointServiceId : undefined;
            resourceInputs["endpoints"] = state ? state.endpoints : undefined;
            resourceInputs["errorMessage"] = state ? state.errorMessage : undefined;
            resourceInputs["gcpProjectId"] = state ? state.gcpProjectId : undefined;
            resourceInputs["gcpStatus"] = state ? state.gcpStatus : undefined;
            resourceInputs["interfaceEndpointId"] = state ? state.interfaceEndpointId : undefined;
            resourceInputs["privateEndpointConnectionName"] = state ? state.privateEndpointConnectionName : undefined;
            resourceInputs["privateEndpointIpAddress"] = state ? state.privateEndpointIpAddress : undefined;
            resourceInputs["privateEndpointResourceId"] = state ? state.privateEndpointResourceId : undefined;
            resourceInputs["privateLinkId"] = state ? state.privateLinkId : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["providerName"] = state ? state.providerName : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.endpointServiceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'endpointServiceId'");
            }
            if ((!args || args.privateLinkId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'privateLinkId'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.providerName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'providerName'");
            }
            resourceInputs["endpointServiceId"] = args ? args.endpointServiceId : undefined;
            resourceInputs["endpoints"] = args ? args.endpoints : undefined;
            resourceInputs["gcpProjectId"] = args ? args.gcpProjectId : undefined;
            resourceInputs["privateEndpointIpAddress"] = args ? args.privateEndpointIpAddress : undefined;
            resourceInputs["privateLinkId"] = args ? args.privateLinkId : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["providerName"] = args ? args.providerName : undefined;
            resourceInputs["awsConnectionStatus"] = undefined /*out*/;
            resourceInputs["azureStatus"] = undefined /*out*/;
            resourceInputs["deleteRequested"] = undefined /*out*/;
            resourceInputs["endpointGroupName"] = undefined /*out*/;
            resourceInputs["errorMessage"] = undefined /*out*/;
            resourceInputs["gcpStatus"] = undefined /*out*/;
            resourceInputs["interfaceEndpointId"] = undefined /*out*/;
            resourceInputs["privateEndpointConnectionName"] = undefined /*out*/;
            resourceInputs["privateEndpointResourceId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PrivateLinkEndpointService.__pulumiType, name, resourceInputs, opts);
    }
}
exports.PrivateLinkEndpointService = PrivateLinkEndpointService;
/** @internal */
PrivateLinkEndpointService.__pulumiType = 'mongodbatlas:index/privateLinkEndpointService:PrivateLinkEndpointService';
//# sourceMappingURL=privateLinkEndpointService.js.map