"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.PushBasedLogExport = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * ## Example Usage
 *
 * ### S
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * export = async () => {
 *     const project_tf = new mongodbatlas.Project("project-tf", {
 *         name: atlasProjectName,
 *         orgId: atlasOrgId,
 *     });
 *     // Set up cloud provider access in Atlas using the created IAM role
 *     const setupOnly = new mongodbatlas.CloudProviderAccessSetup("setup_only", {
 *         projectId: project_tf.id,
 *         providerName: "AWS",
 *     });
 *     const authRole = new mongodbatlas.CloudProviderAccessAuthorization("auth_role", {
 *         projectId: project_tf.id,
 *         roleId: setupOnly.roleId,
 *         aws: {
 *             iamAssumedRoleArn: testRole.arn,
 *         },
 *     });
 *     // Set up push-based log export with authorized IAM role
 *     const testPushBasedLogExport = new mongodbatlas.PushBasedLogExport("test", {
 *         projectId: project_tf.id,
 *         bucketName: logBucket.bucket,
 *         iamRoleId: authRole.roleId,
 *         prefixPath: "push-based-log-test",
 *     });
 *     const test = mongodbatlas.getPushBasedLogExportOutput({
 *         projectId: testPushBasedLogExport.projectId,
 *     });
 *     return {
 *         test: test.apply(test => test.prefixPath),
 *     };
 * }
 * ```
 *
 * ## Import
 *
 * Push-based log export resource can be imported using the project ID, e.g.
 *
 * For more information see: [MongoDB Atlas API - Push-Based Log Export](https://www.mongodb.com/docs/api/doc/atlas-admin-api-v2/group/endpoint-push-based-log-export) Documentation.
 */
class PushBasedLogExport extends pulumi.CustomResource {
    /**
     * Get an existing PushBasedLogExport resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new PushBasedLogExport(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of PushBasedLogExport.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PushBasedLogExport.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["bucketName"] = state ? state.bucketName : undefined;
            resourceInputs["createDate"] = state ? state.createDate : undefined;
            resourceInputs["iamRoleId"] = state ? state.iamRoleId : undefined;
            resourceInputs["prefixPath"] = state ? state.prefixPath : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["timeouts"] = state ? state.timeouts : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.bucketName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bucketName'");
            }
            if ((!args || args.iamRoleId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'iamRoleId'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["bucketName"] = args ? args.bucketName : undefined;
            resourceInputs["iamRoleId"] = args ? args.iamRoleId : undefined;
            resourceInputs["prefixPath"] = args ? args.prefixPath : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["timeouts"] = args ? args.timeouts : undefined;
            resourceInputs["createDate"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PushBasedLogExport.__pulumiType, name, resourceInputs, opts);
    }
}
exports.PushBasedLogExport = PushBasedLogExport;
/** @internal */
PushBasedLogExport.__pulumiType = 'mongodbatlas:index/pushBasedLogExport:PushBasedLogExport';
//# sourceMappingURL=pushBasedLogExport.js.map