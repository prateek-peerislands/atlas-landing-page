"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.MaintenanceWindow = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * ## # Resource: mongodbatlas.MaintenanceWindow
 *
 * `mongodbatlas.MaintenanceWindow` provides a resource to schedule the maintenance window for your MongoDB Atlas Project and/or set to defer a scheduled maintenance up to two times. Please refer to [Maintenance Windows](https://www.mongodb.com/docs/atlas/tutorial/cluster-maintenance-window/#configure-maintenance-window) documentation for more details.
 *
 * > **NOTE:** Only a single maintenance window resource can be defined per project.
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
 *
 * ## Maintenance Window Considerations:
 *
 * - Urgent Maintenance Activities Cannot Wait: Urgent maintenance activities such as security patches cannot wait for your chosen window. Atlas will start those maintenance activities when needed.
 *
 * Once maintenance is scheduled for your cluster, you cannot change your maintenance window until the current maintenance efforts have completed.
 * - Maintenance Requires Replica Set Elections: Atlas performs maintenance the same way as the manual maintenance procedure. This requires at least one replica set election during the maintenance window per replica set.
 * - Maintenance Starts As Close to the Hour As Possible: Maintenance always begins as close to the scheduled hour as possible, but in-progress cluster updates or expected system issues could delay the start time.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = new mongodbatlas.MaintenanceWindow("test", {
 *     projectId: "<your-project-id>",
 *     dayOfWeek: 3,
 *     hourOfDay: 4,
 *     protectedHours: {
 *         startHourOfDay: 9,
 *         endHourOfDay: 17,
 *     },
 * });
 * ```
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = new mongodbatlas.MaintenanceWindow("test", {
 *     projectId: "<your-project-id>",
 *     defer: true,
 * });
 * ```
 *
 * ## Import
 *
 * Maintenance Window entries can be imported using project project_id, in the format `PROJECTID`, e.g.
 *
 * ```sh
 * $ pulumi import mongodbatlas:index/maintenanceWindow:MaintenanceWindow test 5d0f1f73cf09a29120e173cf
 * ```
 * For more information see: [MongoDB Atlas API Reference.](https://docs.atlas.mongodb.com/reference/api/maintenance-windows/)
 */
class MaintenanceWindow extends pulumi.CustomResource {
    /**
     * Get an existing MaintenanceWindow resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new MaintenanceWindow(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of MaintenanceWindow.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MaintenanceWindow.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["autoDefer"] = state ? state.autoDefer : undefined;
            resourceInputs["autoDeferOnceEnabled"] = state ? state.autoDeferOnceEnabled : undefined;
            resourceInputs["dayOfWeek"] = state ? state.dayOfWeek : undefined;
            resourceInputs["defer"] = state ? state.defer : undefined;
            resourceInputs["hourOfDay"] = state ? state.hourOfDay : undefined;
            resourceInputs["numberOfDeferrals"] = state ? state.numberOfDeferrals : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["protectedHours"] = state ? state.protectedHours : undefined;
            resourceInputs["startAsap"] = state ? state.startAsap : undefined;
            resourceInputs["timeZoneId"] = state ? state.timeZoneId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.dayOfWeek === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dayOfWeek'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["autoDefer"] = args ? args.autoDefer : undefined;
            resourceInputs["autoDeferOnceEnabled"] = args ? args.autoDeferOnceEnabled : undefined;
            resourceInputs["dayOfWeek"] = args ? args.dayOfWeek : undefined;
            resourceInputs["defer"] = args ? args.defer : undefined;
            resourceInputs["hourOfDay"] = args ? args.hourOfDay : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["protectedHours"] = args ? args.protectedHours : undefined;
            resourceInputs["startAsap"] = args ? args.startAsap : undefined;
            resourceInputs["numberOfDeferrals"] = undefined /*out*/;
            resourceInputs["timeZoneId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MaintenanceWindow.__pulumiType, name, resourceInputs, opts);
    }
}
exports.MaintenanceWindow = MaintenanceWindow;
/** @internal */
MaintenanceWindow.__pulumiType = 'mongodbatlas:index/maintenanceWindow:MaintenanceWindow';
//# sourceMappingURL=maintenanceWindow.js.map