"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.getProjectsOutput = exports.getProjects = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * ## # Data Source: mongodbatlas.getProjects
 *
 * `mongodbatlas.getProjects` describes all Projects. This represents projects that have been created.
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = mongodbatlas.getRolesOrgId({});
 * const testProject = new mongodbatlas.Project("test", {
 *     name: "project-name",
 *     orgId: test.then(test => test.orgId),
 *     teams: [
 *         {
 *             teamId: "5e0fa8c99ccf641c722fe645",
 *             roleNames: ["GROUP_OWNER"],
 *         },
 *         {
 *             teamId: "5e1dd7b4f2a30ba80a70cd4rw",
 *             roleNames: [
 *                 "GROUP_READ_ONLY",
 *                 "GROUP_DATA_ACCESS_READ_WRITE",
 *             ],
 *         },
 *     ],
 *     limits: [{
 *         name: "atlas.project.deployment.clusters",
 *         value: 26,
 *     }],
 * });
 * const testGetProjects = mongodbatlas.getProjects({
 *     pageNum: 1,
 *     itemsPerPage: 5,
 * });
 * ```
 */
function getProjects(args, opts) {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("mongodbatlas:index/getProjects:getProjects", {
        "itemsPerPage": args.itemsPerPage,
        "pageNum": args.pageNum,
    }, opts);
}
exports.getProjects = getProjects;
/**
 * ## # Data Source: mongodbatlas.getProjects
 *
 * `mongodbatlas.getProjects` describes all Projects. This represents projects that have been created.
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = mongodbatlas.getRolesOrgId({});
 * const testProject = new mongodbatlas.Project("test", {
 *     name: "project-name",
 *     orgId: test.then(test => test.orgId),
 *     teams: [
 *         {
 *             teamId: "5e0fa8c99ccf641c722fe645",
 *             roleNames: ["GROUP_OWNER"],
 *         },
 *         {
 *             teamId: "5e1dd7b4f2a30ba80a70cd4rw",
 *             roleNames: [
 *                 "GROUP_READ_ONLY",
 *                 "GROUP_DATA_ACCESS_READ_WRITE",
 *             ],
 *         },
 *     ],
 *     limits: [{
 *         name: "atlas.project.deployment.clusters",
 *         value: 26,
 *     }],
 * });
 * const testGetProjects = mongodbatlas.getProjects({
 *     pageNum: 1,
 *     itemsPerPage: 5,
 * });
 * ```
 */
function getProjectsOutput(args, opts) {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("mongodbatlas:index/getProjects:getProjects", {
        "itemsPerPage": args.itemsPerPage,
        "pageNum": args.pageNum,
    }, opts);
}
exports.getProjectsOutput = getProjectsOutput;
//# sourceMappingURL=getProjects.js.map