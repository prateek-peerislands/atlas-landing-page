"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.getClusterOutput = exports.getCluster = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const testCluster = new mongodbatlas.Cluster("test", {
 *     projectId: "<YOUR-PROJECT-ID>",
 *     name: "cluster-test",
 *     clusterType: "REPLICASET",
 *     replicationSpecs: [{
 *         numShards: 1,
 *         regionsConfigs: [{
 *             regionName: "US_EAST_1",
 *             electableNodes: 3,
 *             priority: 7,
 *             readOnlyNodes: 0,
 *         }],
 *     }],
 *     cloudBackup: true,
 *     autoScalingDiskGbEnabled: true,
 *     providerName: "AWS",
 *     providerInstanceSizeName: "M40",
 * });
 * const test = mongodbatlas.getClusterOutput({
 *     projectId: testCluster.projectId,
 *     name: testCluster.name,
 * });
 * ```
 */
function getCluster(args, opts) {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("mongodbatlas:index/getCluster:getCluster", {
        "name": args.name,
        "projectId": args.projectId,
    }, opts);
}
exports.getCluster = getCluster;
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const testCluster = new mongodbatlas.Cluster("test", {
 *     projectId: "<YOUR-PROJECT-ID>",
 *     name: "cluster-test",
 *     clusterType: "REPLICASET",
 *     replicationSpecs: [{
 *         numShards: 1,
 *         regionsConfigs: [{
 *             regionName: "US_EAST_1",
 *             electableNodes: 3,
 *             priority: 7,
 *             readOnlyNodes: 0,
 *         }],
 *     }],
 *     cloudBackup: true,
 *     autoScalingDiskGbEnabled: true,
 *     providerName: "AWS",
 *     providerInstanceSizeName: "M40",
 * });
 * const test = mongodbatlas.getClusterOutput({
 *     projectId: testCluster.projectId,
 *     name: testCluster.name,
 * });
 * ```
 */
function getClusterOutput(args, opts) {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("mongodbatlas:index/getCluster:getCluster", {
        "name": args.name,
        "projectId": args.projectId,
    }, opts);
}
exports.getClusterOutput = getClusterOutput;
//# sourceMappingURL=getCluster.js.map