"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.FederatedSettingsIdentityProvider = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * ## # Resource: mongodbatlas.FederatedSettingsIdentityProvider
 *
 * `mongodbatlas.FederatedSettingsIdentityProvider` provides an Atlas federated settings identity provider resource provides a subset of settings to be maintained post import of the existing resource.
 *
 * ## Example Usage
 *
 * > **IMPORTANT** If you want to use a SAML Identity Provider, you **MUST** import this resource before you can manage it with this provider.
 *
 * SAML IdP:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const identityProvider = new mongodbatlas.FederatedSettingsIdentityProvider("identity_provider", {
 *     federationSettingsId: "627a9687f7f7f7f774de306f14",
 *     name: "mongodb_federation_test",
 *     associatedDomains: ["yourdomain.com"],
 *     ssoDebugEnabled: true,
 *     status: "ACTIVE",
 *     ssoUrl: "https://mysso.oktapreview.com/app/mysso_terraformtestsso/exk17q7f7f7f7f50h8/sso/saml",
 *     issuerUri: "http://www.okta.com/exk17q7f7f7f7fp50h8",
 *     requestBinding: "HTTP-POST",
 *     responseSignatureAlgorithm: "SHA-256",
 * });
 * ```
 *
 * OIDC IdP:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const oidc = new mongodbatlas.FederatedSettingsIdentityProvider("oidc", {
 *     federationSettingsId: _this.id,
 *     audience: tokenAudience,
 *     authorizationType: "USER",
 *     description: "oidc",
 *     issuerUri: `https://sts.windows.net/${thisAzurermUserAssignedIdentity.tenantId}/`,
 *     idpType: "WORKLOAD",
 *     name: "OIDC-for-azure",
 *     protocol: "OIDC",
 *     userClaim: "sub",
 * });
 * ```
 *
 * ## Import
 *
 * Identity Provider __must__ be imported before using federation_settings_id-idp_id, e.g.
 *
 * ```sh
 * $ pulumi import mongodbatlas:index/federatedSettingsIdentityProvider:FederatedSettingsIdentityProvider identity_provider 6287a663c660f52b1c441c6c-0oad4fas87jL5Xnk12971234
 * ```
 * For more information see: [MongoDB Atlas API Reference.](https://www.mongodb.com/docs/atlas/reference/api/federation-configuration/)
 */
class FederatedSettingsIdentityProvider extends pulumi.CustomResource {
    /**
     * Get an existing FederatedSettingsIdentityProvider resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new FederatedSettingsIdentityProvider(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of FederatedSettingsIdentityProvider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FederatedSettingsIdentityProvider.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["associatedDomains"] = state ? state.associatedDomains : undefined;
            resourceInputs["audience"] = state ? state.audience : undefined;
            resourceInputs["authorizationType"] = state ? state.authorizationType : undefined;
            resourceInputs["clientId"] = state ? state.clientId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["federationSettingsId"] = state ? state.federationSettingsId : undefined;
            resourceInputs["groupsClaim"] = state ? state.groupsClaim : undefined;
            resourceInputs["idpId"] = state ? state.idpId : undefined;
            resourceInputs["idpType"] = state ? state.idpType : undefined;
            resourceInputs["issuerUri"] = state ? state.issuerUri : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["oktaIdpId"] = state ? state.oktaIdpId : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["requestBinding"] = state ? state.requestBinding : undefined;
            resourceInputs["requestedScopes"] = state ? state.requestedScopes : undefined;
            resourceInputs["responseSignatureAlgorithm"] = state ? state.responseSignatureAlgorithm : undefined;
            resourceInputs["ssoDebugEnabled"] = state ? state.ssoDebugEnabled : undefined;
            resourceInputs["ssoUrl"] = state ? state.ssoUrl : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["userClaim"] = state ? state.userClaim : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.federationSettingsId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'federationSettingsId'");
            }
            if ((!args || args.issuerUri === undefined) && !opts.urn) {
                throw new Error("Missing required property 'issuerUri'");
            }
            resourceInputs["associatedDomains"] = args ? args.associatedDomains : undefined;
            resourceInputs["audience"] = args ? args.audience : undefined;
            resourceInputs["authorizationType"] = args ? args.authorizationType : undefined;
            resourceInputs["clientId"] = args ? args.clientId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["federationSettingsId"] = args ? args.federationSettingsId : undefined;
            resourceInputs["groupsClaim"] = args ? args.groupsClaim : undefined;
            resourceInputs["idpType"] = args ? args.idpType : undefined;
            resourceInputs["issuerUri"] = args ? args.issuerUri : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["requestBinding"] = args ? args.requestBinding : undefined;
            resourceInputs["requestedScopes"] = args ? args.requestedScopes : undefined;
            resourceInputs["responseSignatureAlgorithm"] = args ? args.responseSignatureAlgorithm : undefined;
            resourceInputs["ssoDebugEnabled"] = args ? args.ssoDebugEnabled : undefined;
            resourceInputs["ssoUrl"] = args ? args.ssoUrl : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["userClaim"] = args ? args.userClaim : undefined;
            resourceInputs["idpId"] = undefined /*out*/;
            resourceInputs["oktaIdpId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FederatedSettingsIdentityProvider.__pulumiType, name, resourceInputs, opts);
    }
}
exports.FederatedSettingsIdentityProvider = FederatedSettingsIdentityProvider;
/** @internal */
FederatedSettingsIdentityProvider.__pulumiType = 'mongodbatlas:index/federatedSettingsIdentityProvider:FederatedSettingsIdentityProvider';
//# sourceMappingURL=federatedSettingsIdentityProvider.js.map